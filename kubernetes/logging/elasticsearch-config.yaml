# Elasticsearch Configuration for WriteCareNotes Centralized Logging
# Provides scalable log storage and search capabilities for healthcare operations

apiVersion: v1
kind: Namespace
metadata:
  name: logging
  labels:
    name: logging
    tier: infrastructure

---
# Elasticsearch StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: logging
spec:
  serviceName: elasticsearch
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        ports:
        - containerPort: 9200
          name: rest
          protocol: TCP
        - containerPort: 9300
          name: inter-node
          protocol: TCP
        env:
        - name: cluster.name
          value: writecarenotes-logs
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "elasticsearch-0.elasticsearch,elasticsearch-1.elasticsearch,elasticsearch-2.elasticsearch"
        - name: cluster.initial_master_nodes
          value: "elasticsearch-0,elasticsearch-1,elasticsearch-2"
        - name: ES_JAVA_OPTS
          value: "-Xms2g -Xmx2g"
        - name: xpack.security.enabled
          value: "true"
        - name: xpack.security.transport.ssl.enabled
          value: "true"
        - name: xpack.security.transport.ssl.verification_mode
          value: certificate
        - name: xpack.security.transport.ssl.keystore.path
          value: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
        - name: xpack.security.transport.ssl.truststore.path
          value: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
        - name: xpack.security.http.ssl.enabled
          value: "true"
        - name: xpack.security.http.ssl.keystore.path
          value: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-secrets
              key: elastic-password
        resources:
          requests:
            cpu: 1000m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
        - name: certs
          mountPath: /usr/share/elasticsearch/config/certs
          readOnly: true
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /_cluster/health?wait_for_status=green&timeout=1s
            port: 9200
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: certs
        secret:
          secretName: elasticsearch-certs
      initContainers:
      - name: fix-permissions
        image: busybox
        command: ["sh", "-c", "chown -R 1000:1000 /usr/share/elasticsearch/data"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: elasticsearch
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp2
      resources:
        requests:
          storage: 100Gi

---
# Elasticsearch Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: logging
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  clusterIP: None
  ports:
    - port: 9200
      name: rest
    - port: 9300
      name: inter-node

---
# Elasticsearch Client Service
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-client
  namespace: logging
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      name: rest
      targetPort: 9200

---
# Elasticsearch Secrets
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secrets
  namespace: logging
type: Opaque
data:
  # elastic-password: base64 encoded password
  elastic-password: V3JpdGVDYXJlTm90ZXNFbGFzdGljMjAyNQ==

---
# Elasticsearch Certificate Secret (placeholder - generate real certs in production)
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-certs
  namespace: logging
type: Opaque
data:
  # This should contain real certificates in production
  elastic-certificates.p12: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t

---
# Index Template for Healthcare Logs
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-index-template
  namespace: logging
data:
  healthcare-logs-template.json: |
    {
      "index_patterns": ["healthcare-logs-*"],
      "template": {
        "settings": {
          "number_of_shards": 3,
          "number_of_replicas": 1,
          "index.refresh_interval": "5s",
          "index.max_result_window": 50000
        },
        "mappings": {
          "properties": {
            "@timestamp": {
              "type": "date"
            },
            "level": {
              "type": "keyword"
            },
            "message": {
              "type": "text",
              "analyzer": "standard"
            },
            "service": {
              "type": "keyword"
            },
            "namespace": {
              "type": "keyword"
            },
            "pod": {
              "type": "keyword"
            },
            "container": {
              "type": "keyword"
            },
            "user_id": {
              "type": "keyword"
            },
            "tenant_id": {
              "type": "keyword"
            },
            "correlation_id": {
              "type": "keyword"
            },
            "healthcare_context": {
              "type": "keyword"
            },
            "compliance_level": {
              "type": "keyword"
            },
            "audit_required": {
              "type": "boolean"
            },
            "resident_id": {
              "type": "keyword"
            },
            "medication_id": {
              "type": "keyword"
            },
            "care_plan_id": {
              "type": "keyword"
            },
            "assessment_id": {
              "type": "keyword"
            },
            "error_code": {
              "type": "keyword"
            },
            "stack_trace": {
              "type": "text",
              "index": false
            },
            "request_method": {
              "type": "keyword"
            },
            "request_path": {
              "type": "keyword"
            },
            "response_status": {
              "type": "integer"
            },
            "response_time": {
              "type": "float"
            },
            "ip_address": {
              "type": "ip"
            },
            "user_agent": {
              "type": "text",
              "index": false
            }
          }
        }
      },
      "priority": 100,
      "version": 1
    }

---
# Index Lifecycle Policy for Log Retention
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-ilm-policy
  namespace: logging
data:
  healthcare-logs-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "actions": {
              "rollover": {
                "max_size": "10GB",
                "max_age": "7d"
              },
              "set_priority": {
                "priority": 100
              }
            }
          },
          "warm": {
            "min_age": "7d",
            "actions": {
              "set_priority": {
                "priority": 50
              },
              "allocate": {
                "number_of_replicas": 0
              }
            }
          },
          "cold": {
            "min_age": "30d",
            "actions": {
              "set_priority": {
                "priority": 0
              }
            }
          },
          "delete": {
            "min_age": "2555d"
          }
        }
      }
    }