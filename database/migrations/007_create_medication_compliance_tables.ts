/**\n * @fileoverview Database migration for medication regulatory compliance tables\n * @module CreateMedicationComplianceTables\n * @version 1.0.0\n * @author WriteCareNotes Team\n * @since 2025-01-01\n * \n * @description Creates comprehensive database schema for medication regulatory compliance,\n * audit trails, and automated reporting across all British Isles jurisdictions.\n * \n * @compliance\n * - CQC, MHRA, Care Inspectorate, CIW, RQIA, HIQA Standards\n * - GDPR and Data Protection Act 2018\n * - Professional Standards (GMC, NMC, GPhC)\n * \n * @security\n * - Encrypted sensitive data fields\n * - Audit trail integrity\n * - Data retention policies\n * - Access control constraints\n */\n\nimport { MigrationInterface, QueryRunner, Table, Index, ForeignKey } from 'typeorm';\n\nexport class CreateMedicationComplianceTables1704067200000 implements MigrationInterface {\n  name = 'CreateMedicationComplianceTables1704067200000';\n\n  public async up(queryRunner: QueryRunner): Promise<void> {\n    // Create compliance_rules table\n    await queryRunner.createTable(\n      new Table({\n        name: 'compliance_rules',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'rule_type',\n            type: 'enum',\n            enum: ['medication_safety', 'controlled_substances', 'prescription_validity', 'administration_timing', 'audit_trail', 'data_protection']\n          },\n          {\n            name: 'jurisdiction',\n            type: 'enum',\n            enum: ['england', 'scotland', 'wales', 'northern_ireland', 'ireland', 'isle_of_man', 'guernsey', 'jersey', 'all']\n          },\n          {\n            name: 'regulatory_body',\n            type: 'enum',\n            enum: ['mhra', 'cqc', 'care_inspectorate', 'ciw', 'rqia', 'hiqa', 'imb', 'dhsc', 'care_commission']\n          },\n          {\n            name: 'rule_name',\n            type: 'varchar',\n            length: '255',\n            isNullable: false\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'severity',\n            type: 'enum',\n            enum: ['low', 'medium', 'high', 'critical']\n          },\n          {\n            name: 'auto_check',\n            type: 'boolean',\n            default: true\n          },\n          {\n            name: 'check_frequency',\n            type: 'enum',\n            enum: ['real_time', 'hourly', 'daily', 'weekly', 'monthly']\n          },\n          {\n            name: 'parameters',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'is_active',\n            type: 'boolean',\n            default: true\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create compliance_violations table\n    await queryRunner.createTable(\n      new Table({\n        name: 'compliance_violations',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'rule_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'rule_name',\n            type: 'varchar',\n            length: '255',\n            isNullable: false\n          },\n          {\n            name: 'entity_type',\n            type: 'varchar',\n            length: '100',\n            isNullable: false\n          },\n          {\n            name: 'entity_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'violation_type',\n            type: 'enum',\n            enum: ['warning', 'minor', 'major', 'critical']\n          },\n          {\n            name: 'severity',\n            type: 'enum',\n            enum: ['low', 'medium', 'high', 'critical']\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'details',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'detected_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'status',\n            type: 'enum',\n            enum: ['open', 'acknowledged', 'resolved', 'false_positive'],\n            default: \"'open'\"\n          },\n          {\n            name: 'assigned_to',\n            type: 'varchar',\n            length: '36',\n            isNullable: true\n          },\n          {\n            name: 'resolved_by',\n            type: 'varchar',\n            length: '36',\n            isNullable: true\n          },\n          {\n            name: 'resolved_at',\n            type: 'timestamp with time zone',\n            isNullable: true\n          },\n          {\n            name: 'resolution_notes',\n            type: 'text',\n            isNullable: true\n          },\n          {\n            name: 'regulatory_impact',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'recommended_actions',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'tenant_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create audit_trails table\n    await queryRunner.createTable(\n      new Table({\n        name: 'audit_trails',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'entity_type',\n            type: 'varchar',\n            length: '100',\n            isNullable: false\n          },\n          {\n            name: 'entity_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'action',\n            type: 'enum',\n            enum: ['CREATE', 'READ', 'UPDATE', 'DELETE', 'APPROVE', 'REJECT', 'ADMINISTER', 'SCHEDULE', 'ALERT']\n          },\n          {\n            name: 'user_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'user_name',\n            type: 'varchar',\n            length: '255',\n            isNullable: false\n          },\n          {\n            name: 'user_role',\n            type: 'varchar',\n            length: '100',\n            isNullable: false\n          },\n          {\n            name: 'timestamp',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'ip_address',\n            type: 'inet',\n            isNullable: false\n          },\n          {\n            name: 'user_agent',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'session_id',\n            type: 'varchar',\n            length: '255',\n            isNullable: false\n          },\n          {\n            name: 'before_state',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'after_state',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'changes',\n            type: 'jsonb',\n            isNullable: false\n          },\n          {\n            name: 'reason',\n            type: 'text',\n            isNullable: true\n          },\n          {\n            name: 'metadata',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'hash',\n            type: 'varchar',\n            length: '64',\n            isNullable: false,\n            comment: 'SHA-256 hash for integrity verification'\n          },\n          {\n            name: 'previous_hash',\n            type: 'varchar',\n            length: '64',\n            isNullable: true,\n            comment: 'Previous audit entry hash for chain integrity'\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'tenant_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'archived',\n            type: 'boolean',\n            default: false\n          },\n          {\n            name: 'archived_at',\n            type: 'timestamp with time zone',\n            isNullable: true\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create compliance_reports table\n    await queryRunner.createTable(\n      new Table({\n        name: 'compliance_reports',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'report_type',\n            type: 'enum',\n            enum: ['cqc', 'mhra', 'care_inspectorate', 'ciw', 'rqia', 'hiqa', 'dhsc', 'internal']\n          },\n          {\n            name: 'jurisdiction',\n            type: 'enum',\n            enum: ['england', 'scotland', 'wales', 'northern_ireland', 'republic_of_ireland', 'isle_of_man', 'guernsey', 'jersey']\n          },\n          {\n            name: 'report_period_start',\n            type: 'date',\n            isNullable: false\n          },\n          {\n            name: 'report_period_end',\n            type: 'date',\n            isNullable: false\n          },\n          {\n            name: 'generated_date',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'generated_by',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'status',\n            type: 'enum',\n            enum: ['draft', 'pending_review', 'approved', 'submitted', 'acknowledged'],\n            default: \"'draft'\"\n          },\n          {\n            name: 'sections',\n            type: 'jsonb',\n            isNullable: false\n          },\n          {\n            name: 'metrics',\n            type: 'jsonb',\n            isNullable: false\n          },\n          {\n            name: 'violations',\n            type: 'jsonb',\n            isNullable: false\n          },\n          {\n            name: 'recommendations',\n            type: 'jsonb',\n            isNullable: false\n          },\n          {\n            name: 'submission_reference',\n            type: 'varchar',\n            length: '100',\n            isNullable: true\n          },\n          {\n            name: 'submission_date',\n            type: 'timestamp with time zone',\n            isNullable: true\n          },\n          {\n            name: 'submission_details',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'acknowledgment_date',\n            type: 'timestamp with time zone',\n            isNullable: true\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create regulatory_notifications table\n    await queryRunner.createTable(\n      new Table({\n        name: 'regulatory_notifications',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'incident_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'incident_type',\n            type: 'enum',\n            enum: ['medication_error', 'adverse_reaction', 'controlled_substance_loss', 'safety_incident']\n          },\n          {\n            name: 'severity',\n            type: 'enum',\n            enum: ['low', 'medium', 'high', 'critical']\n          },\n          {\n            name: 'regulatory_bodies',\n            type: 'jsonb',\n            isNullable: false\n          },\n          {\n            name: 'submission_deadline',\n            type: 'timestamp with time zone',\n            isNullable: false\n          },\n          {\n            name: 'status',\n            type: 'enum',\n            enum: ['pending', 'submitted', 'acknowledged', 'closed'],\n            default: \"'pending'\"\n          },\n          {\n            name: 'submission_reference',\n            type: 'varchar',\n            length: '100',\n            isNullable: true\n          },\n          {\n            name: 'submitted_at',\n            type: 'timestamp with time zone',\n            isNullable: true\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_by',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create compliance_exports table\n    await queryRunner.createTable(\n      new Table({\n        name: 'compliance_exports',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'export_type',\n            type: 'enum',\n            enum: ['full_audit', 'medication_records', 'incident_reports', 'training_records']\n          },\n          {\n            name: 'date_range_start',\n            type: 'date',\n            isNullable: false\n          },\n          {\n            name: 'date_range_end',\n            type: 'date',\n            isNullable: false\n          },\n          {\n            name: 'file_path',\n            type: 'varchar',\n            length: '500',\n            isNullable: false\n          },\n          {\n            name: 'record_count',\n            type: 'integer',\n            isNullable: false\n          },\n          {\n            name: 'export_date',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'expiry_date',\n            type: 'timestamp with time zone',\n            isNullable: false\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_by',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create data_retention_policies table\n    await queryRunner.createTable(\n      new Table({\n        name: 'data_retention_policies',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'data_type',\n            type: 'varchar',\n            length: '100',\n            isNullable: false\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'retention_period',\n            type: 'integer',\n            isNullable: false,\n            comment: 'Retention period in years'\n          },\n          {\n            name: 'legal_basis',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'regulatory_requirement',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'disposal_method',\n            type: 'enum',\n            enum: ['secure_deletion', 'anonymization', 'archival']\n          },\n          {\n            name: 'review_frequency',\n            type: 'integer',\n            isNullable: false,\n            comment: 'Review frequency in months'\n          },\n          {\n            name: 'last_reviewed',\n            type: 'date',\n            isNullable: true\n          },\n          {\n            name: 'next_review_due',\n            type: 'date',\n            isNullable: false\n          },\n          {\n            name: 'is_active',\n            type: 'boolean',\n            default: true\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create compliance_requirements table\n    await queryRunner.createTable(\n      new Table({\n        name: 'compliance_requirements',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            length: '36',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            default: 'uuid_generate_v4()'\n          },\n          {\n            name: 'requirement_id',\n            type: 'varchar',\n            length: '50',\n            isNullable: false\n          },\n          {\n            name: 'title',\n            type: 'varchar',\n            length: '255',\n            isNullable: false\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: false\n          },\n          {\n            name: 'regulatory_reference',\n            type: 'varchar',\n            length: '100',\n            isNullable: false\n          },\n          {\n            name: 'mandatory',\n            type: 'boolean',\n            default: true\n          },\n          {\n            name: 'compliance_status',\n            type: 'enum',\n            enum: ['met', 'not_met', 'partially_met', 'not_assessed'],\n            default: \"'not_assessed'\"\n          },\n          {\n            name: 'evidence',\n            type: 'jsonb',\n            isNullable: true\n          },\n          {\n            name: 'last_verified',\n            type: 'timestamp with time zone',\n            isNullable: true\n          },\n          {\n            name: 'next_review_due',\n            type: 'timestamp with time zone',\n            isNullable: false\n          },\n          {\n            name: 'is_active',\n            type: 'boolean',\n            default: true\n          },\n          {\n            name: 'organization_id',\n            type: 'varchar',\n            length: '36',\n            isNullable: false\n          },\n          {\n            name: 'created_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          },\n          {\n            name: 'updated_at',\n            type: 'timestamp with time zone',\n            default: 'CURRENT_TIMESTAMP'\n          }\n        ]\n      }),\n      true\n    );\n\n    // Create indexes for performance optimization\n    await queryRunner.createIndex('compliance_rules', new Index('idx_compliance_rules_type_jurisdiction', ['rule_type', 'jurisdiction']));\n    await queryRunner.createIndex('compliance_rules', new Index('idx_compliance_rules_active', ['is_active']));\n    \n    await queryRunner.createIndex('compliance_violations', new Index('idx_compliance_violations_org_status', ['organization_id', 'status']));\n    await queryRunner.createIndex('compliance_violations', new Index('idx_compliance_violations_detected_at', ['detected_at']));\n    await queryRunner.createIndex('compliance_violations', new Index('idx_compliance_violations_severity', ['severity']));\n    await queryRunner.createIndex('compliance_violations', new Index('idx_compliance_violations_entity', ['entity_type', 'entity_id']));\n    \n    await queryRunner.createIndex('audit_trails', new Index('idx_audit_trails_org_timestamp', ['organization_id', 'timestamp']));\n    await queryRunner.createIndex('audit_trails', new Index('idx_audit_trails_entity', ['entity_type', 'entity_id']));\n    await queryRunner.createIndex('audit_trails', new Index('idx_audit_trails_user', ['user_id']));\n    await queryRunner.createIndex('audit_trails', new Index('idx_audit_trails_action', ['action']));\n    await queryRunner.createIndex('audit_trails', new Index('idx_audit_trails_hash', ['hash']));\n    await queryRunner.createIndex('audit_trails', new Index('idx_audit_trails_archived', ['archived']));\n    \n    await queryRunner.createIndex('compliance_reports', new Index('idx_compliance_reports_org_type', ['organization_id', 'report_type']));\n    await queryRunner.createIndex('compliance_reports', new Index('idx_compliance_reports_status', ['status']));\n    await queryRunner.createIndex('compliance_reports', new Index('idx_compliance_reports_generated_date', ['generated_date']));\n    \n    await queryRunner.createIndex('regulatory_notifications', new Index('idx_regulatory_notifications_org_status', ['organization_id', 'status']));\n    await queryRunner.createIndex('regulatory_notifications', new Index('idx_regulatory_notifications_deadline', ['submission_deadline']));\n    await queryRunner.createIndex('regulatory_notifications', new Index('idx_regulatory_notifications_incident', ['incident_id']));\n    \n    await queryRunner.createIndex('compliance_exports', new Index('idx_compliance_exports_org_type', ['organization_id', 'export_type']));\n    await queryRunner.createIndex('compliance_exports', new Index('idx_compliance_exports_expiry', ['expiry_date']));\n    \n    await queryRunner.createIndex('data_retention_policies', new Index('idx_data_retention_policies_org_active', ['organization_id', 'is_active']));\n    await queryRunner.createIndex('data_retention_policies', new Index('idx_data_retention_policies_review_due', ['next_review_due']));\n    \n    await queryRunner.createIndex('compliance_requirements', new Index('idx_compliance_requirements_org_status', ['organization_id', 'compliance_status']));\n    await queryRunner.createIndex('compliance_requirements', new Index('idx_compliance_requirements_review_due', ['next_review_due']));\n    await queryRunner.createIndex('compliance_requirements', new Index('idx_compliance_requirements_active', ['is_active']));\n\n    // Create foreign key constraints\n    await queryRunner.createForeignKey('compliance_violations', new ForeignKey({\n      columnNames: ['rule_id'],\n      referencedTableName: 'compliance_rules',\n      referencedColumnNames: ['id'],\n      onDelete: 'RESTRICT',\n      onUpdate: 'CASCADE'\n    }));\n\n    // Add triggers for updated_at timestamps\n    await queryRunner.query(`\n      CREATE OR REPLACE FUNCTION update_updated_at_column()\n      RETURNS TRIGGER AS $$\n      BEGIN\n        NEW.updated_at = CURRENT_TIMESTAMP;\n        RETURN NEW;\n      END;\n      $$ language 'plpgsql';\n    `);\n\n    const tablesWithUpdatedAt = [\n      'compliance_rules',\n      'compliance_violations', \n      'compliance_reports',\n      'regulatory_notifications',\n      'data_retention_policies',\n      'compliance_requirements'\n    ];\n\n    for (const table of tablesWithUpdatedAt) {\n      await queryRunner.query(`\n        CREATE TRIGGER update_${table}_updated_at\n        BEFORE UPDATE ON ${table}\n        FOR EACH ROW\n        EXECUTE FUNCTION update_updated_at_column();\n      `);\n    }\n\n    // Insert default compliance rules\n    await this.insertDefaultComplianceRules(queryRunner);\n\n    // Insert default data retention policies\n    await this.insertDefaultDataRetentionPolicies(queryRunner);\n\n    // Insert default compliance requirements\n    await this.insertDefaultComplianceRequirements(queryRunner);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise<void> {\n    // Drop triggers\n    const tablesWithUpdatedAt = [\n      'compliance_rules',\n      'compliance_violations',\n      'compliance_reports', \n      'regulatory_notifications',\n      'data_retention_policies',\n      'compliance_requirements'\n    ];\n\n    for (const table of tablesWithUpdatedAt) {\n      await queryRunner.query(`DROP TRIGGER IF EXISTS update_${table}_updated_at ON ${table};`);\n    }\n\n    await queryRunner.query(`DROP FUNCTION IF EXISTS update_updated_at_column();`);\n\n    // Drop tables in reverse order\n    await queryRunner.dropTable('compliance_requirements');\n    await queryRunner.dropTable('data_retention_policies');\n    await queryRunner.dropTable('compliance_exports');\n    await queryRunner.dropTable('regulatory_notifications');\n    await queryRunner.dropTable('compliance_reports');\n    await queryRunner.dropTable('audit_trails');\n    await queryRunner.dropTable('compliance_violations');\n    await queryRunner.dropTable('compliance_rules');\n  }\n\n  private async insertDefaultComplianceRules(queryRunner: QueryRunner): Promise<void> {\n    const defaultRules = [\n      {\n        rule_type: 'medication_safety',\n        jurisdiction: 'all',\n        regulatory_body: 'mhra',\n        rule_name: 'Medication Administration Record Completeness',\n        description: 'All medication administrations must be recorded with complete details including time, dose, route, and administrator',\n        severity: 'high',\n        auto_check: true,\n        check_frequency: 'real_time',\n        parameters: JSON.stringify({ required_fields: ['time', 'dose', 'route', 'administrator'] })\n      },\n      {\n        rule_type: 'controlled_substances',\n        jurisdiction: 'all',\n        regulatory_body: 'mhra',\n        rule_name: 'Controlled Substances Witness Requirement',\n        description: 'All controlled substance administrations must have a witness signature',\n        severity: 'critical',\n        auto_check: true,\n        check_frequency: 'real_time',\n        parameters: JSON.stringify({ witness_required: true })\n      },\n      {\n        rule_type: 'prescription_validity',\n        jurisdiction: 'all',\n        regulatory_body: 'mhra',\n        rule_name: 'Prescription Expiry Check',\n        description: 'Medications must not be administered from expired prescriptions',\n        severity: 'high',\n        auto_check: true,\n        check_frequency: 'daily',\n        parameters: JSON.stringify({ check_expiry: true })\n      },\n      {\n        rule_type: 'administration_timing',\n        jurisdiction: 'all',\n        regulatory_body: 'cqc',\n        rule_name: 'Medication Timing Compliance',\n        description: 'Medications must be administered within acceptable time windows',\n        severity: 'medium',\n        auto_check: true,\n        check_frequency: 'real_time',\n        parameters: JSON.stringify({ time_window_minutes: 30 })\n      },\n      {\n        rule_type: 'audit_trail',\n        jurisdiction: 'all',\n        regulatory_body: 'cqc',\n        rule_name: 'Complete Audit Trail',\n        description: 'All medication-related actions must have complete audit trails',\n        severity: 'high',\n        auto_check: true,\n        check_frequency: 'real_time',\n        parameters: JSON.stringify({ required_audit_fields: ['user_id', 'timestamp', 'action', 'details'] })\n      },\n      {\n        rule_type: 'data_protection',\n        jurisdiction: 'all',\n        regulatory_body: 'cqc',\n        rule_name: 'Personal Data Encryption',\n        description: 'All personal and medical data must be encrypted at rest and in transit',\n        severity: 'critical',\n        auto_check: true,\n        check_frequency: 'daily',\n        parameters: JSON.stringify({ encryption_required: true })\n      }\n    ];\n\n    for (const rule of defaultRules) {\n      await queryRunner.query(`\n        INSERT INTO compliance_rules (\n          rule_type, jurisdiction, regulatory_body, rule_name, description,\n          severity, auto_check, check_frequency, parameters\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n      `, [\n        rule.rule_type, rule.jurisdiction, rule.regulatory_body, rule.rule_name,\n        rule.description, rule.severity, rule.auto_check, rule.check_frequency,\n        rule.parameters\n      ]);\n    }\n  }\n\n  private async insertDefaultDataRetentionPolicies(queryRunner: QueryRunner): Promise<void> {\n    const defaultPolicies = [\n      {\n        data_type: 'audit_trails',\n        description: 'Audit trail records for medication management activities',\n        retention_period: 7,\n        legal_basis: 'Healthcare records retention requirements',\n        regulatory_requirement: 'CQC Regulation 17 - Good governance',\n        disposal_method: 'secure_deletion',\n        review_frequency: 12,\n        next_review_due: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)\n      },\n      {\n        data_type: 'compliance_violations',\n        description: 'Records of compliance violations and corrective actions',\n        retention_period: 7,\n        legal_basis: 'Regulatory compliance requirements',\n        regulatory_requirement: 'CQC Regulation 17 - Good governance',\n        disposal_method: 'archival',\n        review_frequency: 12,\n        next_review_due: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)\n      },\n      {\n        data_type: 'compliance_reports',\n        description: 'Regulatory compliance reports and submissions',\n        retention_period: 10,\n        legal_basis: 'Regulatory reporting requirements',\n        regulatory_requirement: 'Various regulatory body requirements',\n        disposal_method: 'archival',\n        review_frequency: 24,\n        next_review_due: new Date(Date.now() + 2 * 365 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    for (const policy of defaultPolicies) {\n      await queryRunner.query(`\n        INSERT INTO data_retention_policies (\n          data_type, description, retention_period, legal_basis,\n          regulatory_requirement, disposal_method, review_frequency, next_review_due,\n          organization_id\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, 'default')\n      `, [\n        policy.data_type, policy.description, policy.retention_period, policy.legal_basis,\n        policy.regulatory_requirement, policy.disposal_method, policy.review_frequency,\n        policy.next_review_due\n      ]);\n    }\n  }\n\n  private async insertDefaultComplianceRequirements(queryRunner: QueryRunner): Promise<void> {\n    const defaultRequirements = [\n      {\n        requirement_id: 'CQC-REG-12-001',\n        title: 'Medication Administration Records',\n        description: 'Maintain accurate and complete medication administration records',\n        regulatory_reference: 'CQC Regulation 12 - Safe care and treatment',\n        mandatory: true,\n        next_review_due: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)\n      },\n      {\n        requirement_id: 'CQC-REG-12-002',\n        title: 'Controlled Substances Management',\n        description: 'Proper storage, handling, and recording of controlled substances',\n        regulatory_reference: 'CQC Regulation 12 - Safe care and treatment',\n        mandatory: true,\n        next_review_due: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)\n      },\n      {\n        requirement_id: 'CQC-REG-17-001',\n        title: 'Audit Trail Completeness',\n        description: 'Maintain complete audit trails for all medication-related activities',\n        regulatory_reference: 'CQC Regulation 17 - Good governance',\n        mandatory: true,\n        next_review_due: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)\n      },\n      {\n        requirement_id: 'MHRA-001',\n        title: 'Adverse Drug Reaction Reporting',\n        description: 'Report adverse drug reactions to MHRA Yellow Card Scheme',\n        regulatory_reference: 'MHRA Pharmacovigilance requirements',\n        mandatory: true,\n        next_review_due: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)\n      },\n      {\n        requirement_id: 'GDPR-001',\n        title: 'Personal Data Protection',\n        description: 'Protect personal data in accordance with GDPR requirements',\n        regulatory_reference: 'GDPR Article 32 - Security of processing',\n        mandatory: true,\n        next_review_due: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000)\n      }\n    ];\n\n    for (const requirement of defaultRequirements) {\n      await queryRunner.query(`\n        INSERT INTO compliance_requirements (\n          requirement_id, title, description, regulatory_reference,\n          mandatory, next_review_due, organization_id\n        ) VALUES ($1, $2, $3, $4, $5, $6, 'default')\n      `, [\n        requirement.requirement_id, requirement.title, requirement.description,\n        requirement.regulatory_reference, requirement.mandatory, requirement.next_review_due\n      ]);\n    }\n  }\n}