version: '3.8'

services:
  # Application service
  writecare-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: writecare/connect:latest
    container_name: writecare-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=writecare-db
      - DB_PORT=5432
      - DB_NAME=writecarenotes
      - DB_USERNAME=writecare
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=writecare-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DAILY_API_KEY=${DAILY_API_KEY}
      - EMAIL_PROVIDER=smtp
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMS_PROVIDER=twilio
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_FROM_NUMBER=${TWILIO_FROM_NUMBER}
      - STORAGE_PROVIDER=local
      - LOCAL_UPLOAD_PATH=/app/uploads
    volumes:
      - app-uploads:/app/uploads
      - app-logs:/app/logs
    depends_on:
      - writecare-db
      - writecare-redis
    networks:
      - writecare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database service
  writecare-db:
    image: postgres:15-alpine
    container_name: writecare-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=writecarenotes
      - POSTGRES_USER=writecare
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/seeds:/docker-entrypoint-initdb.d/seeds:ro
    ports:
      - "5432:5432"
    networks:
      - writecare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U writecare -d writecarenotes"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis service
  writecare-redis:
    image: redis:7-alpine
    container_name: writecare-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - writecare-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  writecare-nginx:
    image: nginx:alpine
    container_name: writecare-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - writecare-app
    networks:
      - writecare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  writecare-prometheus:
    image: prom/prometheus:latest
    container_name: writecare-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - writecare-network

  # Grafana for dashboards
  writecare-grafana:
    image: grafana/grafana:latest
    container_name: writecare-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - writecare-prometheus
    networks:
      - writecare-network

  # Log aggregation with ELK stack (optional)
  writecare-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: writecare-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - writecare-network
    profiles:
      - logging

  writecare-logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: writecare-logstash
    restart: unless-stopped
    volumes:
      - ./deployment/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - app-logs:/app/logs:ro
    depends_on:
      - writecare-elasticsearch
    networks:
      - writecare-network
    profiles:
      - logging

  writecare-kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: writecare-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://writecare-elasticsearch:9200
    depends_on:
      - writecare-elasticsearch
    networks:
      - writecare-network
    profiles:
      - logging

# Networks
networks:
  writecare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
  app-uploads:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# Health check configurations
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s