/**
 * @fileoverview Enhanced AI Copilot Component
 * @module EnhancedAICopilot
 * @version 2.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Advanced AI copilot with voice processing, predictive analytics,
 * clinical decision support, and multi-modal AI assistance.
 * 
 * @features
 * - Voice-to-text with clinical terminology
 * - Real-time AI assistance
 * - Predictive care recommendations
 * - Multi-modal AI analysis
 * - Clinical decision support
 */

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Alert, AlertDescription } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { useEnhancedAI } from '../../hooks/useEnhancedAI';
import { useVoiceProcessing } from '../../hooks/useVoiceProcessing';
import { 
  Mic, MicOff, Brain, Zap, Eye, MessageCircle,
  Stethoscope, AlertTriangle, CheckCircle, Lightbulb,
  Camera, FileText, Activity, TrendingUp, Star,
  Volume2, VolumeX, Play, Pause, RotateCcw,
  Sparkles, Target, Shield, Clock, Award, BarChart3
} from 'lucide-react';

interface EnhancedAICopilotProps {
  userId: string;
  organizationId: string;
  residentId?: string;
  context: 'care_notes' | 'medication' | 'assessment' | 'incident' | 'general';
}

interface AIResponse {
  id: string;
  type: 'suggestion' | 'warning' | 'recommendation' | 'insight' | 'prediction';
  content: string;
  confidence: number;
  reasoning: string;
  sources: string[];
  actionable: boolean;
  timestamp: Date;
  category: string;
}

interface VoiceSession {
  id: string;
  isRecording: boolean;
  transcript: string;
  confidence: number;
  duration: number;
  clinicalTermsDetected: string[];
  aiProcessing: boolean;
  suggestions: AIResponse[];
}

interface PredictiveInsight {
  id: string;
  type: 'risk_prediction' | 'outcome_forecast' | 'intervention_suggestion' | 'pattern_detection';
  title: string;
  description: string;
  confidence: number;
  timeframe: string;
  impact: 'low' | 'medium' | 'high' | 'critical';
  evidenceBased: boolean;
  actionItems: string[];
}

export const EnhancedAICopilot: React.FC<EnhancedAICopilotProps> = ({
  userId,
  organizationId,
  residentId,
  context
}) => {
  const [activeMode, setActiveMode] = useState<'voice' | 'text' | 'analysis' | 'predictions'>('voice');
  const [textInput, setTextInput] = useState<string>('');
  const [showAdvancedFeatures, setShowAdvancedFeatures] = useState<boolean>(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const {
    aiResponses,
    predictiveInsights,
    clinicalSuggestions,
    isProcessing,
    error,
    generateSuggestions,
    analyzeClinicalData,
    getPredictiveInsights,
    processMultiModalInput
  } = useEnhancedAI({ tenantId: organizationId, userId, role: 'staff' });

  const {
    voiceSession,
    isListening,
    isSupported,
    startRecording,
    stopRecording,
    clearTranscript,
    enableClinicalMode,
    voiceSettings
  } = useVoiceProcessing({ tenantId: organizationId, userId, role: 'staff' });

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = textareaRef.current.scrollHeight + 'px';
    }
  }, [textInput]);

  // Process voice input when recording stops
  useEffect(() => {
    if (voiceSession?.transcript && !voiceSession.isRecording && !voiceSession.aiProcessing) {
      generateSuggestions(voiceSession.transcript, 'voice', {});
    }
  }, [voiceSession?.transcript, voiceSession?.isRecording, generateSuggestions]);

  const handleTextSubmit = async () => {
    if (!textInput.trim()) return;
    
    await generateSuggestions(textInput, 'text', {});
    setTextInput('');
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return 'text-green-600 bg-green-50 border-green-200';
    if (confidence >= 75) return 'text-blue-600 bg-blue-50 border-blue-200';
    if (confidence >= 60) return 'text-yellow-600 bg-yellow-50 border-yellow-200';
    return 'text-red-600 bg-red-50 border-red-200';
  };

  const getResponseIcon = (type: string) => {
    switch (type) {
      case 'suggestion': return <Lightbulb className="w-4 h-4 text-yellow-500" />;
      case 'warning': return <AlertTriangle className="w-4 h-4 text-red-500" />;
      case 'recommendation': return <Target className="w-4 h-4 text-blue-500" />;
      case 'insight': return <Eye className="w-4 h-4 text-purple-500" />;
      case 'prediction': return <TrendingUp className="w-4 h-4 text-green-500" />;
      default: return <Brain className="w-4 h-4 text-gray-500" />;
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Brain className="w-7 h-7 text-purple-500" />
            Enhanced AI Copilot
          </h1>
          <p className="text-gray-600 mt-1">
            Advanced AI assistance with voice processing and predictive analytics
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            onClick={() => setShowAdvancedFeatures(!showAdvancedFeatures)}
          >
            <Sparkles className="w-4 h-4 mr-2" />
            {showAdvancedFeatures ? 'Simple View' : 'Advanced Features'}
          </Button>
        </div>
      </div>

      {/* Mode Selection */}
      <div className="flex gap-2 border-b border-gray-200 pb-4">
        {[
          { id: 'voice', label: 'Voice Input', icon: Mic },
          { id: 'text', label: 'Text Input', icon: MessageCircle },
          { id: 'analysis', label: 'Data Analysis', icon: BarChart3 },
          { id: 'predictions', label: 'Predictions', icon: TrendingUp }
        ].map((mode) => {
          const Icon = mode.icon;
          return (
            <Button
              key={mode.id}
              variant={activeMode === mode.id ? 'default' : 'outline'}
              onClick={() => setActiveMode(mode.id as any)}
              className="flex items-center gap-2"
            >
              <Icon className="w-4 h-4" />
              {mode.label}
            </Button>
          );
        })}
      </div>

      {/* Voice Input Mode */}
      {activeMode === 'voice' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Voice Control Panel */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Mic className="w-5 h-5 text-blue-500" />
                Voice Processing
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {!isSupported ? (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    Voice recognition is not supported in this browser.
                  </AlertDescription>
                </Alert>
              ) : (
                <>
                  {/* Recording Controls */}
                  <div className="text-center space-y-4">
                    <div className={`w-24 h-24 mx-auto rounded-full flex items-center justify-center transition-all ${
                      isListening 
                        ? 'bg-red-100 border-4 border-red-500 animate-pulse' 
                        : 'bg-blue-100 border-4 border-blue-500'
                    }`}>
                      {isListening ? (
                        <Volume2 className="w-10 h-10 text-red-500" />
                      ) : (
                        <Mic className="w-10 h-10 text-blue-500" />
                      )}
                    </div>
                    
                    <div className="flex justify-center gap-2">
                      <Button
                        size="lg"
                        onClick={isListening ? stopRecording : startRecording}
                        variant={isListening ? 'destructive' : 'default'}
                      >
                        {isListening ? (
                          <>
                            <MicOff className="w-4 h-4 mr-2" />
                            Stop Recording
                          </>
                        ) : (
                          <>
                            <Mic className="w-4 h-4 mr-2" />
                            Start Recording
                          </>
                        )}
                      </Button>
                      
                      {voiceSession?.transcript && (
                        <Button variant="outline" onClick={clearTranscript}>
                          <RotateCcw className="w-4 h-4 mr-2" />
                          Clear
                        </Button>
                      )}
                    </div>
                  </div>

                  {/* Voice Session Info */}
                  {voiceSession && (
                    <div className="space-y-3">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Session Duration</span>
                        <span className="font-medium">{Math.floor(voiceSession.duration / 1000)}s</span>
                      </div>
                      
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Recognition Confidence</span>
                        <Badge className={getConfidenceColor(voiceSession.confidence)}>
                          {voiceSession.confidence}%
                        </Badge>
                      </div>

                      {voiceSession.clinicalTermsDetected.length > 0 && (
                        <div>
                          <p className="text-sm text-gray-600 mb-2">Clinical Terms Detected:</p>
                          <div className="flex flex-wrap gap-1">
                            {voiceSession.clinicalTermsDetected.map((term: string, index: number) => (
                              <Badge key={index} variant="secondary" className="text-xs">
                                {term}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Live Transcript */}
                  {voiceSession?.transcript && (
                    <div className="border rounded-lg p-3 bg-gray-50 min-h-[100px]">
                      <h4 className="font-medium text-sm mb-2">Live Transcript:</h4>
                      <p className="text-sm text-gray-700">
                        {voiceSession.transcript}
                        {isListening && <span className="animate-pulse">|</span>}
                      </p>
                    </div>
                  )}
                </>
              )}
            </CardContent>
          </Card>

          {/* AI Suggestions */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-purple-500" />
                AI Suggestions
                {isProcessing && <LoadingSpinner size="sm" />}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {voiceSession?.suggestions && voiceSession.suggestions.length > 0 ? (
                <div className="space-y-3">
                  {voiceSession.suggestions.map((suggestion) => (
                    <div key={suggestion.id} className="border rounded-lg p-3 hover:shadow-sm transition-shadow">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {getResponseIcon(suggestion.type)}
                          <span className="font-medium text-sm">{suggestion.type}</span>
                        </div>
                        <Badge className={getConfidenceColor(suggestion.confidence)}>
                          {suggestion.confidence}%
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-700 mb-2">{suggestion.content}</p>
                      {suggestion.reasoning && (
                        <p className="text-xs text-gray-600 italic">
                          Reasoning: {suggestion.reasoning}
                        </p>
                      )}
                      {suggestion.actionable && (
                        <Button size="sm" variant="outline" className="mt-2">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Apply Suggestion
                        </Button>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Brain className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">
                    {isListening ? 'Listening for your voice input...' : 'Start speaking to get AI assistance'}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Text Input Mode */}
      {activeMode === 'text' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Text Input Panel */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageCircle className="w-5 h-5 text-blue-500" />
                AI Text Assistant
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Describe the situation or ask for assistance:
                </label>
                <textarea
                  ref={textareaRef}
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  placeholder="E.g., 'Patient seems agitated during meal times' or 'Need help with care plan for mobility issues'"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 resize-none min-h-[120px]"
                  rows={4}
                />
              </div>
              
              <div className="flex gap-2">
                <Button 
                  onClick={handleTextSubmit}
                  disabled={!textInput.trim() || isProcessing}
                  className="flex-1"
                >
                  {isProcessing ? (
                    <>
                      <LoadingSpinner size="sm" className="mr-2" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <Brain className="w-4 h-4 mr-2" />
                      Get AI Assistance
                    </>
                  )}
                </Button>
                <Button variant="outline" onClick={() => setTextInput('')}>
                  Clear
                </Button>
              </div>

              {/* Quick Prompts */}
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-700">Quick Prompts:</p>
                <div className="flex flex-wrap gap-2">
                  {[
                    'Analyze medication adherence patterns',
                    'Suggest care plan improvements',
                    'Identify risk factors',
                    'Recommend interventions',
                    'Generate incident report'
                  ].map((prompt, index) => (
                    <Button
                      key={index}
                      size="sm"
                      variant="outline"
                      onClick={() => setTextInput(prompt)}
                      className="text-xs"
                    >
                      {prompt}
                    </Button>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* AI Responses */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Zap className="w-5 h-5 text-yellow-500" />
                AI Responses & Insights
              </CardTitle>
            </CardHeader>
            <CardContent>
              {aiResponses && aiResponses.length > 0 ? (
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {aiResponses.map((response) => (
                    <div key={response.id} className="border rounded-lg p-3">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center gap-2">
                          {getResponseIcon(response.type)}
                          <span className="font-medium text-sm capitalize">{response.type}</span>
                        </div>
                        <Badge className={getConfidenceColor(response.confidence)}>
                          {response.confidence}% confident
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-700 mb-2">{response.content}</p>
                      
                      {showAdvancedFeatures && response.reasoning && (
                        <div className="mt-2 p-2 bg-gray-50 rounded text-xs">
                          <strong>AI Reasoning:</strong> {response.reasoning}
                        </div>
                      )}
                      
                      {response.sources.length > 0 && (
                        <div className="mt-2">
                          <p className="text-xs text-gray-600">
                            Sources: {response.sources.join(', ')}
                          </p>
                        </div>
                      )}
                      
                      {response.actionable && (
                        <Button size="sm" variant="outline" className="mt-2">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          Apply Recommendation
                        </Button>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Brain className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">Enter text above to get AI assistance</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Predictive Analytics Mode */}
      {activeMode === 'predictions' && (
        <div className="space-y-6">
          {/* Predictive Insights Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {predictiveInsights?.map((insight) => (
              <Card key={insight.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Target className="w-5 h-5 text-purple-500" />
                      <span className="text-lg">{insight.title}</span>
                    </div>
                    <Badge className={`${
                      insight.impact === 'high' ? 'bg-red-100 text-red-800' :
                      insight.impact === 'medium' ? 'bg-orange-100 text-orange-800' :
                      'bg-blue-100 text-blue-800'
                    }`}>
                      {insight.impact} impact
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-gray-700">{insight.description}</p>
                  
                  <div className="flex items-center justify-between text-sm">
                    <div className="flex items-center gap-2">
                      <Brain className="w-4 h-4 text-purple-500" />
                      <span className="text-gray-600">Confidence: {insight.confidence}%</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4 text-blue-500" />
                      <span className="text-gray-600">{insight.timeframe}</span>
                    </div>
                  </div>
                  
                  {insight.evidenceBased && (
                    <div className="flex items-center gap-2 text-sm">
                      <Award className="w-4 h-4 text-green-500" />
                      <span className="text-green-700">Evidence-based recommendation</span>
                    </div>
                  )}
                  
                  {insight.actionItems.length > 0 && (
                    <div>
                      <h4 className="font-medium text-sm mb-2">Recommended Actions:</h4>
                      <ul className="space-y-1">
                        {insight.actionItems.map((action: string, index: number) => (
                          <li key={index} className="text-sm text-gray-600 flex items-center gap-2">
                            <CheckCircle className="w-3 h-3 text-green-500" />
                            {action}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  <Button className="w-full" variant="outline">
                    <Target className="w-4 h-4 mr-2" />
                    Create Action Plan
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* AI Model Performance */}
          {showAdvancedFeatures && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Brain className="w-5 h-5 text-purple-500" />
                  AI Model Performance
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {[
                    { label: 'Fall Risk Prediction', accuracy: '94.2%', model: 'Random Forest' },
                    { label: 'Medication Adherence', accuracy: '91.8%', model: 'Neural Network' },
                    { label: 'Health Deterioration', accuracy: '89.5%', model: 'Gradient Boosting' },
                    { label: 'Care Plan Optimization', accuracy: '87.3%', model: 'Deep Learning' },
                  ].map((model, index) => (
                    <div key={index} className="text-center p-3 border rounded-lg">
                      <div className="text-xl font-bold text-purple-600">{model.accuracy}</div>
                      <div className="text-sm font-medium">{model.label}</div>
                      <div className="text-xs text-gray-600">{model.model}</div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}

      {/* Data Analysis Mode */}
      {activeMode === 'analysis' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Analysis Options */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-blue-500" />
                Data Analysis
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button className="w-full justify-start" variant="outline">
                <Activity className="w-4 h-4 mr-3" />
                Analyze Care Patterns
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <Stethoscope className="w-4 h-4 mr-3" />
                Clinical Outcome Trends
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <Shield className="w-4 h-4 mr-3" />
                Risk Assessment Analysis
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <Star className="w-4 h-4 mr-3" />
                Quality Improvement
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <TrendingUp className="w-4 h-4 mr-3" />
                Predictive Modeling
              </Button>
            </CardContent>
          </Card>

          {/* Analysis Results */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Analysis Results</CardTitle>
              </CardHeader>
              <CardContent>
                {clinicalSuggestions && clinicalSuggestions.length > 0 ? (
                  <div className="space-y-4">
                    {clinicalSuggestions.map((suggestion) => (
                      <div key={suggestion.id} className="border rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h3 className="font-semibold">{suggestion.title}</h3>
                          <Badge className={getConfidenceColor(suggestion.confidence)}>
                            {suggestion.confidence}% confidence
                          </Badge>
                        </div>
                        <p className="text-gray-700 mb-3">{suggestion.description}</p>
                        
                        {suggestion.evidenceBased && (
                          <div className="bg-green-50 border border-green-200 rounded p-2 mb-3">
                            <div className="flex items-center gap-2 text-sm text-green-700">
                              <Award className="w-4 h-4" />
                              Evidence-based recommendation from clinical guidelines
                            </div>
                          </div>
                        )}
                        
                        <div className="flex gap-2">
                          <Button size="sm" variant="outline">
                            <Eye className="w-3 h-3 mr-1" />
                            View Details
                          </Button>
                          <Button size="sm">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Implement
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <BarChart3 className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600">Select an analysis option to begin</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      )}

      {/* Advanced Features Panel */}
      {showAdvancedFeatures && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-purple-500" />
              Advanced AI Features
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                <Brain className="w-8 h-8 text-purple-500 mx-auto mb-2" />
                <h4 className="font-semibold">Multi-Modal AI</h4>
                <p className="text-sm text-gray-600">Text, voice, image analysis</p>
              </div>
              <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                <Target className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                <h4 className="font-semibold">Predictive Models</h4>
                <p className="text-sm text-gray-600">60+ specialized ML models</p>
              </div>
              <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                <Stethoscope className="w-8 h-8 text-green-500 mx-auto mb-2" />
                <h4 className="font-semibold">Clinical Decision</h4>
                <p className="text-sm text-gray-600">Evidence-based recommendations</p>
              </div>
              <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                <Activity className="w-8 h-8 text-red-500 mx-auto mb-2" />
                <h4 className="font-semibold">Pattern Recognition</h4>
                <p className="text-sm text-gray-600">Behavioral analysis</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* AI Performance Metrics */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Award className="w-5 h-5 text-gold-500" />
            AI Performance Today
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">247</div>
              <div className="text-sm text-gray-600">AI Suggestions</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">96.8%</div>
              <div className="text-sm text-gray-600">Accuracy Rate</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">89</div>
              <div className="text-sm text-gray-600">Voice Sessions</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">156</div>
              <div className="text-sm text-gray-600">Predictions Made</div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};