import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';
import { 
  Activity, 
  Bot, 
  TrendingUp, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Settings,
  BarChart3,
  Users,
  Zap,
  Shield,
  Brain
} from 'lucide-react';

interface AgentMetrics {
  id: string;
  name: string;
  status: 'idle' | 'busy' | 'error' | 'disabled';
  lastActivity: Date;
  processedCount: number;
  errorCount: number;
  averageProcessingTime: number;
  successRate: number;
  uptime: number;
  memoryUsage: number;
  cpuUsage: number;
  capabilities: string[];
  healthScore: number;
}

interface AgentPerformance {
  agentId: string;
  timestamp: Date;
  responseTime: number;
  success: boolean;
  errorType?: string;
  inputSize: number;
  outputSize: number;
  confidence: number;
}

interface AgentConfiguration {
  id: string;
  name: string;
  enabled: boolean;
  priority: number;
  timeout: number;
  retryAttempts: number;
  dependencies: string[];
  capabilities: string[];
  config: Record<string, any>;
  lastModified: Date;
  modifiedBy: string;
}

interface SystemHealth {
  totalAgents: number;
  activeAgents: number;
  errorAgents: number;
  disabledAgents: number;
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  averageResponseTime: number;
  systemUptime: number;
  memoryUsage: number;
  cpuUsage: number;
  queueSize: number;
  lastHealthCheck: Date;
}

export const AgentConsoleDashboard: React.FC = () => {
  const [agentMetrics, setAgentMetrics] = useState<AgentMetrics[]>([]);
  const [agentPerformance, setAgentPerformance] = useState<AgentPerformance[]>([]);
  const [agentConfigurations, setAgentConfigurations] = useState<AgentConfiguration[]>([]);
  const [systemHealth, setSystemHealth] = useState<SystemHealth | null>(null);
  const [selectedAgent, setSelectedAgent] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [autoRefresh, setAutoRefresh] = useState(true);

  // Fetch agent metrics
  const fetchAgentMetrics = useCallback(async () => {
    try {
      const response = await fetch('/api/ai-agents/metrics');
      if (!response.ok) throw new Error('Failed to fetch agent metrics');
      const data = await response.json();
      setAgentMetrics(data);
    } catch (err) {
      console.error('Error fetching agent metrics:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
    }
  }, []);

  // Fetch agent performance data
  const fetchAgentPerformance = useCallback(async () => {
    try {
      const response = await fetch('/api/ai-agents/performance');
      if (!response.ok) throw new Error('Failed to fetch agent performance');
      const data = await response.json();
      setAgentPerformance(data);
    } catch (err) {
      console.error('Error fetching agent performance:', err);
    }
  }, []);

  // Fetch agent configurations
  const fetchAgentConfigurations = useCallback(async () => {
    try {
      const response = await fetch('/api/ai-agents/configurations');
      if (!response.ok) throw new Error('Failed to fetch agent configurations');
      const data = await response.json();
      setAgentConfigurations(data);
    } catch (err) {
      console.error('Error fetching agent configurations:', err);
    }
  }, []);

  // Fetch system health
  const fetchSystemHealth = useCallback(async () => {
    try {
      const response = await fetch('/api/ai-agents/health');
      if (!response.ok) throw new Error('Failed to fetch system health');
      const data = await response.json();
      setSystemHealth(data);
    } catch (err) {
      console.error('Error fetching system health:', err);
    }
  }, []);

  // Load all data
  const loadData = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    
    try {
      await Promise.all([
        fetchAgentMetrics(),
        fetchAgentPerformance(),
        fetchAgentConfigurations(),
        fetchSystemHealth()
      ]);
    } catch (err) {
      console.error('Error loading data:', err);
    } finally {
      setIsLoading(false);
    }
  }, [fetchAgentMetrics, fetchAgentPerformance, fetchAgentConfigurations, fetchSystemHealth]);

  // Auto-refresh effect
  useEffect(() => {
    loadData();
    
    if (autoRefresh) {
      const interval = setInterval(loadData, 5000); // Refresh every 5 seconds
      return () => clearInterval(interval);
    }
  }, [loadData, autoRefresh]);

  // Toggle agent enabled/disabled
  const toggleAgent = useCallback(async (agentId: string, enabled: boolean) => {
    try {
      const response = await fetch(`/api/ai-agents/${agentId}/toggle`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ enabled })
      });
      
      if (!response.ok) throw new Error('Failed to toggle agent');
      
      await loadData(); // Refresh data
    } catch (err) {
      console.error('Error toggling agent:', err);
      setError(err instanceof Error ? err.message : 'Unknown error');
    }
  }, [loadData]);

  // Get status color
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'idle': return 'bg-green-100 text-green-800';
      case 'busy': return 'bg-blue-100 text-blue-800';
      case 'error': return 'bg-red-100 text-red-800';
      case 'disabled': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Get health score color
  const getHealthScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  // Calculate performance trends
  const calculatePerformanceTrend = (agentId: string) => {
    const agentPerf = agentPerformance.filter(p => p.agentId === agentId);
    if (agentPerf.length < 2) return 0;
    
    const recent = agentPerf.slice(-10);
    const older = agentPerf.slice(-20, -10);
    
    const recentAvg = recent.reduce((sum, p) => sum + p.responseTime, 0) / recent.length;
    const olderAvg = older.reduce((sum, p) => sum + p.responseTime, 0) / older.length;
    
    return ((recentAvg - olderAvg) / olderAvg) * 100;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex items-center">
          <AlertTriangle className="h-5 w-5 text-red-600 mr-2" />
          <span className="text-red-800">Error: {error}</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">AI Agent Console</h1>
          <p className="text-gray-600 mt-1">Monitor and manage your AI agents in real-time</p>
        </div>
        <div className="flex items-center space-x-4">
          <Button
            variant={autoRefresh ? "default" : "outline"}
            onClick={() => setAutoRefresh(!autoRefresh)}
            className="flex items-center"
          >
            <Activity className="h-4 w-4 mr-2" />
            {autoRefresh ? 'Auto-refresh ON' : 'Auto-refresh OFF'}
          </Button>
          <Button onClick={loadData} variant="outline">
            <Zap className="h-4 w-4 mr-2" />
            Refresh Now
          </Button>
        </div>
      </div>

      {/* System Health Overview */}
      {systemHealth && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Bot className="h-8 w-8 text-blue-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Total Agents</p>
                  <p className="text-2xl font-bold text-gray-900">{systemHealth.totalAgents}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <CheckCircle className="h-8 w-8 text-green-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Active Agents</p>
                  <p className="text-2xl font-bold text-gray-900">{systemHealth.activeAgents}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <TrendingUp className="h-8 w-8 text-purple-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Success Rate</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {systemHealth.totalRequests > 0 
                      ? Math.round((systemHealth.successfulRequests / systemHealth.totalRequests) * 100)
                      : 0}%
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center">
                <Clock className="h-8 w-8 text-orange-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Avg Response</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {Math.round(systemHealth.averageResponseTime)}ms
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Content Tabs */}
      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="agents">Agents</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
          <TabsTrigger value="configuration">Configuration</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Agent Status Grid */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Bot className="h-5 w-5 mr-2" />
                  Agent Status
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {agentMetrics.map((agent) => (
                    <div key={agent.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`w-3 h-3 rounded-full ${
                          agent.status === 'idle' ? 'bg-green-500' :
                          agent.status === 'busy' ? 'bg-blue-500' :
                          agent.status === 'error' ? 'bg-red-500' : 'bg-gray-500'
                        }`} />
                        <div>
                          <p className="font-medium">{agent.name}</p>
                          <p className="text-sm text-gray-600">
                            {agent.processedCount} processed • {agent.successRate.toFixed(1)}% success
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge className={getStatusColor(agent.status)}>
                          {agent.status}
                        </Badge>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => toggleAgent(agent.id, agent.status !== 'disabled')}
                        >
                          {agent.status === 'disabled' ? 'Enable' : 'Disable'}
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* System Performance */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <BarChart3 className="h-5 w-5 mr-2" />
                  System Performance
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">CPU Usage</span>
                    <span className="text-sm text-gray-600">{systemHealth?.cpuUsage.toFixed(1)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-blue-600 h-2 rounded-full" 
                      style={{ width: `${systemHealth?.cpuUsage || 0}%` }}
                    />
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">Memory Usage</span>
                    <span className="text-sm text-gray-600">{systemHealth?.memoryUsage.toFixed(1)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-green-600 h-2 rounded-full" 
                      style={{ width: `${systemHealth?.memoryUsage || 0}%` }}
                    />
                  </div>
                  
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">Queue Size</span>
                    <span className="text-sm text-gray-600">{systemHealth?.queueSize || 0}</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-orange-600 h-2 rounded-full" 
                      style={{ width: `${Math.min((systemHealth?.queueSize || 0) * 10, 100)}%` }}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Agents Tab */}
        <TabsContent value="agents" className="space-y-4">
          <div className="grid grid-cols-1 gap-4">
            {agentMetrics.map((agent) => (
              <Card key={agent.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center">
                      <Bot className="h-5 w-5 mr-2" />
                      {agent.name}
                    </CardTitle>
                    <div className="flex items-center space-x-2">
                      <Badge className={getStatusColor(agent.status)}>
                        {agent.status}
                      </Badge>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => toggleAgent(agent.id, agent.status !== 'disabled')}
                      >
                        {agent.status === 'disabled' ? 'Enable' : 'Disable'}
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Health Score</p>
                      <p className={`text-2xl font-bold ${getHealthScoreColor(agent.healthScore)}`}>
                        {agent.healthScore.toFixed(1)}%
                      </p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Processed</p>
                      <p className="text-2xl font-bold text-gray-900">{agent.processedCount}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Success Rate</p>
                      <p className="text-2xl font-bold text-gray-900">{agent.successRate.toFixed(1)}%</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Avg Response</p>
                      <p className="text-2xl font-bold text-gray-900">{agent.averageProcessingTime.toFixed(0)}ms</p>
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <p className="text-sm font-medium text-gray-600 mb-2">Capabilities</p>
                    <div className="flex flex-wrap gap-1">
                      {agent.capabilities.map((capability) => (
                        <Badge key={capability} variant="secondary" className="text-xs">
                          {capability}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <p className="text-sm font-medium text-gray-600 mb-2">Performance Trend</p>
                    <div className="flex items-center">
                      <TrendingUp className={`h-4 w-4 mr-1 ${
                        calculatePerformanceTrend(agent.id) < 0 ? 'text-green-600' : 'text-red-600'
                      }`} />
                      <span className={`text-sm ${
                        calculatePerformanceTrend(agent.id) < 0 ? 'text-green-600' : 'text-red-600'
                      }`}>
                        {calculatePerformanceTrend(agent.id) > 0 ? '+' : ''}
                        {calculatePerformanceTrend(agent.id).toFixed(1)}%
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Performance Tab */}
        <TabsContent value="performance" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <BarChart3 className="h-5 w-5 mr-2" />
                Performance Analytics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-gray-600">Performance charts and analytics will be displayed here.</p>
                {/* Performance charts would be implemented here */}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Configuration Tab */}
        <TabsContent value="configuration" className="space-y-4">
          <div className="grid grid-cols-1 gap-4">
            {agentConfigurations.map((config) => (
              <Card key={config.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center">
                      <Settings className="h-5 w-5 mr-2" />
                      {config.name}
                    </CardTitle>
                    <Badge variant={config.enabled ? "default" : "secondary"}>
                      {config.enabled ? 'Enabled' : 'Disabled'}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                      <p className="text-sm font-medium text-gray-600">Priority</p>
                      <p className="text-lg font-bold text-gray-900">{config.priority}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Timeout</p>
                      <p className="text-lg font-bold text-gray-900">{config.timeout}ms</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Retry Attempts</p>
                      <p className="text-lg font-bold text-gray-900">{config.retryAttempts}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Dependencies</p>
                      <p className="text-lg font-bold text-gray-900">{config.dependencies.length}</p>
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <p className="text-sm font-medium text-gray-600 mb-2">Configuration</p>
                    <pre className="bg-gray-100 p-3 rounded text-xs overflow-x-auto">
                      {JSON.stringify(config.config, null, 2)}
                    </pre>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default AgentConsoleDashboard;