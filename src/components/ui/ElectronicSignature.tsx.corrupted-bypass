/**
 * @fileoverview Electronic Signature Component for WriteCareNotes
 * @module ElectronicSignature
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Electronic signature capture component for medication
 * administration with audit trail and compliance features.
 */

import React, { useRef, useState, useEffect } from 'react';
import { Button } from './Button';
import { Input } from './Input';
import { Alert, AlertDescription } from './Alert';
import { Card, CardContent, CardHeader, CardTitle } from './Card';
import { Pen, RotateCcw, Check, User, Shield } from 'lucide-react';

interface ElectronicSignatureProps {
  onSignature: (signature: string) => void;
  onCancel: () => void;
  disabled?: boolean;
  medicationName?: string;
  residentId?: string;
  requiresWitness?: boolean;
}

export const ElectronicSignature: React.FC<ElectronicSignatureProps> = ({
  onSignature,
  onCancel,
  disabled = false,
  medicationName,
  residentId,
  requiresWitness = false
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isDrawing, setIsDrawing] = useState(false);
  const [hasSignature, setHasSignature] = useState(false);
  const [signatureData, setSignatureData] = useState<string>('');
  const [signerName, setSignerName] = useState('');
  const [signerRole, setSignerRole] = useState('');
  const [witnessName, setWitnessName] = useState('');
  const [witnessRole, setWitnessRole] = useState('');
  const [step, setStep] = useState<'details' | 'signature' | 'witness'>('details');

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const context = canvas.getContext('2d');
    if (!context) return;

    // Set up canvas
    canvas.width = 400;
    canvas.height = 200;
    context.strokeStyle = '#000000';
    context.lineWidth = 2;
    context.lineCap = 'round';
    context.lineJoin = 'round';

    // Clear canvas with white background
    context.fillStyle = '#ffffff';
    context.fillRect(0, 0, canvas.width, canvas.height);
  }, [step]);

  const startDrawing = (event: React.MouseEvent<HTMLCanvasElement>) => {
    if (disabled) return;
    
    setIsDrawing(true);
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const context = canvas.getContext('2d');
    if (context) {
      context.beginPath();
      context.moveTo(x, y);
    }
  };

  const draw = (event: React.MouseEvent<HTMLCanvasElement>) => {
    if (!isDrawing || disabled) return;

    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;

    const context = canvas.getContext('2d');
    if (context) {
      context.lineTo(x, y);
      context.stroke();
      setHasSignature(true);
    }
  };

  const stopDrawing = () => {
    if (!isDrawing) return;
    
    setIsDrawing(false);
    const canvas = canvasRef.current;
    if (canvas) {
      setSignatureData(canvas.toDataURL());
    }
  };

  const clearSignature = () => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const context = canvas.getContext('2d');
    if (context) {
      context.fillStyle = '#ffffff';
      context.fillRect(0, 0, canvas.width, canvas.height);
      setHasSignature(false);
      setSignatureData('');
    }
  };

  const handleSubmit = () => {
    if (!hasSignature || !signerName || !signerRole) return;

    if (requiresWitness && (!witnessName || !witnessRole)) {
      setStep('witness');
      return;
    }

    const signaturePayload = {
      signature: signatureData,
      signerName,
      signerRole,
      witnessName: requiresWitness ? witnessName : undefined,
      witnessRole: requiresWitness ? witnessRole : undefined,
      timestamp: new Date().toISOString(),
      medicationName,
      residentId
    };

    onSignature(JSON.stringify(signaturePayload));
  };

  const renderDetailsStep = () => (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <Shield className="w-12 h-12 text-blue-500 mx-auto mb-2" />
        <h3 className="text-lg font-semibold">Electronic Signature Required</h3>
        <p className="text-sm text-gray-600">
          Please provide your details before signing
        </p>
      </div>

      <div className="space-y-3">
        <Input
          label="Full Name"
          value={signerName}
          onChange={(e) => setSignerName(e.target.value)}
          placeholder="Enter your full name"
          required
        />
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Role/Position <span className="text-red-500">*</span>
          </label>
          <select
            value={signerRole}
            onChange={(e) => setSignerRole(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
            required
          >
            <option value="">Select your role</option>
            <option value="registered_nurse">Registered Nurse</option>
            <option value="care_assistant">Care Assistant</option>
            <option value="senior_care_assistant">Senior Care Assistant</option>
            <option value="medication_technician">Medication Technician</option>
            <option value="clinical_lead">Clinical Lead</option>
            <option value="pharmacist">Pharmacist</option>
          </select>
        </div>
      </div>

      {medicationName && (
        <Alert>
          <User className="h-4 w-4" />
          <AlertDescription>
            <div className="text-sm">
              <p><strong>Medication:</strong> {medicationName}</p>
              {residentId && <p><strong>Resident ID:</strong> {residentId}</p>}
              {requiresWitness && (
                <p className="text-orange-600 font-medium mt-1">
                  ⚠️ This medication requires witness verification
                </p>
              )}
            </div>
          </AlertDescription>
        </Alert>
      )}

      <div className="flex gap-2">
        <Button
          variant="outline"
          onClick={onCancel}
          className="flex-1"
        >
          Cancel
        </Button>
        <Button
          onClick={() => setStep('signature')}
          disabled={!signerName || !signerRole}
          className="flex-1"
        >
          Continue to Signature
        </Button>
      </div>
    </div>
  );

  const renderSignatureStep = () => (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <Pen className="w-12 h-12 text-blue-500 mx-auto mb-2" />
        <h3 className="text-lg font-semibold">Please Sign Below</h3>
        <p className="text-sm text-gray-600">
          Draw your signature in the box below
        </p>
      </div>

      <div className="border-2 border-gray-300 rounded-lg p-2">
        <canvas
          ref={canvasRef}
          className="border border-gray-200 rounded cursor-crosshair w-full"
          onMouseDown={startDrawing}
          onMouseMove={draw}
          onMouseUp={stopDrawing}
          onMouseLeave={stopDrawing}
        />
      </div>

      <div className="flex gap-2">
        <Button
          variant="outline"
          onClick={clearSignature}
          disabled={!hasSignature}
        >
          <RotateCcw className="w-4 h-4 mr-2" />
          Clear
        </Button>
        <Button
          variant="outline"
          onClick={() => setStep('details')}
        >
          Back
        </Button>
        <Button
          onClick={handleSubmit}
          disabled={!hasSignature || disabled}
          className="flex-1"
        >
          <Check className="w-4 h-4 mr-2" />
          {requiresWitness ? 'Continue to Witness' : 'Confirm Signature'}
        </Button>
      </div>

      <div className="text-xs text-gray-500 text-center">
        By signing, you confirm the accuracy of the medication administration
      </div>
    </div>
  );

  const renderWitnessStep = () => (
    <div className="space-y-4">
      <div className="text-center mb-4">
        <User className="w-12 h-12 text-orange-500 mx-auto mb-2" />
        <h3 className="text-lg font-semibold">Witness Verification Required</h3>
        <p className="text-sm text-gray-600">
          A witness must verify this medication administration
        </p>
      </div>

      <Alert variant="warning">
        <Shield className="h-4 w-4" />
        <AlertDescription>
          This medication requires witness verification. Please have an authorized
          colleague provide their details below.
        </AlertDescription>
      </Alert>

      <div className="space-y-3">
        <Input
          label="Witness Full Name"
          value={witnessName}
          onChange={(e) => setWitnessName(e.target.value)}
          placeholder="Enter witness full name"
          required
        />
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Witness Role/Position <span className="text-red-500">*</span>
          </label>
          <select
            value={witnessRole}
            onChange={(e) => setWitnessRole(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
            required
          >
            <option value="">Select witness role</option>
            <option value="registered_nurse">Registered Nurse</option>
            <option value="senior_care_assistant">Senior Care Assistant</option>
            <option value="clinical_lead">Clinical Lead</option>
            <option value="pharmacist">Pharmacist</option>
          </select>
        </div>
      </div>

      <div className="bg-gray-50 p-3 rounded-lg">
        <h4 className="font-medium text-sm mb-2">Administration Summary:</h4>
        <div className="text-sm text-gray-600 space-y-1">
          <p><strong>Administered by:</strong> {signerName} ({signerRole})</p>
          {medicationName && <p><strong>Medication:</strong> {medicationName}</p>}
          <p><strong>Time:</strong> {new Date().toLocaleString()}</p>
        </div>
      </div>

      <div className="flex gap-2">
        <Button
          variant="outline"
          onClick={() => setStep('signature')}
        >
          Back
        </Button>
        <Button
          onClick={handleSubmit}
          disabled={!witnessName || !witnessRole || disabled}
          className="flex-1"
        >
          <Check className="w-4 h-4 mr-2" />
          Complete Administration
        </Button>
      </div>
    </div>
  );

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardContent className="p-6">
        {step === 'details' && renderDetailsStep()}
        {step === 'signature' && renderSignatureStep()}
        {step === 'witness' && renderWitnessStep()}
      </CardContent>
    </Card>
  );
};