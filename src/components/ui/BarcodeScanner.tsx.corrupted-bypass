/**
 * @fileoverview Barcode Scanner Component for WriteCareNotes
 * @module BarcodeScanner
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Camera-based barcode scanner component for medication
 * and resident identification with accessibility features.
 */

import React, { useEffect, useRef, useState } from 'react';
import { Button } from './Button';
import { Alert, AlertDescription } from './Alert';
import { LoadingSpinner } from './LoadingSpinner';
import { Camera, X } from 'lucide-react';

interface BarcodeScannerProps {
  onScan: (barcode: string) => void;
  onError: (error: string) => void;
  onClose?: () => void;
  className?: string;
}

export const BarcodeScanner: React.FC<BarcodeScannerProps> = ({
  onScan,
  onError,
  onClose,
  className
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    startCamera();
    return () => {
      stopCamera();
    };
  }, []);

  const startCamera = async () => {
    try {
      setError(null);
      
      // Request camera permission
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: 'environment', // Use back camera if available
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      });

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.play();
        setHasPermission(true);
        setIsScanning(true);
        
        // Start scanning when video is ready
        videoRef.current.addEventListener('loadedmetadata', startScanning);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Camera access denied';
      setError(errorMessage);
      setHasPermission(false);
      onError(errorMessage);
    }
  };

  const stopCamera = () => {
    if (videoRef.current?.srcObject) {
      const stream = videoRef.current.srcObject as MediaStream;
      stream.getTracks().forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
    setIsScanning(false);
  };

  const startScanning = () => {
    if (!videoRef.current || !canvasRef.current) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');

    if (!context) return;

    const scanFrame = () => {
      if (!isScanning || !video.videoWidth || !video.videoHeight) {
        if (isScanning) {
          requestAnimationFrame(scanFrame);
        }
        return;
      }

      // Set canvas dimensions to match video
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      // Draw current video frame to canvas
      context.drawImage(video, 0, 0, canvas.width, canvas.height);

      // Get image data for barcode detection
      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
      
      // Simple barcode detection simulation
      // In a real implementation, you would use a library like QuaggaJS or ZXing
      const detectedBarcode = simulateBarcodeDetection(imageData);
      
      if (detectedBarcode) {
        setIsScanning(false);
        onScan(detectedBarcode);
        return;
      }

      // Continue scanning
      if (isScanning) {
        requestAnimationFrame(scanFrame);
      }
    };

    scanFrame();
  };

  // Simulate barcode detection - in real implementation, use proper barcode library
  const simulateBarcodeDetection = (imageData: ImageData): string | null => {
    // This is a placeholder - real implementation would use:
    // - QuaggaJS for JavaScript barcode detection
    // - ZXing for more comprehensive barcode support
    // - Or integrate with native camera APIs
    
    // For demo purposes, we'll simulate finding a barcode after a delay
    const randomDetection = Math.random();
    if (randomDetection < 0.1) { // 10% chance per frame
      return `MED${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}`;
    }
    return null;
  };

  const handleManualEntry = () => {
    const barcode = prompt('Enter barcode manually:');
    if (barcode) {
      onScan(barcode);
    }
  };

  if (hasPermission === false) {
    return (
      <div className={className}>
        <Alert variant="destructive">
          <Camera className="h-4 w-4" />
          <AlertDescription>
            <div className="space-y-2">
              <p>Camera access is required to scan barcodes.</p>
              <p className="text-sm">
                Please enable camera permissions in your browser settings and try again.
              </p>
            </div>
          </AlertDescription>
        </Alert>
        <div className="flex gap-2 mt-4">
          <Button onClick={startCamera}>
            <Camera className="w-4 h-4 mr-2" />
            Try Again
          </Button>
          <Button variant="outline" onClick={handleManualEntry}>
            Manual Entry
          </Button>
          {onClose && (
            <Button variant="outline" onClick={onClose}>
              <X className="w-4 h-4 mr-2" />
              Close
            </Button>
          )}
        </div>
      </div>
    );
  }

  if (hasPermission === null) {
    return (
      <div className={`flex justify-center items-center h-64 ${className}`}>
        <LoadingSpinner size="lg" />
        <span className="ml-2">Requesting camera access...</span>
      </div>
    );
  }

  return (
    <div className={className}>
      <div className="relative">
        <video
          ref={videoRef}
          className="w-full h-64 bg-black rounded-lg"
          playsInline
          muted
        />
        <canvas
          ref={canvasRef}
          className="hidden"
        />
        
        {/* Scanning overlay */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="border-2 border-red-500 border-dashed w-48 h-24 rounded-lg">
            <div className="w-full h-full flex items-center justify-center">
              <span className="text-white bg-black bg-opacity-50 px-2 py-1 rounded text-sm">
                Position barcode here
              </span>
            </div>
          </div>
        </div>

        {/* Scanning indicator */}
        {isScanning && (
          <div className="absolute top-2 left-2">
            <div className="flex items-center bg-red-600 text-white px-2 py-1 rounded text-sm">
              <div className="w-2 h-2 bg-white rounded-full animate-pulse mr-2"></div>
              Scanning...
            </div>
          </div>
        )}
      </div>

      {error && (
        <Alert variant="destructive" className="mt-4">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      <div className="flex gap-2 mt-4">
        <Button
          variant="outline"
          onClick={handleManualEntry}
          className="flex-1"
        >
          Manual Entry
        </Button>
        {onClose && (
          <Button variant="outline" onClick={onClose}>
            <X className="w-4 h-4 mr-2" />
            Close
          </Button>
        )}
      </div>

      <div className="mt-2 text-sm text-gray-600">
        <p>• Position the barcode within the red frame</p>
        <p>• Ensure good lighting for best results</p>
        <p>• Hold steady until the barcode is detected</p>
      </div>
    </div>
  );
};