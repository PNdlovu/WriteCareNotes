/**
 * @fileoverview Medication Management Dashboard Component
 * @module MedicationDashboard
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Main dashboard for medication management providing overview
 * of due medications, alerts, and quick access to administration functions.
 * 
 * @compliance
 * - CQC Regulation 12 - Safe care and treatment
 * - NICE Guidelines on Medication Management
 * - Professional Standards (NMC, GMC, GPhC)
 * - GDPR and Data Protection Act 2018
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Alert, AlertDescription } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { useToast } from '../hooks/useToast';
import { useMedicationDashboard } from '../hooks/useMedicationDashboard';
import { formatDateTime, formatTime } from '../../utils/dateUtils';
import { 
  Clock, 
  AlertTriangle, 
  CheckCircle, 
  Pill, 
  Users, 
  TrendingUp,
  Shield,
  Calendar,
  Activity,
  FileText
} from 'lucide-react';

interface MedicationDashboardProps {
  organizationId: string;
  userId: string;
  userRole: string;
}

interface DashboardStats {
  totalDueMedications: number;
  overdueMedications: number;
  completedToday: number;
  activeAlerts: number;
  residentsWithMedications: number;
  adherenceRate: number;
}

interface QuickAlert {
  id: string;
  type: 'overdue' | 'interaction' | 'allergy' | 'stock' | 'expiry';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  message: string;
  residentName?: string;
  medicationName?: string;
  actionRequired: boolean;
  createdAt: Date;
}

interface RecentActivity {
  id: string;
  type: 'administration' | 'refusal' | 'incident' | 'review';
  description: string;
  residentName: string;
  medicationName?: string;
  performedBy: string;
  timestamp: Date;
}

export const MedicationDashboard: React.FC<MedicationDashboardProps> = ({
  organizationId,
  userId,
  userRole
}) => {
  const [selectedTimeframe, setSelectedTimeframe] = useState<'today' | 'week' | 'month'>('today');
  const [refreshInterval, setRefreshInterval] = useState<number>(30000); // 30 seconds

  const { toast } = useToast();
  const {
    dashboardStats,
    quickAlerts,
    recentActivity,
    dueMedications,
    loading,
    error,
    refreshDashboard
  } = useMedicationDashboard(organizationId, selectedTimeframe);

  // Auto-refresh dashboard
  useEffect(() => {
    const interval = setInterval(() => {
      refreshDashboard();
    }, refreshInterval);

    return () => clearInterval(interval);
  }, [refreshDashboard, refreshInterval]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'administration': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'refusal': return <AlertTriangle className="w-4 h-4 text-orange-500" />;
      case 'incident': return <AlertTriangle className="w-4 h-4 text-red-500" />;
      case 'review': return <FileText className="w-4 h-4 text-blue-500" />;
      default: return <Activity className="w-4 h-4 text-gray-500" />;
    }
  };

  if (loading && !dashboardStats) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="lg" />
        <span className="ml-2">Loading dashboard...</span>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          Failed to load dashboard data: {error}
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Medication Management Dashboard</h1>
          <p className="text-gray-600 mt-1">
            Overview of medication administration and safety alerts
          </p>
        </div>
        <div className="flex gap-2">
          <select
            value={selectedTimeframe}
            onChange={(e) => setSelectedTimeframe(e.target.value as any)}
            className="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          >
            <option value="today">Today</option>
            <option value="week">This Week</option>
            <option value="month">This Month</option>
          </select>
          <Button
            variant="outline"
            onClick={refreshDashboard}
            disabled={loading}
          >
            {loading ? <LoadingSpinner size="sm" /> : 'Refresh'}
          </Button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Due Now</p>
                <p className="text-2xl font-bold text-blue-600">
                  {dashboardStats?.totalDueMedications || 0}
                </p>
              </div>
              <Clock className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Overdue</p>
                <p className="text-2xl font-bold text-red-600">
                  {dashboardStats?.overdueMedications || 0}
                </p>
              </div>
              <AlertTriangle className="w-8 h-8 text-red-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Completed</p>
                <p className="text-2xl font-bold text-green-600">
                  {dashboardStats?.completedToday || 0}
                </p>
              </div>
              <CheckCircle className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Active Alerts</p>
                <p className="text-2xl font-bold text-orange-600">
                  {dashboardStats?.activeAlerts || 0}
                </p>
              </div>
              <Shield className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Residents</p>
                <p className="text-2xl font-bold text-purple-600">
                  {dashboardStats?.residentsWithMedications || 0}
                </p>
              </div>
              <Users className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Adherence</p>
                <p className="text-2xl font-bold text-teal-600">
                  {dashboardStats?.adherenceRate || 0}%
                </p>
              </div>
              <TrendingUp className="w-8 h-8 text-teal-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Critical Alerts */}
        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="w-5 h-5 text-orange-500" />
                Critical Alerts & Notifications
              </CardTitle>
            </CardHeader>
            <CardContent>
              {quickAlerts && quickAlerts.length > 0 ? (
                <div className="space-y-3">
                  {quickAlerts.slice(0, 5).map((alert) => (
                    <div
                      key={alert.id}
                      className={`p-3 rounded-lg border ${getSeverityColor(alert.severity)}`}
                    >
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge variant={alert.severity === 'critical' ? 'destructive' : 'warning'}>
                              {alert.severity.toUpperCase()}
                            </Badge>
                            <span className="text-sm font-medium">{alert.type.toUpperCase()}</span>
                          </div>
                          <h4 className="font-semibold">{alert.title}</h4>
                          <p className="text-sm text-gray-600 mt-1">{alert.message}</p>
                          {alert.residentName && (
                            <p className="text-xs text-gray-500 mt-1">
                              Resident: {alert.residentName}
                              {alert.medicationName && ` • Medication: ${alert.medicationName}`}
                            </p>
                          )}
                        </div>
                        <div className="text-xs text-gray-500">
                          {formatTime(alert.createdAt)}
                        </div>
                      </div>
                      {alert.actionRequired && (
                        <div className="mt-2">
                          <Button size="sm" variant="outline">
                            Take Action
                          </Button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <Shield className="w-12 h-12 text-green-500 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">All Clear</h3>
                  <p className="text-gray-600">No critical alerts at this time.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <div>
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button className="w-full justify-start" variant="outline">
                <Pill className="w-4 h-4 mr-2" />
                Medication Administration
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <FileText className="w-4 h-4 mr-2" />
                Prescription Management
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <Shield className="w-4 h-4 mr-2" />
                Safety Dashboard
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <Activity className="w-4 h-4 mr-2" />
                Inventory Management
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <AlertTriangle className="w-4 h-4 mr-2" />
                Incident Reporting
              </Button>
              <Button className="w-full justify-start" variant="outline">
                <TrendingUp className="w-4 h-4 mr-2" />
                Reports & Analytics
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Recent Activity and Due Medications */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Activity className="w-5 h-5" />
              Recent Activity
            </CardTitle>
          </CardHeader>
          <CardContent>
            {recentActivity && recentActivity.length > 0 ? (
              <div className="space-y-3">
                {recentActivity.slice(0, 8).map((activity) => (
                  <div key={activity.id} className="flex items-start gap-3 p-2 hover:bg-gray-50 rounded-lg">
                    {getActivityIcon(activity.type)}
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.description}
                      </p>
                      <p className="text-xs text-gray-500">
                        {activity.residentName}
                        {activity.medicationName && ` • ${activity.medicationName}`}
                      </p>
                      <p className="text-xs text-gray-400">
                        {activity.performedBy} • {formatDateTime(activity.timestamp)}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Activity className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">No recent activity to display.</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Upcoming Due Medications */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Clock className="w-5 h-5" />
              Upcoming Due Medications
            </CardTitle>
          </CardHeader>
          <CardContent>
            {dueMedications && dueMedications.length > 0 ? (
              <div className="space-y-3">
                {dueMedications.slice(0, 8).map((medication) => (
                  <div key={medication.id} className="flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg">
                    <div className="flex-1">
                      <p className="text-sm font-medium">{medication.medicationName}</p>
                      <p className="text-xs text-gray-600">
                        {medication.residentName} • {medication.dosage}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium">
                        {formatTime(medication.scheduledTime)}
                      </p>
                      {medication.isOverdue && (
                        <Badge variant="destructive" className="text-xs">
                          Overdue
                        </Badge>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <p className="text-gray-600">No medications due in the next few hours.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};