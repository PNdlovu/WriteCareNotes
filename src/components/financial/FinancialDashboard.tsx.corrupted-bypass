import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Plus, 
  Search, 
  Filter, 
  Download, 
  Eye, 
  Edit, 
  Trash2, 
  CheckCircle, 
  XCircle, 
  Clock,
  AlertTriangle,
  DollarSign,
  TrendingUp,
  TrendingDown,
  Calculator,
  FileText,
  CreditCard,
  PieChart
} from 'lucide-react';

interface JournalEntry {
  id: string;
  entryNumber: string;
  description: string;
  entryType: string;
  status: string;
  totalAmount: number;
  debitAccount: string;
  creditAccount: string;
  transactionDate: string;
  reference: string;
  createdAt: string;
  updatedAt: string;
}

interface CashTransaction {
  id: string;
  transactionNumber: string;
  accountId: string;
  accountName: string;
  transactionType: string;
  amount: number;
  description: string;
  status: string;
  transactionDate: string;
  referenceNumber: string;
  createdAt: string;
  updatedAt: string;
}

interface Budget {
  id: string;
  budgetName: string;
  budgetType: string;
  budgetYear: number;
  totalBudgetedAmount: number;
  totalActualAmount: number;
  variance: number;
  status: string;
  startDate: string;
  endDate: string;
  createdAt: string;
  updatedAt: string;
}

interface LedgerAccount {
  id: string;
  accountCode: string;
  accountName: string;
  accountType: string;
  debitBalance: number;
  creditBalance: number;
  netBalance: number;
  status: string;
  createdAt: string;
  updatedAt: string;
}

interface FinancialDashboardProps {
  careHomeId?: string;
}

export const FinancialDashboard: React.FC<FinancialDashboardProps> = ({ careHomeId }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [journalEntries, setJournalEntries] = useState<JournalEntry[]>([]);
  const [cashTransactions, setCashTransactions] = useState<CashTransaction[]>([]);
  const [budgets, setBudgets] = useState<Budget[]>([]);
  const [ledgerAccounts, setLedgerAccounts] = useState<LedgerAccount[]>([]);
  const [loading, setLoading] = useState(false);

  // Mock data - replace with actual API calls
  useEffect(() => {
    const mockJournalEntries: JournalEntry[] = [
      {
        id: '1',
        entryNumber: 'JE-2024-001',
        description: 'Monthly rent payment',
        entryType: 'manual',
        status: 'posted',
        totalAmount: 5000.00,
        debitAccount: 'Rent Expense',
        creditAccount: 'Cash',
        transactionDate: '2024-01-15',
        reference: 'RENT-001',
        createdAt: '2024-01-15T10:00:00Z',
        updatedAt: '2024-01-15T10:00:00Z'
      },
      {
        id: '2',
        entryNumber: 'JE-2024-002',
        description: 'Staff salary payment',
        entryType: 'payroll',
        status: 'posted',
        totalAmount: 15000.00,
        debitAccount: 'Salary Expense',
        creditAccount: 'Bank Account',
        transactionDate: '2024-01-31',
        reference: 'PAY-001',
        createdAt: '2024-01-31T09:00:00Z',
        updatedAt: '2024-01-31T09:00:00Z'
      }
    ];

    const mockCashTransactions: CashTransaction[] = [
      {
        id: '1',
        transactionNumber: 'CT-2024-001',
        accountId: 'acc-001',
        accountName: 'Petty Cash',
        transactionType: 'debit',
        amount: 500.00,
        description: 'Office supplies purchase',
        status: 'posted',
        transactionDate: '2024-01-15',
        referenceNumber: 'PS-001',
        createdAt: '2024-01-15T14:30:00Z',
        updatedAt: '2024-01-15T14:30:00Z'
      },
      {
        id: '2',
        transactionNumber: 'CT-2024-002',
        accountId: 'acc-002',
        accountName: 'Bank Account',
        transactionType: 'credit',
        amount: 2500.00,
        description: 'Client payment received',
        status: 'posted',
        transactionDate: '2024-01-16',
        referenceNumber: 'PAY-001',
        createdAt: '2024-01-16T11:15:00Z',
        updatedAt: '2024-01-16T11:15:00Z'
      }
    ];

    const mockBudgets: Budget[] = [
      {
        id: '1',
        budgetName: '2024 Annual Budget',
        budgetType: 'annual',
        budgetYear: 2024,
        totalBudgetedAmount: 500000.00,
        totalActualAmount: 125000.00,
        variance: -375000.00,
        status: 'active',
        startDate: '2024-01-01',
        endDate: '2024-12-31',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-31T23:59:59Z'
      }
    ];

    const mockLedgerAccounts: LedgerAccount[] = [
      {
        id: '1',
        accountCode: '1000',
        accountName: 'Cash',
        accountType: 'asset',
        debitBalance: 10000.00,
        creditBalance: 0.00,
        netBalance: 10000.00,
        status: 'active',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-31T23:59:59Z'
      },
      {
        id: '2',
        accountCode: '2000',
        accountName: 'Accounts Payable',
        accountType: 'liability',
        debitBalance: 0.00,
        creditBalance: 5000.00,
        netBalance: -5000.00,
        status: 'active',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-31T23:59:59Z'
      }
    ];

    setJournalEntries(mockJournalEntries);
    setCashTransactions(mockCashTransactions);
    setBudgets(mockBudgets);
    setLedgerAccounts(mockLedgerAccounts);
  }, []);

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      draft: { color: 'bg-gray-100 text-gray-800', icon: Clock },
      posted: { color: 'bg-green-100 text-green-800', icon: CheckCircle },
      reversed: { color: 'bg-red-100 text-red-800', icon: XCircle },
      pending: { color: 'bg-yellow-100 text-yellow-800', icon: Clock },
      rejected: { color: 'bg-red-100 text-red-800', icon: XCircle },
      active: { color: 'bg-green-100 text-green-800', icon: CheckCircle },
      inactive: { color: 'bg-gray-100 text-gray-800', icon: XCircle }
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;
    const Icon = config.icon;

    return (
      <Badge className={config.color}>
        <Icon className="w-3 h-3 mr-1" />
        {status.toUpperCase()}
      </Badge>
    );
  };

  const getTransactionTypeBadge = (type: string) => {
    const typeConfig = {
      debit: { color: 'bg-red-100 text-red-800', icon: TrendingDown },
      credit: { color: 'bg-green-100 text-green-800', icon: TrendingUp }
    };

    const config = typeConfig[type as keyof typeof typeConfig] || typeConfig.debit;
    const Icon = config.icon;

    return (
      <Badge className={config.color}>
        <Icon className="w-3 h-3 mr-1" />
        {type.toUpperCase()}
      </Badge>
    );
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-GB', {
      style: 'currency',
      currency: 'GBP'
    }).format(amount);
  };

  const calculateTotalAssets = () => {
    return ledgerAccounts
      .filter(account => account.accountType === 'asset')
      .reduce((sum, account) => sum + account.netBalance, 0);
  };

  const calculateTotalLiabilities = () => {
    return ledgerAccounts
      .filter(account => account.accountType === 'liability')
      .reduce((sum, account) => sum + Math.abs(account.netBalance), 0);
  };

  const calculateTotalEquity = () => {
    return calculateTotalAssets() - calculateTotalLiabilities();
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">Financial Dashboard</h1>
        <div className="flex gap-2">
          <Button variant="outline" className="flex items-center gap-2">
            <Download className="w-4 h-4" />
            Export Report
          </Button>
          <Button className="flex items-center gap-2">
            <Plus className="w-4 h-4" />
            New Transaction
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="journal-entries">Journal Entries</TabsTrigger>
          <TabsTrigger value="cash-transactions">Cash Transactions</TabsTrigger>
          <TabsTrigger value="budgets">Budgets</TabsTrigger>
          <TabsTrigger value="ledger-accounts">Ledger Accounts</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Financial Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Assets</CardTitle>
                <DollarSign className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatCurrency(calculateTotalAssets())}</div>
                <p className="text-xs text-muted-foreground">
                  +2.5% from last month
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Liabilities</CardTitle>
                <TrendingDown className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatCurrency(calculateTotalLiabilities())}</div>
                <p className="text-xs text-muted-foreground">
                  -1.2% from last month
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Equity</CardTitle>
                <TrendingUp className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{formatCurrency(calculateTotalEquity())}</div>
                <p className="text-xs text-muted-foreground">
                  +3.7% from last month
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Active Budgets</CardTitle>
                <PieChart className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{budgets.length}</div>
                <p className="text-xs text-muted-foreground">
                  {budgets.filter(b => b.status === 'active').length} active
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Recent Transactions */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Transactions</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {cashTransactions.slice(0, 5).map((transaction) => (
                  <div key={transaction.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <CreditCard className="w-5 h-5 text-gray-400" />
                      <div>
                        <p className="font-medium">{transaction.description}</p>
                        <p className="text-sm text-gray-500">{transaction.transactionNumber}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className={`font-medium ${transaction.transactionType === 'debit' ? 'text-red-600' : 'text-green-600'}`}>
                        {transaction.transactionType === 'debit' ? '-' : '+'}{formatCurrency(transaction.amount)}
                      </p>
                      <p className="text-sm text-gray-500">
                        {new Date(transaction.transactionDate).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="journal-entries" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Journal Entries</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Entry Number</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {journalEntries.map((entry) => (
                    <TableRow key={entry.id}>
                      <TableCell className="font-mono text-sm">{entry.entryNumber}</TableCell>
                      <TableCell>{entry.description}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{entry.entryType.toUpperCase()}</Badge>
                      </TableCell>
                      <TableCell>{getStatusBadge(entry.status)}</TableCell>
                      <TableCell className="font-medium">{formatCurrency(entry.totalAmount)}</TableCell>
                      <TableCell>{new Date(entry.transactionDate).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="cash-transactions" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Cash Transactions</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Transaction Number</TableHead>
                    <TableHead>Account</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {cashTransactions.map((transaction) => (
                    <TableRow key={transaction.id}>
                      <TableCell className="font-mono text-sm">{transaction.transactionNumber}</TableCell>
                      <TableCell>{transaction.accountName}</TableCell>
                      <TableCell>{getTransactionTypeBadge(transaction.transactionType)}</TableCell>
                      <TableCell className="font-medium">{formatCurrency(transaction.amount)}</TableCell>
                      <TableCell>{getStatusBadge(transaction.status)}</TableCell>
                      <TableCell>{new Date(transaction.transactionDate).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="budgets" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Budgets</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Budget Name</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Year</TableHead>
                    <TableHead>Budgeted Amount</TableHead>
                    <TableHead>Actual Amount</TableHead>
                    <TableHead>Variance</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {budgets.map((budget) => (
                    <TableRow key={budget.id}>
                      <TableCell className="font-medium">{budget.budgetName}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{budget.budgetType.toUpperCase()}</Badge>
                      </TableCell>
                      <TableCell>{budget.budgetYear}</TableCell>
                      <TableCell className="font-medium">{formatCurrency(budget.totalBudgetedAmount)}</TableCell>
                      <TableCell className="font-medium">{formatCurrency(budget.totalActualAmount)}</TableCell>
                      <TableCell className={`font-medium ${budget.variance < 0 ? 'text-red-600' : 'text-green-600'}`}>
                        {formatCurrency(budget.variance)}
                      </TableCell>
                      <TableCell>{getStatusBadge(budget.status)}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="ledger-accounts" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Ledger Accounts</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Account Code</TableHead>
                    <TableHead>Account Name</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Debit Balance</TableHead>
                    <TableHead>Credit Balance</TableHead>
                    <TableHead>Net Balance</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {ledgerAccounts.map((account) => (
                    <TableRow key={account.id}>
                      <TableCell className="font-mono text-sm">{account.accountCode}</TableCell>
                      <TableCell className="font-medium">{account.accountName}</TableCell>
                      <TableCell>
                        <Badge variant="outline">{account.accountType.toUpperCase()}</Badge>
                      </TableCell>
                      <TableCell className="font-medium">{formatCurrency(account.debitBalance)}</TableCell>
                      <TableCell className="font-medium">{formatCurrency(account.creditBalance)}</TableCell>
                      <TableCell className={`font-medium ${account.netBalance < 0 ? 'text-red-600' : 'text-green-600'}`}>
                        {formatCurrency(account.netBalance)}
                      </TableCell>
                      <TableCell>{getStatusBadge(account.status)}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default FinancialDashboard;