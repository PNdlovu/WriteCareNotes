import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Alert, AlertDescription } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { 
  Receipt, Plus, Search, Filter, Download, CheckCircle, 
  Eye, Edit, Trash2, Clock, AlertTriangle, DollarSign, 
  Calendar, User, Building, CreditCard, Upload, FileText
} from 'lucide-react';

interface ExpenseManagementProps {
  organizationId: string;
  userRole: string;
}

interface Expense {
  id: string;
  expenseDate: string;
  amount: number;
  currency: 'GBP' | 'USD' | 'EUR';
  category: 'office_supplies' | 'travel' | 'meals' | 'training' | 'equipment' | 'maintenance' | 'utilities' | 'insurance' | 'legal' | 'marketing' | 'other';
  description: string;
  receiptUrl?: string;
  status: 'pending' | 'approved' | 'rejected' | 'paid';
  incurredById: string;
  incurredByName: string;
  approvedById?: string;
  approvedByName?: string;
  paymentId?: string;
  costCenter?: string;
  departmentId?: string;
  departmentName?: string;
  notes?: string;
  metadata?: Record<string, any>;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
}

interface ExpenseSummary {
  totalExpenses: number;
  totalAmount: number;
  pendingExpenses: number;
  approvedExpenses: number;
  rejectedExpenses: number;
  averageExpenseAmount: number;
  categoryBreakdown: Array<{
    category: string;
    count: number;
    amount: number;
  }>;
}

export const ExpenseManagement: React.FC<ExpenseManagementProps> = ({
  organizationId,
  userRole
}) => {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [summary, setSummary] = useState<ExpenseSummary | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedExpense, setSelectedExpense] = useState<Expense | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [filters, setFilters] = useState({
    status: '',
    category: '',
    incurredById: '',
    dateFrom: '',
    dateTo: '',
    search: ''
  });

  useEffect(() => {
    fetchExpenses();
    fetchSummary();
  }, [organizationId, filters]);

  const fetchExpenses = async () => {
    try {
      setLoading(true);
      const queryParams = new URLSearchParams();
      if (filters.status) queryParams.append('status', filters.status);
      if (filters.category) queryParams.append('category', filters.category);
      if (filters.incurredById) queryParams.append('incurredById', filters.incurredById);
      if (filters.dateFrom) queryParams.append('dateFrom', filters.dateFrom);
      if (filters.dateTo) queryParams.append('dateTo', filters.dateTo);
      if (filters.search) queryParams.append('search', filters.search);

      const response = await fetch(`/api/v1/financial/expenses?${queryParams}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch expenses');
      }

      const data = await response.json();
      setExpenses(data.data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  const fetchSummary = async () => {
    try {
      const response = await fetch('/api/v1/financial/expenses/summary', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to fetch summary');
      }

      const data = await response.json();
      setSummary(data.data);
    } catch (err) {
      console.error('Failed to fetch summary:', err);
    }
  };

  const handleCreateExpense = async (expenseData: Partial<Expense>) => {
    try {
      const response = await fetch('/api/v1/financial/expenses', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(expenseData)
      });

      if (!response.ok) {
        throw new Error('Failed to create expense');
      }

      const data = await response.json();
      setExpenses(prev => [data.data, ...prev]);
      setShowCreateModal(false);
      await fetchSummary();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create expense');
    }
  };

  const handleUpdateExpense = async (id: string, updates: Partial<Expense>) => {
    try {
      const response = await fetch(`/api/v1/financial/expenses/${id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updates)
      });

      if (!response.ok) {
        throw new Error('Failed to update expense');
      }

      const data = await response.json();
      setExpenses(prev => prev.map(expense => expense.id === id ? data.data : expense));
      setSelectedExpense(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update expense');
    }
  };

  const handleDeleteExpense = async (id: string) => {
    try {
      const response = await fetch(`/api/v1/financial/expenses/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (!response.ok) {
        throw new Error('Failed to delete expense');
      }

      setExpenses(prev => prev.filter(expense => expense.id !== id));
      setSelectedExpense(null);
      await fetchSummary();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete expense');
    }
  };

  const handleApproveExpense = async (id: string, approvalData: any) => {
    try {
      const response = await fetch(`/api/v1/financial/expenses/${id}/approve`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(approvalData)
      });

      if (!response.ok) {
        throw new Error('Failed to approve expense');
      }

      const data = await response.json();
      setExpenses(prev => prev.map(expense => expense.id === id ? data.data : expense));
      setSelectedExpense(null);
      await fetchSummary();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to approve expense');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'approved': return 'bg-green-100 text-green-800 border-green-200';
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'rejected': return 'bg-red-100 text-red-800 border-red-200';
      case 'paid': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'approved': return <CheckCircle className="w-4 h-4" />;
      case 'pending': return <Clock className="w-4 h-4" />;
      case 'rejected': return <AlertTriangle className="w-4 h-4" />;
      case 'paid': return <CreditCard className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'office_supplies': return <FileText className="w-4 h-4" />;
      case 'travel': return <Building className="w-4 h-4" />;
      case 'meals': return <DollarSign className="w-4 h-4" />;
      case 'training': return <User className="w-4 h-4" />;
      case 'equipment': return <Receipt className="w-4 h-4" />;
      case 'maintenance': return <Building className="w-4 h-4" />;
      case 'utilities': return <Building className="w-4 h-4" />;
      case 'insurance': return <CreditCard className="w-4 h-4" />;
      case 'legal': return <FileText className="w-4 h-4" />;
      case 'marketing': return <DollarSign className="w-4 h-4" />;
      default: return <Receipt className="w-4 h-4" />;
    }
  };

  if (loading && !expenses.length) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="lg" />
        <span className="ml-2">Loading expenses...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-2">
            <Receipt className="w-8 h-8 text-orange-500" />
            Expense Management
          </h1>
          <p className="text-gray-600 mt-1">
            Track and manage all business expenses
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline">
            <Upload className="w-4 h-4 mr-2" />
            Bulk Upload
          </Button>
          <Button variant="outline">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
          <Button onClick={() => setShowCreateModal(true)}>
            <Plus className="w-4 h-4 mr-2" />
            Add Expense
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      {summary && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Expenses</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {summary.totalExpenses}
                  </p>
                </div>
                <Receipt className="w-8 h-8 text-blue-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total Amount</p>
                  <p className="text-2xl font-bold text-green-600">
                    £{summary.totalAmount.toLocaleString()}
                  </p>
                </div>
                <DollarSign className="w-8 h-8 text-green-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Pending</p>
                  <p className="text-2xl font-bold text-yellow-600">
                    {summary.pendingExpenses}
                  </p>
                </div>
                <Clock className="w-8 h-8 text-yellow-500" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Approved</p>
                  <p className="text-2xl font-bold text-green-600">
                    {summary.approvedExpenses}
                  </p>
                </div>
                <CheckCircle className="w-8 h-8 text-green-500" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Category Breakdown */}
      {summary && summary.categoryBreakdown && (
        <Card>
          <CardHeader>
            <CardTitle>Expense Categories</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {summary.categoryBreakdown.map((category, index) => (
                <div key={index} className="p-4 border rounded-lg">
                  <div className="flex items-center gap-2 mb-2">
                    {getCategoryIcon(category.category)}
                    <span className="font-medium text-sm">
                      {category.category.replace('_', ' ').toUpperCase()}
                    </span>
                  </div>
                  <div className="text-2xl font-bold text-blue-600">
                    £{category.amount.toLocaleString()}
                  </div>
                  <div className="text-sm text-gray-600">
                    {category.count} expenses
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Search
              </label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <input
                  type="text"
                  placeholder="Search expenses..."
                  value={filters.search}
                  onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
                  className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                value={filters.status}
                onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Statuses</option>
                <option value="pending">Pending</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
                <option value="paid">Paid</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Category
              </label>
              <select
                value={filters.category}
                onChange={(e) => setFilters(prev => ({ ...prev, category: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All Categories</option>
                <option value="office_supplies">Office Supplies</option>
                <option value="travel">Travel</option>
                <option value="meals">Meals</option>
                <option value="training">Training</option>
                <option value="equipment">Equipment</option>
                <option value="maintenance">Maintenance</option>
                <option value="utilities">Utilities</option>
                <option value="insurance">Insurance</option>
                <option value="legal">Legal</option>
                <option value="marketing">Marketing</option>
                <option value="other">Other</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Date From
              </label>
              <input
                type="date"
                value={filters.dateFrom}
                onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Date To
              </label>
              <input
                type="date"
                value={filters.dateTo}
                onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div className="flex items-end">
              <Button
                variant="outline"
                onClick={() => setFilters({ status: '', category: '', incurredById: '', dateFrom: '', dateTo: '', search: '' })}
                className="w-full"
              >
                <Filter className="w-4 h-4 mr-2" />
                Clear Filters
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Error Alert */}
      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Expenses Table */}
      <Card>
        <CardHeader>
          <CardTitle>Expenses ({expenses.length})</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-3 font-medium">Date</th>
                  <th className="text-left p-3 font-medium">Description</th>
                  <th className="text-left p-3 font-medium">Category</th>
                  <th className="text-left p-3 font-medium">Amount</th>
                  <th className="text-left p-3 font-medium">Incurred By</th>
                  <th className="text-left p-3 font-medium">Status</th>
                  <th className="text-left p-3 font-medium">Actions</th>
                </tr>
              </thead>
              <tbody>
                {expenses.map((expense) => (
                  <tr key={expense.id} className="border-b hover:bg-gray-50">
                    <td className="p-3">
                      <div className="font-medium">
                        {new Date(expense.expenseDate).toLocaleDateString()}
                      </div>
                    </td>
                    <td className="p-3">
                      <div className="font-medium">{expense.description}</div>
                      {expense.receiptUrl && (
                        <div className="text-sm text-blue-600 flex items-center gap-1">
                          <FileText className="w-3 h-3" />
                          Receipt attached
                        </div>
                      )}
                    </td>
                    <td className="p-3">
                      <div className="flex items-center gap-2">
                        {getCategoryIcon(expense.category)}
                        <span className="text-sm">
                          {expense.category.replace('_', ' ').toUpperCase()}
                        </span>
                      </div>
                    </td>
                    <td className="p-3">
                      <div className="font-medium">
                        {expense.currency} {expense.amount.toLocaleString()}
                      </div>
                    </td>
                    <td className="p-3">
                      <div className="font-medium">{expense.incurredByName}</div>
                      {expense.departmentName && (
                        <div className="text-sm text-gray-500">
                          {expense.departmentName}
                        </div>
                      )}
                    </td>
                    <td className="p-3">
                      <Badge className={getStatusColor(expense.status)}>
                        <div className="flex items-center gap-1">
                          {getStatusIcon(expense.status)}
                          {expense.status.charAt(0).toUpperCase() + expense.status.slice(1)}
                        </div>
                      </Badge>
                    </td>
                    <td className="p-3">
                      <div className="flex gap-1">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => setSelectedExpense(expense)}
                        >
                          <Eye className="w-3 h-3" />
                        </Button>
                        {expense.status === 'pending' && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleApproveExpense(expense.id, { approvalNotes: 'Approved' })}
                          >
                            <CheckCircle className="w-3 h-3" />
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleDeleteExpense(expense.id)}
                        >
                          <Trash2 className="w-3 h-3" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Expense Detail Modal */}
      {selectedExpense && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="max-w-4xl w-full max-h-[80vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Expense Details - {selectedExpense.id}</CardTitle>
                <Button variant="ghost" onClick={() => setSelectedExpense(null)}>
                  ×
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Expense Information */}
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold mb-3">Expense Information</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Amount:</span>
                      <span className="font-medium">
                        {selectedExpense.currency} {selectedExpense.amount.toLocaleString()}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Date:</span>
                      <span className="font-medium">
                        {new Date(selectedExpense.expenseDate).toLocaleDateString()}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Category:</span>
                      <span className="font-medium">
                        {selectedExpense.category.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Status:</span>
                      <Badge className={getStatusColor(selectedExpense.status)}>
                        {selectedExpense.status.charAt(0).toUpperCase() + selectedExpense.status.slice(1)}
                      </Badge>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Cost Center:</span>
                      <span className="font-medium">
                        {selectedExpense.costCenter || 'N/A'}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold mb-3">People Information</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Incurred By:</span>
                      <span className="font-medium">{selectedExpense.incurredByName}</span>
                    </div>
                    {selectedExpense.approvedByName && (
                      <div className="flex justify-between">
                        <span className="text-gray-600">Approved By:</span>
                        <span className="font-medium">{selectedExpense.approvedByName}</span>
                      </div>
                    )}
                    {selectedExpense.departmentName && (
                      <div className="flex justify-between">
                        <span className="text-gray-600">Department:</span>
                        <span className="font-medium">{selectedExpense.departmentName}</span>
                      </div>
                    )}
                    <div className="flex justify-between">
                      <span className="text-gray-600">Created By:</span>
                      <span className="font-medium">{selectedExpense.createdBy}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Created At:</span>
                      <span className="font-medium">
                        {new Date(selectedExpense.createdAt).toLocaleString()}
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Description */}
              <div>
                <h4 className="font-semibold mb-3">Description</h4>
                <div className="p-3 bg-gray-50 rounded-lg text-sm">
                  {selectedExpense.description}
                </div>
              </div>

              {/* Receipt */}
              {selectedExpense.receiptUrl && (
                <div>
                  <h4 className="font-semibold mb-3">Receipt</h4>
                  <div className="p-3 border rounded-lg">
                    <div className="flex items-center gap-2 mb-2">
                      <FileText className="w-4 h-4 text-blue-500" />
                      <span className="text-sm font-medium">Receipt attached</span>
                    </div>
                    <Button size="sm" variant="outline">
                      <Download className="w-3 h-3 mr-1" />
                      Download Receipt
                    </Button>
                  </div>
                </div>
              )}

              {/* Notes */}
              {selectedExpense.notes && (
                <div>
                  <h4 className="font-semibold mb-3">Notes</h4>
                  <div className="p-3 bg-gray-50 rounded-lg text-sm">
                    {selectedExpense.notes}
                  </div>
                </div>
              )}

              {/* Metadata */}
              {selectedExpense.metadata && Object.keys(selectedExpense.metadata).length > 0 && (
                <div>
                  <h4 className="font-semibold mb-3">Metadata</h4>
                  <div className="p-3 bg-gray-50 rounded-lg text-sm">
                    <pre className="whitespace-pre-wrap">
                      {JSON.stringify(selectedExpense.metadata, null, 2)}
                    </pre>
                  </div>
                </div>
              )}

              {/* Actions */}
              <div className="flex gap-2 pt-4 border-t">
                <Button className="flex-1">
                  <Download className="w-4 h-4 mr-2" />
                  Export Details
                </Button>
                {selectedExpense.status === 'pending' && (
                  <Button className="flex-1" variant="outline">
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Approve Expense
                  </Button>
                )}
                <Button className="flex-1" variant="outline">
                  <Edit className="w-4 h-4 mr-2" />
                  Edit Expense
                </Button>
                <Button className="flex-1" variant="outline">
                  <Trash2 className="w-4 h-4 mr-2" />
                  Delete Expense
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default ExpenseManagement;