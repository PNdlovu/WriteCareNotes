import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Plus, 
  Search, 
  Filter, 
  Download, 
  Eye, 
  Edit, 
  Trash2, 
  CheckCircle, 
  XCircle, 
  Clock,
  AlertTriangle,
  FileText,
  User,
  Shield,
  Car,
  Globe,
  Users,
  UserCheck,
  UserX,
  Calendar,
  TrendingUp,
  TrendingDown
} from 'lucide-react';

interface DBSVerification {
  id: string;
  employeeId: string;
  employeeName: string;
  status: string;
  type: string;
  priority: string;
  applicationReference?: string;
  dbsReferenceNumber?: string;
  certificateNumber?: string;
  applicationDate?: string;
  submissionDate?: string;
  completionDate?: string;
  expiryDate?: string;
  verificationNotes?: string;
  complianceStatus: string;
  riskAssessment: string;
  createdAt: string;
  updatedAt: string;
}

interface RightToWorkCheck {
  id: string;
  employeeId: string;
  employeeName: string;
  status: string;
  documentType: string;
  verificationType: string;
  priority: string;
  documentNumber?: string;
  expiryDate?: string;
  verificationNotes?: string;
  complianceStatus: string;
  riskAssessment: string;
  createdAt: string;
  updatedAt: string;
}

interface DVLACheck {
  id: string;
  employeeId: string;
  employeeName: string;
  status: string;
  licenseType: string;
  licenseCategories: string[];
  priority: string;
  licenseNumber?: string;
  expiryDate?: string;
  verificationNotes?: string;
  complianceStatus: string;
  riskAssessment: string;
  createdAt: string;
  updatedAt: string;
}

interface HRDashboardProps {
  careHomeId?: string;
}

export const HRDashboard: React.FC<HRDashboardProps> = ({ careHomeId }) => {
  const [activeTab, setActiveTab] = useState('overview');
  const [dbsVerifications, setDbsVerifications] = useState<DBSVerification[]>([]);
  const [rightToWorkChecks, setRightToWorkChecks] = useState<RightToWorkCheck[]>([]);
  const [dvlaChecks, setDvlaChecks] = useState<DVLACheck[]>([]);
  const [loading, setLoading] = useState(false);

  // Mock data - replace with actual API calls
  useEffect(() => {
    const mockDBSVerifications: DBSVerification[] = [
      {
        id: '1',
        employeeId: 'emp-001',
        employeeName: 'John Smith',
        status: 'completed',
        type: 'enhanced',
        priority: 'high',
        applicationReference: 'DBS-2024-001',
        dbsReferenceNumber: 'DBS123456789',
        certificateNumber: 'CERT-001',
        applicationDate: '2024-01-15',
        submissionDate: '2024-01-16',
        completionDate: '2024-01-25',
        expiryDate: '2027-01-25',
        verificationNotes: 'Clear - no issues found',
        complianceStatus: 'compliant',
        riskAssessment: 'low',
        createdAt: '2024-01-15T10:00:00Z',
        updatedAt: '2024-01-25T14:30:00Z'
      },
      {
        id: '2',
        employeeId: 'emp-002',
        employeeName: 'Jane Doe',
        status: 'in_progress',
        type: 'standard',
        priority: 'medium',
        applicationReference: 'DBS-2024-002',
        dbsReferenceNumber: 'DBS987654321',
        applicationDate: '2024-01-20',
        submissionDate: '2024-01-21',
        complianceStatus: 'pending',
        riskAssessment: 'medium',
        createdAt: '2024-01-20T09:00:00Z',
        updatedAt: '2024-01-21T11:15:00Z'
      }
    ];

    const mockRightToWorkChecks: RightToWorkCheck[] = [
      {
        id: '1',
        employeeId: 'emp-001',
        employeeName: 'John Smith',
        status: 'verified',
        documentType: 'passport',
        verificationType: 'manual',
        priority: 'high',
        documentNumber: 'P123456789',
        expiryDate: '2030-12-31',
        verificationNotes: 'Valid UK passport',
        complianceStatus: 'compliant',
        riskAssessment: 'low',
        createdAt: '2024-01-15T10:00:00Z',
        updatedAt: '2024-01-15T10:30:00Z'
      },
      {
        id: '2',
        employeeId: 'emp-003',
        employeeName: 'Mike Johnson',
        status: 'pending_verification',
        documentType: 'visa',
        verificationType: 'manual',
        priority: 'high',
        documentNumber: 'V987654321',
        expiryDate: '2025-06-30',
        complianceStatus: 'pending',
        riskAssessment: 'high',
        createdAt: '2024-01-22T14:00:00Z',
        updatedAt: '2024-01-22T14:00:00Z'
      }
    ];

    const mockDVLAChecks: DVLACheck[] = [
      {
        id: '1',
        employeeId: 'emp-001',
        employeeName: 'John Smith',
        status: 'verified',
        licenseType: 'full',
        licenseCategories: ['B', 'C1'],
        priority: 'medium',
        licenseNumber: 'SMITH123456789',
        expiryDate: '2029-03-15',
        verificationNotes: 'Valid full driving license',
        complianceStatus: 'compliant',
        riskAssessment: 'low',
        createdAt: '2024-01-15T10:00:00Z',
        updatedAt: '2024-01-15T10:45:00Z'
      },
      {
        id: '2',
        employeeId: 'emp-004',
        employeeName: 'Sarah Wilson',
        status: 'expired',
        licenseType: 'provisional',
        licenseCategories: ['B'],
        priority: 'high',
        licenseNumber: 'WILSON987654321',
        expiryDate: '2023-12-31',
        complianceStatus: 'non_compliant',
        riskAssessment: 'high',
        createdAt: '2024-01-10T09:00:00Z',
        updatedAt: '2024-01-10T09:00:00Z'
      }
    ];

    setDbsVerifications(mockDBSVerifications);
    setRightToWorkChecks(mockRightToWorkChecks);
    setDvlaChecks(mockDVLAChecks);
  }, []);

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      not_started: { color: 'bg-gray-100 text-gray-800', icon: Clock },
      application_submitted: { color: 'bg-blue-100 text-blue-800', icon: FileText },
      pending_verification: { color: 'bg-yellow-100 text-yellow-800', icon: Clock },
      verified: { color: 'bg-green-100 text-green-800', icon: CheckCircle },
      completed: { color: 'bg-green-100 text-green-800', icon: CheckCircle },
      cleared: { color: 'bg-green-100 text-green-800', icon: CheckCircle },
      barred: { color: 'bg-red-100 text-red-800', icon: XCircle },
      rejected: { color: 'bg-red-100 text-red-800', icon: XCircle },
      expired: { color: 'bg-red-100 text-red-800', icon: AlertTriangle },
      cancelled: { color: 'bg-gray-100 text-gray-800', icon: XCircle },
      invalid: { color: 'bg-red-100 text-red-800', icon: XCircle }
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.not_started;
    const Icon = config.icon;

    return (
      <Badge className={config.color}>
        <Icon className="w-3 h-3 mr-1" />
        {status.replace('_', ' ').toUpperCase()}
      </Badge>
    );
  };

  const getComplianceBadge = (status: string) => {
    const complianceConfig = {
      compliant: { color: 'bg-green-100 text-green-800', text: 'Compliant' },
      non_compliant: { color: 'bg-red-100 text-red-800', text: 'Non-Compliant' },
      pending: { color: 'bg-yellow-100 text-yellow-800', text: 'Pending' },
      expired: { color: 'bg-red-100 text-red-800', text: 'Expired' }
    };

    const config = complianceConfig[status as keyof typeof complianceConfig] || complianceConfig.pending;

    return (
      <Badge className={config.color}>
        {config.text}
      </Badge>
    );
  };

  const getRiskBadge = (risk: string) => {
    const riskConfig = {
      low: { color: 'bg-green-100 text-green-800', text: 'Low Risk' },
      medium: { color: 'bg-yellow-100 text-yellow-800', text: 'Medium Risk' },
      high: { color: 'bg-red-100 text-red-800', text: 'High Risk' }
    };

    const config = riskConfig[risk as keyof typeof riskConfig] || riskConfig.low;

    return (
      <Badge className={config.color}>
        {config.text}
      </Badge>
    );
  };

  const calculateComplianceStats = () => {
    const totalDBS = dbsVerifications.length;
    const compliantDBS = dbsVerifications.filter(v => v.complianceStatus === 'compliant').length;
    const totalRightToWork = rightToWorkChecks.length;
    const compliantRightToWork = rightToWorkChecks.filter(v => v.complianceStatus === 'compliant').length;
    const totalDVLA = dvlaChecks.length;
    const compliantDVLA = dvlaChecks.filter(v => v.complianceStatus === 'compliant').length;

    const totalVerifications = totalDBS + totalRightToWork + totalDVLA;
    const totalCompliant = compliantDBS + compliantRightToWork + compliantDVLA;
    const complianceRate = totalVerifications > 0 ? (totalCompliant / totalVerifications) * 100 : 0;

    return {
      totalVerifications,
      totalCompliant,
      complianceRate,
      dbsCompliance: totalDBS > 0 ? (compliantDBS / totalDBS) * 100 : 0,
      rightToWorkCompliance: totalRightToWork > 0 ? (compliantRightToWork / totalRightToWork) * 100 : 0,
      dvlaCompliance: totalDVLA > 0 ? (compliantDVLA / totalDVLA) * 100 : 0
    };
  };

  const stats = calculateComplianceStats();

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">HR Verification Dashboard</h1>
        <div className="flex gap-2">
          <Button variant="outline" className="flex items-center gap-2">
            <Download className="w-4 h-4" />
            Export Report
          </Button>
          <Button className="flex items-center gap-2">
            <Plus className="w-4 h-4" />
            New Verification
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="dbs">DBS Verifications</TabsTrigger>
          <TabsTrigger value="right-to-work">Right to Work</TabsTrigger>
          <TabsTrigger value="dvla">DVLA Checks</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Compliance Summary Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Overall Compliance</CardTitle>
                <Shield className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{stats.complianceRate.toFixed(1)}%</div>
                <p className="text-xs text-muted-foreground">
                  {stats.totalCompliant} of {stats.totalVerifications} verifications
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">DBS Compliance</CardTitle>
                <FileText className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{stats.dbsCompliance.toFixed(1)}%</div>
                <p className="text-xs text-muted-foreground">
                  {dbsVerifications.filter(v => v.complianceStatus === 'compliant').length} of {dbsVerifications.length} DBS checks
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Right to Work</CardTitle>
                <Globe className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{stats.rightToWorkCompliance.toFixed(1)}%</div>
                <p className="text-xs text-muted-foreground">
                  {rightToWorkChecks.filter(v => v.complianceStatus === 'compliant').length} of {rightToWorkChecks.length} checks
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">DVLA Compliance</CardTitle>
                <Car className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{stats.dvlaCompliance.toFixed(1)}%</div>
                <p className="text-xs text-muted-foreground">
                  {dvlaChecks.filter(v => v.complianceStatus === 'compliant').length} of {dvlaChecks.length} checks
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Recent Verifications */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Verifications</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[...dbsVerifications, ...rightToWorkChecks, ...dvlaChecks]
                  .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
                  .slice(0, 5)
                  .map((verification) => (
                    <div key={verification.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex items-center gap-3">
                        <User className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="font-medium">{verification.employeeName}</p>
                          <p className="text-sm text-gray-500">
                            {verification.employeeId} • {verification.complianceStatus}
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center gap-2">
                          {getStatusBadge(verification.status)}
                          {getComplianceBadge(verification.complianceStatus)}
                        </div>
                        <p className="text-sm text-gray-500">
                          {new Date(verification.updatedAt).toLocaleDateString()}
                        </p>
                      </div>
                    </div>
                  ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="dbs" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>DBS Verifications</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Employee</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Compliance</TableHead>
                    <TableHead>Risk</TableHead>
                    <TableHead>Application Ref</TableHead>
                    <TableHead>Expiry Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {dbsVerifications.map((verification) => (
                    <TableRow key={verification.id}>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <User className="w-4 h-4 text-gray-400" />
                          <div>
                            <div className="font-medium">{verification.employeeName}</div>
                            <div className="text-sm text-gray-500">{verification.employeeId}</div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline">
                          {verification.type.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{getStatusBadge(verification.status)}</TableCell>
                      <TableCell>{getComplianceBadge(verification.complianceStatus)}</TableCell>
                      <TableCell>{getRiskBadge(verification.riskAssessment)}</TableCell>
                      <TableCell className="font-mono text-sm">
                        {verification.applicationReference || '-'}
                      </TableCell>
                      <TableCell>
                        {verification.expiryDate ? new Date(verification.expiryDate).toLocaleDateString() : '-'}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="right-to-work" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Right to Work Checks</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Employee</TableHead>
                    <TableHead>Document Type</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Compliance</TableHead>
                    <TableHead>Risk</TableHead>
                    <TableHead>Document Number</TableHead>
                    <TableHead>Expiry Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {rightToWorkChecks.map((check) => (
                    <TableRow key={check.id}>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <User className="w-4 h-4 text-gray-400" />
                          <div>
                            <div className="font-medium">{check.employeeName}</div>
                            <div className="text-sm text-gray-500">{check.employeeId}</div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline">
                          {check.documentType.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{getStatusBadge(check.status)}</TableCell>
                      <TableCell>{getComplianceBadge(check.complianceStatus)}</TableCell>
                      <TableCell>{getRiskBadge(check.riskAssessment)}</TableCell>
                      <TableCell className="font-mono text-sm">
                        {check.documentNumber || '-'}
                      </TableCell>
                      <TableCell>
                        {check.expiryDate ? new Date(check.expiryDate).toLocaleDateString() : '-'}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="dvla" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>DVLA Checks</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Employee</TableHead>
                    <TableHead>License Type</TableHead>
                    <TableHead>Categories</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Compliance</TableHead>
                    <TableHead>Risk</TableHead>
                    <TableHead>License Number</TableHead>
                    <TableHead>Expiry Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {dvlaChecks.map((check) => (
                    <TableRow key={check.id}>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <User className="w-4 h-4 text-gray-400" />
                          <div>
                            <div className="font-medium">{check.employeeName}</div>
                            <div className="text-sm text-gray-500">{check.employeeId}</div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant="outline">
                          {check.licenseType.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          {check.licenseCategories.map((category, index) => (
                            <Badge key={index} variant="secondary" className="text-xs">
                              {category}
                            </Badge>
                          ))}
                        </div>
                      </TableCell>
                      <TableCell>{getStatusBadge(check.status)}</TableCell>
                      <TableCell>{getComplianceBadge(check.complianceStatus)}</TableCell>
                      <TableCell>{getRiskBadge(check.riskAssessment)}</TableCell>
                      <TableCell className="font-mono text-sm">
                        {check.licenseNumber || '-'}
                      </TableCell>
                      <TableCell>
                        {check.expiryDate ? new Date(check.expiryDate).toLocaleDateString() : '-'}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button variant="ghost" size="sm">
                            <Edit className="w-4 h-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default HRDashboard;