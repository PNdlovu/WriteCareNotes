/**
 * @fileoverview Enterprise Emergency Management Dashboard
 * @module EmergencyDashboard
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Comprehensive emergency management dashboard with real-time
 * incident tracking, nurse call management, and on-call coordination.
 */

import React, { useState, useEffect } from 'react';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  Alert,
  AlertDescription,
  Badge,
  Button,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Progress
} from '../ui';
import { 
  AlertTriangle, 
  Phone, 
  Clock, 
  Users, 
  Activity, 
  Shield,
  Bell,
  Zap,
  CheckCircle,
  XCircle,
  Timer,
  UserCheck,
  Headphones,
  Radio,
  Smartphone,
  Heart
} from 'lucide-react';

interface EmergencyIncident {
  id: string;
  incidentReference: string;
  emergencyType: string;
  severity: 'low' | 'medium' | 'high' | 'critical' | 'catastrophic';
  status: string;
  location: string;
  detectionTime: string;
  responseTime?: number;
}

interface NurseCall {
  id: string;
  callReference: string;
  residentName: string;
  callType: string;
  priority: 'routine' | 'standard' | 'high' | 'urgent' | 'emergency';
  status: string;
  location: string;
  triggeredAt: string;
  responseTime?: number;
  assignedStaff?: string;
}

interface OnCallStaff {
  id: string;
  staffName: string;
  role: string;
  status: string;
  currentCalls: number;
  maxCalls: number;
  responseTime: number;
  availability: boolean;
}

interface EmergencyDashboardData {
  activeEmergencies: number;
  criticalEmergencies: number;
  pendingNurseCalls: number;
  averageResponseTime: number;
  onCallStaff: number;
  recentIncidents: EmergencyIncident[];
  nurseCallQueue: NurseCall[];
  onCallTeam: OnCallStaff[];
  responseMetrics: {
    emergencyResponseTime: number;
    nurseCallResponseTime: number;
    escalationRate: number;
    resolutionRate: number;
  };
}

export const EmergencyDashboard: React.FC = () => {
  const [dashboardData, setDashboardData] = useState<EmergencyDashboardData | null>(null);
  const [loading, setLoading] = useState(true);
  const [autoRefresh, setAutoRefresh] = useState(true);

  useEffect(() => {
    loadDashboardData();
    
    if (autoRefresh) {
      const interval = setInterval(loadDashboardData, 30000); // Refresh every 30 seconds
      return () => clearInterval(interval);
    }
  }, [autoRefresh]);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      // API call would go here
      const mockData: EmergencyDashboardData = {
        activeEmergencies: 2,
        criticalEmergencies: 1,
        pendingNurseCalls: 8,
        averageResponseTime: 2.3,
        onCallStaff: 12,
        recentIncidents: [
          {
            id: '1',
            incidentReference: 'EMR-20250103-MED-C-A1B2',
            emergencyType: 'medical',
            severity: 'critical',
            status: 'responding',
            location: 'Room 205',
            detectionTime: '2025-01-03T14:30:00Z',
            responseTime: 180000 // 3 minutes in milliseconds
          },
          {
            id: '2',
            incidentReference: 'EMR-20250103-SEC-M-C3D4',
            emergencyType: 'security',
            severity: 'medium',
            status: 'resolved',
            location: 'Main Entrance',
            detectionTime: '2025-01-03T12:15:00Z',
            responseTime: 420000 // 7 minutes
          }
        ],
        nurseCallQueue: [
          {
            id: '1',
            callReference: 'NC-20250103-1430-A1',
            residentName: 'John Smith',
            callType: 'bathroom_assistance',
            priority: 'high',
            status: 'active',
            location: 'Room 205',
            triggeredAt: '2025-01-03T14:30:00Z',
            assignedStaff: 'Sarah Johnson'
          },
          {
            id: '2',
            callReference: 'NC-20250103-1425-B2',
            residentName: 'Mary Williams',
            callType: 'medication_request',
            priority: 'standard',
            status: 'acknowledged',
            location: 'Room 312',
            triggeredAt: '2025-01-03T14:25:00Z',
            responseTime: 120000, // 2 minutes
            assignedStaff: 'Michael Brown'
          }
        ],
        onCallTeam: [
          {
            id: '1',
            staffName: 'Sarah Johnson',
            role: 'senior_nurse',
            status: 'active',
            currentCalls: 2,
            maxCalls: 8,
            responseTime: 1.8,
            availability: true
          },
          {
            id: '2',
            staffName: 'Michael Brown',
            role: 'registered_nurse',
            status: 'responding',
            currentCalls: 1,
            maxCalls: 5,
            responseTime: 2.1,
            availability: true
          }
        ],
        responseMetrics: {
          emergencyResponseTime: 3.2,
          nurseCallResponseTime: 1.8,
          escalationRate: 12,
          resolutionRate: 98
        }
      };
      setDashboardData(mockData);
    } catch (error) {
      console.error('Failed to load emergency dashboard:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityBadgeVariant = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'catastrophic':
        return 'destructive';
      case 'high':
        return 'destructive';
      case 'medium':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const getPriorityBadgeVariant = (priority: string) => {
    switch (priority) {
      case 'emergency':
        return 'destructive';
      case 'urgent':
        return 'destructive';
      case 'high':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const formatResponseTime = (timeInMs?: number) => {
    if (!timeInMs) return 'N/A';
    const minutes = Math.floor(timeInMs / 60000);
    const seconds = Math.floor((timeInMs % 60000) / 1000);
    return `${minutes}m ${seconds}s`;
  };

  const getWorkloadColor = (current: number, max: number) => {
    const percentage = (current / max) * 100;
    if (percentage >= 90) return 'text-red-600';
    if (percentage >= 70) return 'text-amber-600';
    return 'text-green-600';
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!dashboardData) {
    return (
      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          Failed to load emergency management dashboard.
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Emergency Management</h1>
          <p className="text-gray-600">Real-time emergency response and nurse call coordination</p>
        </div>
        <div className="flex items-center space-x-2">
          <div className="flex items-center space-x-1">
            <Activity className={`h-4 w-4 ${autoRefresh ? 'text-green-600 animate-pulse' : 'text-gray-400'}`} />
            <span className="text-sm text-gray-600">
              {autoRefresh ? 'Live' : 'Paused'}
            </span>
          </div>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => setAutoRefresh(!autoRefresh)}
          >
            {autoRefresh ? 'Pause' : 'Resume'} Auto-refresh
          </Button>
        </div>
      </div>

      {/* Critical Alerts */}
      {dashboardData.criticalEmergencies > 0 && (
        <Alert className="border-red-200 bg-red-50 animate-pulse">
          <AlertTriangle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            <strong>{dashboardData.criticalEmergencies} CRITICAL EMERGENC{dashboardData.criticalEmergencies > 1 ? 'IES' : 'Y'}</strong> requiring immediate response!
          </AlertDescription>
        </Alert>
      )}

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Emergencies</CardTitle>
            <AlertTriangle className="h-4 w-4 text-red-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{dashboardData.activeEmergencies}</div>
            <p className="text-xs text-gray-500">Currently responding</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Nurse Calls</CardTitle>
            <Phone className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-600">{dashboardData.pendingNurseCalls}</div>
            <p className="text-xs text-gray-500">In queue</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Response Time</CardTitle>
            <Timer className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{dashboardData.averageResponseTime}m</div>
            <p className="text-xs text-gray-500">Average response</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">On-Call Staff</CardTitle>
            <UserCheck className="h-4 w-4 text-purple-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-600">{dashboardData.onCallStaff}</div>
            <p className="text-xs text-gray-500">Available now</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Resolution Rate</CardTitle>
            <CheckCircle className="h-4 w-4 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">{dashboardData.responseMetrics.resolutionRate}%</div>
            <p className="text-xs text-gray-500">Successfully resolved</p>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs defaultValue="live" className="space-y-4">
        <TabsList>
          <TabsTrigger value="live">Live Status</TabsTrigger>
          <TabsTrigger value="nurse-calls">Nurse Calls</TabsTrigger>
          <TabsTrigger value="on-call">On-Call Team</TabsTrigger>
          <TabsTrigger value="incidents">Emergency Incidents</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="live" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Active Nurse Calls */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Phone className="h-5 w-5 mr-2 text-blue-600" />
                  Active Nurse Calls
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {dashboardData.nurseCallQueue.slice(0, 5).map((call) => (
                    <div key={call.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Badge variant={getPriorityBadgeVariant(call.priority)}>
                          {call.priority.toUpperCase()}
                        </Badge>
                        <div>
                          <div className="font-medium">{call.residentName}</div>
                          <div className="text-sm text-gray-600">{call.location} • {call.callType.replace('_', ' ')}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-mono">{call.callReference}</div>
                        <div className="text-xs text-gray-500">
                          {formatResponseTime(call.responseTime)} ago
                        </div>
                      </div>
                    </div>
                  ))}
                  {dashboardData.nurseCallQueue.length === 0 && (
                    <div className="text-center py-4 text-gray-500">
                      <CheckCircle className="h-8 w-8 mx-auto mb-2 text-green-600" />
                      No active nurse calls
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* On-Call Staff Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Users className="h-5 w-5 mr-2 text-purple-600" />
                  On-Call Team Status
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {dashboardData.onCallTeam.map((staff) => (
                    <div key={staff.id} className="flex items-center justify-between p-3 border rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`w-3 h-3 rounded-full ${staff.availability ? 'bg-green-500' : 'bg-red-500'}`}></div>
                        <div>
                          <div className="font-medium">{staff.staffName}</div>
                          <div className="text-sm text-gray-600 capitalize">{staff.role.replace('_', ' ')}</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`text-sm font-medium ${getWorkloadColor(staff.currentCalls, staff.maxCalls)}`}>
                          {staff.currentCalls}/{staff.maxCalls} calls
                        </div>
                        <div className="text-xs text-gray-500">
                          {staff.responseTime}m avg response
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="nurse-calls" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex justify-between items-center">
                <CardTitle>Nurse Call Management</CardTitle>
                <div className="flex items-center space-x-2">
                  <Badge variant="outline" className="flex items-center">
                    <Bell className="h-3 w-3 mr-1" />
                    {dashboardData.pendingNurseCalls} Active
                  </Badge>
                  <Button size="sm">
                    <Phone className="h-4 w-4 mr-2" />
                    Manual Call
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Reference</TableHead>
                    <TableHead>Resident</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Priority</TableHead>
                    <TableHead>Location</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Assigned</TableHead>
                    <TableHead>Time</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {dashboardData.nurseCallQueue.map((call) => (
                    <TableRow key={call.id}>
                      <TableCell className="font-mono text-sm">{call.callReference}</TableCell>
                      <TableCell>{call.residentName}</TableCell>
                      <TableCell>{call.callType.replace('_', ' ')}</TableCell>
                      <TableCell>
                        <Badge variant={getPriorityBadgeVariant(call.priority)}>
                          {call.priority.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{call.location}</TableCell>
                      <TableCell>
                        <Badge variant="outline">
                          {call.status.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{call.assignedStaff || 'Unassigned'}</TableCell>
                      <TableCell>
                        <div className="text-sm">
                          {new Date(call.triggeredAt).toLocaleTimeString()}
                        </div>
                        {call.responseTime && (
                          <div className="text-xs text-gray-500">
                            Response: {formatResponseTime(call.responseTime)}
                          </div>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex space-x-1">
                          {call.status === 'active' && (
                            <Button variant="outline" size="sm">
                              <CheckCircle className="h-3 w-3" />
                            </Button>
                          )}
                          {call.status === 'acknowledged' && (
                            <Button variant="default" size="sm">
                              <Heart className="h-3 w-3" />
                            </Button>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="on-call" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>On-Call Team Management</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {dashboardData.onCallTeam.map((staff) => (
                  <Card key={staff.id} className="border">
                    <CardContent className="pt-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center space-x-2">
                          <div className={`w-3 h-3 rounded-full ${staff.availability ? 'bg-green-500' : 'bg-red-500'}`}></div>
                          <span className="font-medium">{staff.staffName}</span>
                        </div>
                        <Badge variant="outline">{staff.role.replace('_', ' ').toUpperCase()}</Badge>
                      </div>
                      
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span>Current Calls:</span>
                          <span className={getWorkloadColor(staff.currentCalls, staff.maxCalls)}>
                            {staff.currentCalls}/{staff.maxCalls}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>Avg Response:</span>
                          <span>{staff.responseTime}m</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Status:</span>
                          <Badge variant={staff.status === 'active' ? 'default' : 'secondary'}>
                            {staff.status.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                      
                      <div className="mt-3">
                        <div className="text-xs text-gray-500 mb-1">Workload</div>
                        <Progress 
                          value={(staff.currentCalls / staff.maxCalls) * 100} 
                          className="w-full h-2"
                        />
                      </div>
                      
                      <div className="flex space-x-1 mt-3">
                        <Button variant="outline" size="sm" className="flex-1">
                          <Smartphone className="h-3 w-3 mr-1" />
                          Call
                        </Button>
                        <Button variant="outline" size="sm" className="flex-1">
                          <Radio className="h-3 w-3 mr-1" />
                          Radio
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="incidents" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Recent Emergency Incidents</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Reference</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Severity</TableHead>
                    <TableHead>Location</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Detection Time</TableHead>
                    <TableHead>Response Time</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {dashboardData.recentIncidents.map((incident) => (
                    <TableRow key={incident.id}>
                      <TableCell className="font-mono text-sm">{incident.incidentReference}</TableCell>
                      <TableCell className="capitalize">{incident.emergencyType}</TableCell>
                      <TableCell>
                        <Badge variant={getSeverityBadgeVariant(incident.severity)}>
                          {incident.severity.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>{incident.location}</TableCell>
                      <TableCell>
                        <Badge variant="outline">
                          {incident.status.toUpperCase()}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        {new Date(incident.detectionTime).toLocaleString()}
                      </TableCell>
                      <TableCell>
                        {incident.responseTime ? formatResponseTime(incident.responseTime) : 'Ongoing'}
                      </TableCell>
                      <TableCell>
                        <Button variant="outline" size="sm">
                          <Shield className="h-3 w-3" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Response Performance</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span>Emergency Response Time</span>
                    <Badge variant="default">{dashboardData.responseMetrics.emergencyResponseTime}m</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Nurse Call Response Time</span>
                    <Badge variant="default">{dashboardData.responseMetrics.nurseCallResponseTime}m</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Escalation Rate</span>
                    <Badge variant="secondary">{dashboardData.responseMetrics.escalationRate}%</Badge>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Resolution Rate</span>
                    <Badge variant="default">{dashboardData.responseMetrics.resolutionRate}%</Badge>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>System Health</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <span>Call Button Network</span>
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm">Online</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Mobile App Connectivity</span>
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm">Connected</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Pager System</span>
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm">Operational</span>
                    </div>
                  </div>
                  <div className="flex justify-between items-center">
                    <span>Emergency Services Link</span>
                    <div className="flex items-center space-x-1">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <span className="text-sm">Active</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      {/* Communication Channels Status */}
      <Card>
        <CardHeader>
          <CardTitle>Communication Channels</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="flex items-center space-x-2 p-3 border rounded-lg">
              <Smartphone className="h-5 w-5 text-blue-600" />
              <div>
                <div className="font-medium">Mobile App</div>
                <div className="text-sm text-green-600">Connected</div>
              </div>
            </div>
            <div className="flex items-center space-x-2 p-3 border rounded-lg">
              <Radio className="h-5 w-5 text-purple-600" />
              <div>
                <div className="font-medium">Pager System</div>
                <div className="text-sm text-green-600">Operational</div>
              </div>
            </div>
            <div className="flex items-center space-x-2 p-3 border rounded-lg">
              <Headphones className="h-5 w-5 text-green-600" />
              <div>
                <div className="font-medium">Voice System</div>
                <div className="text-sm text-green-600">Active</div>
              </div>
            </div>
            <div className="flex items-center space-x-2 p-3 border rounded-lg">
              <Zap className="h-5 w-5 text-orange-600" />
              <div>
                <div className="font-medium">Emergency Line</div>
                <div className="text-sm text-green-600">Ready</div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};