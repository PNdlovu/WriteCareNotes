/**
 * @fileoverview Care Plan Management Interface for WriteCareNotes
 * @module CarePlanManagement
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Comprehensive care plan creation, management, and monitoring system
 * providing template-based care planning, SMART goal setting, and outcome tracking.
 * Supports collaborative care planning with family involvement and professional oversight.
 * 
 * @example
 * // Usage in resident management system
 * <CarePlanManagement
 *   residentId="resident-123"
 *   onCarePlanUpdate={handleCarePlanUpdate}
 *   showFamilyView={false}
 * />
 * 
 * @compliance
 * - CQC Person-Centered Care Standards
 * - Care Inspectorate Scotland Care Planning Requirements
 * - CIW Wales Care and Support Planning Standards
 * - RQIA Northern Ireland Care Planning Guidelines
 * 
 * @security
 * - Role-based access to care plan information
 * - Audit trails for all care plan modifications
 * - Secure family access with consent management
 * - Professional accountability and electronic signatures
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button as MuiButton,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  AlertTitle,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  ListItemSecondaryAction,
  Divider,
  Tabs,
  Tab,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  LinearProgress,
  CircularProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControlLabel,
  Checkbox,
  RadioGroup,
  Radio
} from '@mui/material';import
 {
  Assignment as CarePlanIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  CheckCircle as CompleteIcon,
  Schedule as ScheduleIcon,
  Person as PersonIcon,
  Group as FamilyIcon,
  Timeline as TimelineIcon,
  TrendingUp as ProgressIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Visibility as ViewIcon,
  ExpandMore as ExpandMoreIcon,
  Star as GoalIcon,
  LocalHospital as ClinicalIcon,
  Favorite as WellbeingIcon
} from '@mui/icons-material';
import { Button } from '../ui/Button';
import { Card as UICard } from '../ui/Card';
import { Badge as UIBadge } from '../ui/Badge';
import { Alert as UIAlert } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { DataTable } from '../ui/DataTable';

// Types and Interfaces
interface CareGoal {
  id: string;
  title: string;
  description: string;
  category: 'physical' | 'mental' | 'social' | 'spiritual' | 'cognitive' | 'emotional';
  priority: 'low' | 'medium' | 'high' | 'critical';
  status: 'active' | 'achieved' | 'modified' | 'discontinued';
  targetDate: Date;
  createdDate: Date;
  createdBy: string;
  measurableOutcomes: MeasurableOutcome[];
  interventions: CareIntervention[];
  progress: GoalProgress[];
  reviewDate: Date;
  achievementCriteria: string[];
  barriers: string[];
  supportRequired: string[];
}

interface MeasurableOutcome {
  id: string;
  description: string;
  measurementType: 'frequency' | 'duration' | 'scale' | 'binary' | 'percentage';
  targetValue: string;
  currentValue?: string;
  unit?: string;
  frequency: string;
  lastMeasured?: Date;
  trend: 'improving' | 'stable' | 'declining' | 'unknown';
}

interface CareIntervention {
  id: string;
  title: string;
  description: string;
  type: 'direct_care' | 'medication' | 'therapy' | 'monitoring' | 'environmental' | 'social';
  frequency: string;
  duration?: string;
  assignedTo: string[];
  startDate: Date;
  endDate?: Date;
  status: 'active' | 'completed' | 'paused' | 'cancelled';
  instructions: string;
  precautions: string[];
  equipment: string[];
  documentation: string[];
}

interface GoalProgress {
  id: string;
  date: Date;
  progressPercentage: number;
  notes: string;
  recordedBy: string;
  outcomes: OutcomeMeasurement[];
  barriers: string[];
  modifications: string[];
  nextSteps: string[];
}

interface OutcomeMeasurement {
  outcomeId: string;
  value: string;
  notes?: string;
  measuredBy: string;
  measuredAt: Date;
}

interface CarePlan {
  id: string;
  residentId: string;
  version: number;
  status: 'draft' | 'active' | 'under_review' | 'archived';
  createdDate: Date;
  createdBy: string;
  lastModified: Date;
  lastModifiedBy: string;
  approvedDate?: Date;
  approvedBy?: string;
  reviewDate: Date;
  nextReviewDate: Date;
  goals: CareGoal[];
  overallProgress: number;
  familyInvolvement: FamilyInvolvement;
  professionalTeam: ProfessionalTeamMember[];
  riskAssessments: string[];
  preferences: ResidentPreferences;
  legalConsiderations: LegalConsideration[];
  reviewHistory: CarePlanReview[];
}

interface FamilyInvolvement {
  level: 'minimal' | 'moderate' | 'high' | 'full';
  authorizedContacts: string[];
  communicationPreferences: string[];
  involvementAreas: string[];
  restrictions: string[];
  consentStatus: 'given' | 'withheld' | 'conditional';
  lastUpdated: Date;
}

interface ProfessionalTeamMember {
  id: string;
  name: string;
  role: string;
  specialization?: string;
  responsibilities: string[];
  contactInfo: string;
  availability: string;
  lastContact?: Date;
}

interface ResidentPreferences {
  dailyRoutine: string[];
  activities: string[];
  socialInteraction: string;
  privacy: string;
  communication: string[];
  culturalNeeds: string[];
  religiousNeeds: string[];
  dietaryPreferences: string[];
}

interface LegalConsideration {
  type: 'mental_capacity' | 'best_interest' | 'advance_directive' | 'power_of_attorney' | 'court_order';
  description: string;
  dateAssessed: Date;
  assessedBy: string;
  validUntil?: Date;
  restrictions: string[];
  authorizedPersons: string[];
}

interface CarePlanReview {
  id: string;
  reviewDate: Date;
  reviewedBy: string;
  reviewType: 'scheduled' | 'triggered' | 'incident_based' | 'family_requested';
  outcomes: ReviewOutcome[];
  modifications: string[];
  newGoals: string[];
  discontinuedGoals: string[];
  nextReviewDate: Date;
  familyPresent: boolean;
  familyFeedback?: string;
  actionItems: ActionItem[];
}

interface ReviewOutcome {
  goalId: string;
  status: 'achieved' | 'progressing' | 'not_progressing' | 'modified' | 'discontinued';
  notes: string;
  evidence: string[];
  recommendations: string[];
}

interface ActionItem {
  id: string;
  description: string;
  assignedTo: string;
  dueDate: Date;
  priority: 'low' | 'medium' | 'high';
  status: 'pending' | 'in_progress' | 'completed';
  completedDate?: Date;
}

interface CarePlanTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  applicableConditions: string[];
  defaultGoals: Partial<CareGoal>[];
  defaultInterventions: Partial<CareIntervention>[];
  reviewFrequency: string;
  requiredAssessments: string[];
}

interface CarePlanManagementProps {
  residentId: string;
  onCarePlanUpdate?: (carePlan: CarePlan) => void;
  readOnly?: boolean;
  showFamilyView?: boolean;
}

export const CarePlanManagement: React.FC<CarePlanManagementProps> = ({
  residentId,
  onCarePlanUpdate,
  readOnly = false,
  showFamilyView = false
}) => {
  // State Management
  const [carePlans, setCarePlans] = useState<CarePlan[]>([]);
  const [activeCarePlan, setActiveCarePlan] = useState<CarePlan | null>(null);
  const [carePlanTemplates, setCarePlanTemplates] = useState<CarePlanTemplate[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'overview' | 'goals' | 'interventions' | 'progress' | 'reviews' | 'family'>('overview');
  const [showGoalDialog, setShowGoalDialog] = useState(false);
  const [showInterventionDialog, setShowInterventionDialog] = useState(false);
  const [showProgressDialog, setShowProgressDialog] = useState(false);
  const [selectedGoal, setSelectedGoal] = useState<CareGoal | null>(null);
  const [selectedIntervention, setSelectedIntervention] = useState<CareIntervention | null>(null);
  const [editingGoal, setEditingGoal] = useState<Partial<CareGoal>>({});
  const [editingIntervention, setEditingIntervention] = useState<Partial<CareIntervention>>({});
  const [progressEntry, setProgressEntry] = useState<Partial<GoalProgress>>({});
  const [savingChanges, setSavingChanges] = useState(false);

  // Load care plans and templates
  useEffect(() => {
    const loadCarePlanData = async () => {
      try {
        setLoading(true);
        setError(null);

        const response = await fetch(`/api/v1/residents/${residentId}/care-plans`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error(`Failed to load care plans: ${response.statusText}`);
        }

        const data = await response.json();
        setCarePlans(data.carePlans || []);
        setCarePlanTemplates(data.templates || []);
        
        // Set active care plan (most recent active one)
        const activePlan = data.carePlans?.find((plan: CarePlan) => plan.status === 'active');
        if (activePlan) {
          setActiveCarePlan(activePlan);
        }

      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to load care plan data';
        setError(errorMessage);
        console.error('Error loading care plan data:', err);
      } finally {
        setLoading(false);
      }
    };

    if (residentId) {
      loadCarePlanData();
    }
  }, [residentId]);

  // Create new care plan
  const createCarePlan = useCallback(async (templateId?: string) => {
    try {
      setSavingChanges(true);
      setError(null);

      const response = await fetch(`/api/v1/residents/${residentId}/care-plans`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          templateId,
          status: 'draft'
        })
      });

      if (!response.ok) {
        throw new Error(`Failed to create care plan: ${response.statusText}`);
      }

      const newCarePlan = await response.json();
      setCarePlans(prev => [newCarePlan, ...prev]);
      setActiveCarePlan(newCarePlan);
      onCarePlanUpdate?.(newCarePlan);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to create care plan';
      setError(errorMessage);
      console.error('Error creating care plan:', err);
    } finally {
      setSavingChanges(false);
    }
  }, [residentId, onCarePlanUpdate]);

  // Update care plan
  const updateCarePlan = useCallback(async (updates: Partial<CarePlan>) => {
    if (!activeCarePlan) return;

    try {
      setSavingChanges(true);
      setError(null);

      const response = await fetch(`/api/v1/residents/${residentId}/care-plans/${activeCarePlan.id}`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updates)
      });

      if (!response.ok) {
        throw new Error(`Failed to update care plan: ${response.statusText}`);
      }

      const updatedCarePlan = await response.json();
      setActiveCarePlan(updatedCarePlan);
      setCarePlans(prev => prev.map(plan => 
        plan.id === updatedCarePlan.id ? updatedCarePlan : plan
      ));
      onCarePlanUpdate?.(updatedCarePlan);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to update care plan';
      setError(errorMessage);
      console.error('Error updating care plan:', err);
    } finally {
      setSavingChanges(false);
    }
  }, [activeCarePlan, residentId, onCarePlanUpdate]);

  // Add or update goal
  const saveGoal = useCallback(async () => {
    if (!activeCarePlan || !editingGoal.title) return;

    const goalData: CareGoal = {
      id: editingGoal.id || `goal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      title: editingGoal.title,
      description: editingGoal.description || '',
      category: editingGoal.category || 'physical',
      priority: editingGoal.priority || 'medium',
      status: editingGoal.status || 'active',
      targetDate: editingGoal.targetDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
      createdDate: editingGoal.createdDate || new Date(),
      createdBy: editingGoal.createdBy || 'current_user',
      measurableOutcomes: editingGoal.measurableOutcomes || [],
      interventions: editingGoal.interventions || [],
      progress: editingGoal.progress || [],
      reviewDate: editingGoal.reviewDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      achievementCriteria: editingGoal.achievementCriteria || [],
      barriers: editingGoal.barriers || [],
      supportRequired: editingGoal.supportRequired || []
    };

    const updatedGoals = editingGoal.id
      ? activeCarePlan.goals.map(goal => goal.id === editingGoal.id ? goalData : goal)
      : [...activeCarePlan.goals, goalData];

    await updateCarePlan({ goals: updatedGoals });
    setShowGoalDialog(false);
    setEditingGoal({});
  }, [activeCarePlan, editingGoal, updateCarePlan]);

  // Add or update intervention
  const saveIntervention = useCallback(async () => {
    if (!activeCarePlan || !editingIntervention.title) return;

    const interventionData: CareIntervention = {
      id: editingIntervention.id || `intervention-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      title: editingIntervention.title,
      description: editingIntervention.description || '',
      type: editingIntervention.type || 'direct_care',
      frequency: editingIntervention.frequency || 'Daily',
      duration: editingIntervention.duration,
      assignedTo: editingIntervention.assignedTo || [],
      startDate: editingIntervention.startDate || new Date(),
      endDate: editingIntervention.endDate,
      status: editingIntervention.status || 'active',
      instructions: editingIntervention.instructions || '',
      precautions: editingIntervention.precautions || [],
      equipment: editingIntervention.equipment || [],
      documentation: editingIntervention.documentation || []
    };

    // Find the goal this intervention belongs to
    const goalId = selectedGoal?.id;
    if (goalId) {
      const updatedGoals = activeCarePlan.goals.map(goal => {
        if (goal.id === goalId) {
          const updatedInterventions = editingIntervention.id
            ? goal.interventions.map(int => int.id === editingIntervention.id ? interventionData : int)
            : [...goal.interventions, interventionData];
          return { ...goal, interventions: updatedInterventions };
        }
        return goal;
      });

      await updateCarePlan({ goals: updatedGoals });
    }

    setShowInterventionDialog(false);
    setEditingIntervention({});
  }, [activeCarePlan, editingIntervention, selectedGoal, updateCarePlan]);

  // Record progress
  const recordProgress = useCallback(async () => {
    if (!activeCarePlan || !selectedGoal || !progressEntry.notes) return;

    const progressData: GoalProgress = {
      id: `progress-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      date: progressEntry.date || new Date(),
      progressPercentage: progressEntry.progressPercentage || 0,
      notes: progressEntry.notes,
      recordedBy: progressEntry.recordedBy || 'current_user',
      outcomes: progressEntry.outcomes || [],
      barriers: progressEntry.barriers || [],
      modifications: progressEntry.modifications || [],
      nextSteps: progressEntry.nextSteps || []
    };

    const updatedGoals = activeCarePlan.goals.map(goal => {
      if (goal.id === selectedGoal.id) {
        return { ...goal, progress: [...goal.progress, progressData] };
      }
      return goal;
    });

    await updateCarePlan({ goals: updatedGoals });
    setShowProgressDialog(false);
    setProgressEntry({});
  }, [activeCarePlan, selectedGoal, progressEntry, updateCarePlan]);

  // Calculate overall progress
  const overallProgress = useMemo(() => {
    if (!activeCarePlan || activeCarePlan.goals.length === 0) return 0;

    const totalProgress = activeCarePlan.goals.reduce((sum, goal) => {
      const latestProgress = goal.progress[goal.progress.length - 1];
      return sum + (latestProgress?.progressPercentage || 0);
    }, 0);

    return Math.round(totalProgress / activeCarePlan.goals.length);
  }, [activeCarePlan]);

  // Render goal status badge
  const renderGoalStatus = (status: CareGoal['status']) => {
    const statusConfig = {
      active: { color: 'primary' as const, label: 'Active' },
      achieved: { color: 'success' as const, label: 'Achieved' },
      modified: { color: 'warning' as const, label: 'Modified' },
      discontinued: { color: 'error' as const, label: 'Discontinued' }
    };

    const config = statusConfig[status];
    return <UIBadge variant={config.color}>{config.label}</UIBadge>;
  };

  // Render priority badge
  const renderPriorityBadge = (priority: CareGoal['priority']) => {
    const priorityConfig = {
      low: { color: 'info' as const, label: 'Low' },
      medium: { color: 'warning' as const, label: 'Medium' },
      high: { color: 'error' as const, label: 'High' },
      critical: { color: 'error' as const, label: 'Critical' }
    };

    const config = priorityConfig[priority];
    return <UIBadge variant={config.color}>{config.label}</UIBadge>;
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <LoadingSpinner size="large" />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" component="h1" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <CarePlanIcon color="primary" />
          Care Plan Management
        </Typography>
        <Box display="flex" gap={1}>
          {!readOnly && (
            <>
              <Button
                variant="outlined"
                startIcon={<AddIcon />}
                onClick={() => createCarePlan()}
                disabled={savingChanges}
              >
                New Care Plan
              </Button>
              {activeCarePlan && (
                <Button
                  variant="contained"
                  startIcon={savingChanges ? <CircularProgress size={20} /> : <SaveIcon />}
                  onClick={() => updateCarePlan({ status: 'active' })}
                  disabled={savingChanges || activeCarePlan.status === 'active'}
                >
                  {savingChanges ? 'Saving...' : 'Activate Plan'}
                </Button>
              )}
            </>
          )}
        </Box>
      </Box>

      {/* Error Alert */}
      {error && (
        <UIAlert variant="error" sx={{ mb: 3 }}>
          <AlertTitle>Error</AlertTitle>
          {error}
        </UIAlert>
      )}

      {/* No Care Plan State */}
      {!activeCarePlan && carePlans.length === 0 && (
        <UICard>
          <CardContent sx={{ textAlign: 'center', py: 6 }}>
            <CarePlanIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              No Care Plan Found
            </Typography>
            <Typography variant="body2" color="textSecondary" paragraph>
              Create a care plan to start managing this resident's care goals and interventions.
            </Typography>
            {!readOnly && (
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={() => createCarePlan()}
                disabled={savingChanges}
              >
                Create Care Plan
              </Button>
            )}
          </CardContent>
        </UICard>
      )}

      {/* Active Care Plan */}
      {activeCarePlan && (
        <>
          {/* Care Plan Overview */}
          <UICard sx={{ mb: 3 }}>
            <CardContent>
              <Grid container spacing={3}>
                <Grid item xs={12} md={8}>
                  <Typography variant="h6" gutterBottom>
                    Care Plan Overview
                  </Typography>
                  <Grid container spacing={2}>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="textSecondary">
                        Status
                      </Typography>
                      <UIBadge variant={activeCarePlan.status === 'active' ? 'success' : 'warning'}>
                        {activeCarePlan.status.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </UIBadge>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="textSecondary">
                        Version
                      </Typography>
                      <Typography variant="body1">
                        v{activeCarePlan.version}
                      </Typography>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="textSecondary">
                        Goals
                      </Typography>
                      <Typography variant="body1">
                        {activeCarePlan.goals.length}
                      </Typography>
                    </Grid>
                    <Grid item xs={6} sm={3}>
                      <Typography variant="body2" color="textSecondary">
                        Next Review
                      </Typography>
                      <Typography variant="body1">
                        {new Date(activeCarePlan.nextReviewDate).toLocaleDateString()}
                      </Typography>
                    </Grid>
                  </Grid>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Typography variant="h6" gutterBottom>
                    Overall Progress
                  </Typography>
                  <Box display="flex" alignItems="center" gap={2}>
                    <LinearProgress
                      variant="determinate"
                      value={overallProgress}
                      sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}
                    />
                    <Typography variant="h6" color="primary">
                      {overallProgress}%
                    </Typography>
                  </Box>
                  <Typography variant="body2" color="textSecondary" sx={{ mt: 1 }}>
                    Based on {activeCarePlan.goals.length} active goals
                  </Typography>
                </Grid>
              </Grid>
            </CardContent>
          </UICard>

          {/* Navigation Tabs */}
          <Tabs
            value={activeTab}
            onChange={(_, newValue) => setActiveTab(newValue)}
            sx={{ mb: 3 }}
          >
            <Tab label="Overview" value="overview" />
            <Tab label={`Goals (${activeCarePlan.goals.length})`} value="goals" />
            <Tab label="Interventions" value="interventions" />
            <Tab label="Progress" value="progress" />
            <Tab label="Reviews" value="reviews" />
            {showFamilyView && <Tab label="Family View" value="family" />}
          </Tabs>      
    {/* Goals Tab */}
          {activeTab === 'goals' && (
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Box display="flex" justifyContent="between" alignItems="center" mb={2}>
                  <Typography variant="h6">
                    Care Goals
                  </Typography>
                  {!readOnly && (
                    <Button
                      variant="contained"
                      startIcon={<AddIcon />}
                      onClick={() => {
                        setEditingGoal({});
                        setShowGoalDialog(true);
                      }}
                    >
                      Add Goal
                    </Button>
                  )}
                </Box>
              </Grid>

              {activeCarePlan.goals.map(goal => (
                <Grid item xs={12} key={goal.id}>
                  <UICard>
                    <CardContent>
                      <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
                        <Box>
                          <Typography variant="h6" gutterBottom>
                            {goal.title}
                          </Typography>
                          <Box display="flex" gap={1} mb={1}>
                            {renderGoalStatus(goal.status)}
                            {renderPriorityBadge(goal.priority)}
                            <Chip
                              label={goal.category.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                              size="small"
                            />
                          </Box>
                        </Box>
                        {!readOnly && (
                          <Box display="flex" gap={1}>
                            <IconButton
                              size="small"
                              onClick={() => {
                                setEditingGoal(goal);
                                setShowGoalDialog(true);
                              }}
                            >
                              <EditIcon />
                            </IconButton>
                            <IconButton
                              size="small"
                              onClick={() => {
                                setSelectedGoal(goal);
                                setProgressEntry({ goalId: goal.id });
                                setShowProgressDialog(true);
                              }}
                            >
                              <ProgressIcon />
                            </IconButton>
                          </Box>
                        )}
                      </Box>

                      <Typography variant="body2" color="textSecondary" paragraph>
                        {goal.description}
                      </Typography>

                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="body2" color="textSecondary">
                            Target Date
                          </Typography>
                          <Typography variant="body1">
                            {new Date(goal.targetDate).toLocaleDateString()}
                          </Typography>
                        </Grid>
                        <Grid item xs={12} sm={6}>
                          <Typography variant="body2" color="textSecondary">
                            Progress
                          </Typography>
                          <Box display="flex" alignItems="center" gap={1}>
                            <LinearProgress
                              variant="determinate"
                              value={goal.progress[goal.progress.length - 1]?.progressPercentage || 0}
                              sx={{ flexGrow: 1, height: 6, borderRadius: 3 }}
                            />
                            <Typography variant="body2">
                              {goal.progress[goal.progress.length - 1]?.progressPercentage || 0}%
                            </Typography>
                          </Box>
                        </Grid>
                      </Grid>

                      {goal.measurableOutcomes.length > 0 && (
                        <Box mt={2}>
                          <Typography variant="subtitle2" gutterBottom>
                            Measurable Outcomes
                          </Typography>
                          <List dense>
                            {goal.measurableOutcomes.map(outcome => (
                              <ListItem key={outcome.id} sx={{ pl: 0 }}>
                                <ListItemText
                                  primary={outcome.description}
                                  secondary={`Target: ${outcome.targetValue} ${outcome.unit || ''} | Current: ${outcome.currentValue || 'Not measured'}`}
                                />
                              </ListItem>
                            ))}
                          </List>
                        </Box>
                      )}

                      {goal.interventions.length > 0 && (
                        <Box mt={2}>
                          <Typography variant="subtitle2" gutterBottom>
                            Interventions ({goal.interventions.length})
                          </Typography>
                          <Box display="flex" flexWrap="wrap" gap={0.5}>
                            {goal.interventions.map(intervention => (
                              <Chip
                                key={intervention.id}
                                label={intervention.title}
                                size="small"
                                color={intervention.status === 'active' ? 'primary' : 'default'}
                              />
                            ))}
                          </Box>
                        </Box>
                      )}
                    </CardContent>
                  </UICard>
                </Grid>
              ))}

              {activeCarePlan.goals.length === 0 && (
                <Grid item xs={12}>
                  <UICard>
                    <CardContent sx={{ textAlign: 'center', py: 4 }}>
                      <GoalIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                      <Typography variant="h6" gutterBottom>
                        No Goals Defined
                      </Typography>
                      <Typography variant="body2" color="textSecondary" paragraph>
                        Add care goals to create a comprehensive care plan for this resident.
                      </Typography>
                      {!readOnly && (
                        <Button
                          variant="contained"
                          startIcon={<AddIcon />}
                          onClick={() => {
                            setEditingGoal({});
                            setShowGoalDialog(true);
                          }}
                        >
                          Add First Goal
                        </Button>
                      )}
                    </CardContent>
                  </UICard>
                </Grid>
              )}
            </Grid>
          )}

          {/* Progress Tab */}
          {activeTab === 'progress' && (
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Typography variant="h6" gutterBottom>
                  Progress Overview
                </Typography>
              </Grid>

              {activeCarePlan.goals.map(goal => (
                <Grid item xs={12} md={6} key={goal.id}>
                  <UICard>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        {goal.title}
                      </Typography>
                      
                      <Box display="flex" alignItems="center" gap={2} mb={2}>
                        <LinearProgress
                          variant="determinate"
                          value={goal.progress[goal.progress.length - 1]?.progressPercentage || 0}
                          sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}
                        />
                        <Typography variant="h6">
                          {goal.progress[goal.progress.length - 1]?.progressPercentage || 0}%
                        </Typography>
                      </Box>

                      {goal.progress.length > 0 && (
                        <Box>
                          <Typography variant="subtitle2" gutterBottom>
                            Latest Progress Entry
                          </Typography>
                          <Typography variant="body2" color="textSecondary">
                            {new Date(goal.progress[goal.progress.length - 1].date).toLocaleDateString()}
                          </Typography>
                          <Typography variant="body2">
                            {goal.progress[goal.progress.length - 1].notes}
                          </Typography>
                        </Box>
                      )}

                      {!readOnly && (
                        <Box mt={2}>
                          <Button
                            size="small"
                            startIcon={<AddIcon />}
                            onClick={() => {
                              setSelectedGoal(goal);
                              setProgressEntry({ goalId: goal.id });
                              setShowProgressDialog(true);
                            }}
                          >
                            Record Progress
                          </Button>
                        </Box>
                      )}
                    </CardContent>
                  </UICard>
                </Grid>
              ))}
            </Grid>
          )}

          {/* Add Goal Dialog */}
          <Dialog
            open={showGoalDialog}
            onClose={() => setShowGoalDialog(false)}
            maxWidth="md"
            fullWidth
          >
            <DialogTitle>
              {editingGoal.id ? 'Edit Goal' : 'Add New Goal'}
            </DialogTitle>
            <DialogContent>
              <Grid container spacing={3} sx={{ mt: 1 }}>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Goal Title *"
                    value={editingGoal.title || ''}
                    onChange={(e) => setEditingGoal(prev => ({ ...prev, title: e.target.value }))}
                    required
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Description"
                    multiline
                    rows={3}
                    value={editingGoal.description || ''}
                    onChange={(e) => setEditingGoal(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Describe what this goal aims to achieve..."
                  />
                </Grid>

                <Grid item xs={12} sm={4}>
                  <FormControl fullWidth>
                    <InputLabel>Category</InputLabel>
                    <Select
                      value={editingGoal.category || 'physical'}
                      onChange={(e) => setEditingGoal(prev => ({ ...prev, category: e.target.value as any }))}
                      label="Category"
                    >
                      <MenuItem value="physical">Physical</MenuItem>
                      <MenuItem value="mental">Mental Health</MenuItem>
                      <MenuItem value="social">Social</MenuItem>
                      <MenuItem value="spiritual">Spiritual</MenuItem>
                      <MenuItem value="cognitive">Cognitive</MenuItem>
                      <MenuItem value="emotional">Emotional</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={4}>
                  <FormControl fullWidth>
                    <InputLabel>Priority</InputLabel>
                    <Select
                      value={editingGoal.priority || 'medium'}
                      onChange={(e) => setEditingGoal(prev => ({ ...prev, priority: e.target.value as any }))}
                      label="Priority"
                    >
                      <MenuItem value="low">Low</MenuItem>
                      <MenuItem value="medium">Medium</MenuItem>
                      <MenuItem value="high">High</MenuItem>
                      <MenuItem value="critical">Critical</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} sm={4}>
                  <TextField
                    fullWidth
                    label="Target Date"
                    type="date"
                    value={editingGoal.targetDate ? editingGoal.targetDate.toISOString().split('T')[0] : ''}
                    onChange={(e) => setEditingGoal(prev => ({ ...prev, targetDate: new Date(e.target.value) }))}
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button
                variant="outlined"
                onClick={() => setShowGoalDialog(false)}
              >
                Cancel
              </Button>
              <Button
                variant="contained"
                onClick={saveGoal}
                disabled={!editingGoal.title || savingChanges}
                startIcon={savingChanges ? <CircularProgress size={20} /> : <SaveIcon />}
              >
                {savingChanges ? 'Saving...' : 'Save Goal'}
              </Button>
            </DialogActions>
          </Dialog>

          {/* Record Progress Dialog */}
          <Dialog
            open={showProgressDialog}
            onClose={() => setShowProgressDialog(false)}
            maxWidth="sm"
            fullWidth
          >
            <DialogTitle>
              Record Progress
              {selectedGoal && (
                <Typography variant="subtitle2" color="textSecondary">
                  {selectedGoal.title}
                </Typography>
              )}
            </DialogTitle>
            <DialogContent>
              <Grid container spacing={3} sx={{ mt: 1 }}>
                <Grid item xs={12}>
                  <Typography variant="body2" color="textSecondary" gutterBottom>
                    Progress Percentage
                  </Typography>
                  <Box display="flex" alignItems="center" gap={2}>
                    <LinearProgress
                      variant="determinate"
                      value={progressEntry.progressPercentage || 0}
                      sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}
                    />
                    <TextField
                      type="number"
                      value={progressEntry.progressPercentage || 0}
                      onChange={(e) => setProgressEntry(prev => ({ 
                        ...prev, 
                        progressPercentage: Math.min(100, Math.max(0, parseInt(e.target.value) || 0))
                      }))}
                      InputProps={{ endAdornment: '%' }}
                      sx={{ width: 80 }}
                    />
                  </Box>
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Progress Notes *"
                    multiline
                    rows={4}
                    value={progressEntry.notes || ''}
                    onChange={(e) => setProgressEntry(prev => ({ ...prev, notes: e.target.value }))}
                    placeholder="Describe the progress made, any challenges encountered, and next steps..."
                    required
                  />
                </Grid>

                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Date"
                    type="date"
                    value={progressEntry.date ? progressEntry.date.toISOString().split('T')[0] : new Date().toISOString().split('T')[0]}
                    onChange={(e) => setProgressEntry(prev => ({ ...prev, date: new Date(e.target.value) }))}
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
              </Grid>
            </DialogContent>
            <DialogActions>
              <Button
                variant="outlined"
                onClick={() => setShowProgressDialog(false)}
              >
                Cancel
              </Button>
              <Button
                variant="contained"
                onClick={recordProgress}
                disabled={!progressEntry.notes || savingChanges}
                startIcon={savingChanges ? <CircularProgress size={20} /> : <SaveIcon />}
              >
                {savingChanges ? 'Recording...' : 'Record Progress'}
              </Button>
            </DialogActions>
          </Dialog>
        </>
      )}
    </Box>
  );
};

export default CarePlanManagement;