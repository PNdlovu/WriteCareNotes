/**
 * @fileoverview Resident Admission Interface for WriteCareNotes
 * @module ResidentAdmission
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Multi-step resident admission wizard providing comprehensive
 * data collection, validation, and integration with healthcare systems.
 * Supports emergency, planned, and respite admissions with full regulatory compliance.
 * 
 * @example
 * // Usage in resident management system
 * <ResidentAdmission
 *   admissionType="planned"
 *   onAdmissionComplete={handleAdmissionComplete}
 *   onAdmissionCancel={handleCancel}
 * />
 * 
 * @compliance
 * - CQC Admission Standards and Documentation Requirements
 * - Care Inspectorate Scotland Admission Procedures
 * - CIW Wales Admission and Assessment Standards
 * - RQIA Northern Ireland Admission Requirements
 * 
 * @security
 * - NHS number validation and verification
 * - Secure handling of personal and medical data
 * - Audit trails for all admission activities
 * - GDPR compliant data collection and processing
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button as MuiButton,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Alert,
  AlertTitle,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControlLabel,
  Checkbox,
  RadioGroup,
  Radio,
  CircularProgress,
  LinearProgress
} from '@mui/material';
import {
  Person as PersonIcon,
  LocalHospital as MedicalIcon,
  ContactPhone as ContactIcon,
  AccountBalance as FundingIcon,
  Assignment as AssessmentIcon,
  Favorite as PreferencesIcon,
  Description as DocumentsIcon,
  CheckCircle as CompleteIcon,
  ExpandMore as ExpandMoreIcon,
  Warning as WarningIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import { Button } from '../ui/Button';
import { Card as UICard } from '../ui/Card';
import { Badge as UIBadge } from '../ui/Badge';
import { Alert as UIAlert } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { DataTable } from '../ui/DataTable';

// Types and Interfaces
interface PersonalDetails {
  title: string;
  firstName: string;
  middleName?: string;
  lastName: string;
  preferredName?: string;
  dateOfBirth: Date;
  gender: 'male' | 'female' | 'other' | 'prefer_not_to_say';
  nhsNumber: string;
  nationality: string;
  ethnicity: string;
  religion?: string;
  maritalStatus: string;
  address: Address;
  phoneNumber?: string;
  email?: string;
  nextOfKin: NextOfKin;
}

interface Address {
  line1: string;
  line2?: string;
  city: string;
  county: string;
  postcode: string;
  country: string;
}

interface NextOfKin {
  name: string;
  relationship: string;
  phoneNumber: string;
  email?: string;
  address: Address;
  isEmergencyContact: boolean;
}

interface MedicalHistory {
  gpDetails: GPDetails;
  medicalConditions: MedicalCondition[];
  currentMedications: CurrentMedication[];
  allergies: Allergy[];
  immunizations: Immunization[];
  hospitalAdmissions: HospitalAdmission[];
  mentalHealthHistory: MentalHealthHistory;
  physicalDisabilities: PhysicalDisability[];
}

interface GPDetails {
  practiceName: string;
  gpName: string;
  address: Address;
  phoneNumber: string;
  nhsCode: string;
}

interface MedicalCondition {
  condition: string;
  diagnosisDate: Date;
  severity: 'mild' | 'moderate' | 'severe';
  status: 'active' | 'resolved' | 'chronic';
  notes?: string;
}

interface CurrentMedication {
  name: string;
  dosage: string;
  frequency: string;
  route: string;
  prescriber: string;
  startDate: Date;
  endDate?: Date;
  indication: string;
}

interface Allergy {
  allergen: string;
  reaction: string;
  severity: 'mild' | 'moderate' | 'severe' | 'life_threatening';
  notes?: string;
}

interface EmergencyContact {
  id: string;
  name: string;
  relationship: string;
  phoneNumber: string;
  email?: string;
  address: Address;
  isPrimary: boolean;
  canMakeDecisions: boolean;
  preferredContactMethod: 'phone' | 'email' | 'post';
  availability: string;
}

interface FundingArrangement {
  id: string;
  fundingSource: 'nhs' | 'local_authority' | 'private_pay' | 'insurance' | 'chc' | 'mixed';
  percentage: number;
  weeklyRate: number;
  startDate: Date;
  endDate?: Date;
  contactPerson: string;
  contactDetails: string;
  authorizationNumber?: string;
  reviewDate?: Date;
}

interface CareNeedsAssessment {
  mobilityLevel: 'independent' | 'walking_aid' | 'wheelchair' | 'bed_bound';
  cognitionLevel: 'no_impairment' | 'mild' | 'moderate' | 'severe';
  communicationNeeds: string[];
  personalCareNeeds: string[];
  nutritionalNeeds: string[];
  socialNeeds: string[];
  specialistNeeds: string[];
  riskFactors: string[];
}

interface ResidentPreferences {
  dietaryRequirements: string[];
  culturalRequirements: string[];
  religiousRequirements: string[];
  languagePreferences: string[];
  activityPreferences: string[];
  roomPreferences: string[];
  visitingPreferences: string[];
  communicationPreferences: string[];
}

interface LegalDocument {
  type: 'power_of_attorney' | 'advance_directive' | 'dnr' | 'mental_capacity_assessment' | 'court_order';
  documentName: string;
  dateCreated: Date;
  expiryDate?: Date;
  authorizedPerson?: string;
  notes?: string;
  fileUrl?: string;
}

interface AdmissionData {
  personalDetails: PersonalDetails;
  medicalHistory: MedicalHistory;
  emergencyContacts: EmergencyContact[];
  fundingArrangements: FundingArrangement[];
  careNeeds: CareNeedsAssessment;
  preferences: ResidentPreferences;
  legalDocuments: LegalDocument[];
  admissionNotes: string;
  riskAssessmentRequired: boolean;
  safeguardingConcerns: boolean;
}

interface ResidentAdmissionProps {
  onAdmissionComplete: (resident: any) => void;
  onAdmissionCancel: () => void;
  prefilledData?: Partial<AdmissionData>;
  admissionType: 'emergency' | 'planned' | 'respite';
  readOnly?: boolean;
}export 
const ResidentAdmission: React.FC<ResidentAdmissionProps> = ({
  onAdmissionComplete,
  onAdmissionCancel,
  prefilledData,
  admissionType,
  readOnly = false
}) => {
  // State Management
  const [activeStep, setActiveStep] = useState(0);
  const [admissionData, setAdmissionData] = useState<AdmissionData>({
    personalDetails: {
      title: '',
      firstName: '',
      lastName: '',
      dateOfBirth: new Date(),
      gender: 'prefer_not_to_say',
      nhsNumber: '',
      nationality: 'British',
      ethnicity: '',
      maritalStatus: 'single',
      address: {
        line1: '',
        city: '',
        county: '',
        postcode: '',
        country: 'United Kingdom'
      },
      nextOfKin: {
        name: '',
        relationship: '',
        phoneNumber: '',
        address: {
          line1: '',
          city: '',
          county: '',
          postcode: '',
          country: 'United Kingdom'
        },
        isEmergencyContact: true
      }
    },
    medicalHistory: {
      gpDetails: {
        practiceName: '',
        gpName: '',
        address: {
          line1: '',
          city: '',
          county: '',
          postcode: '',
          country: 'United Kingdom'
        },
        phoneNumber: '',
        nhsCode: ''
      },
      medicalConditions: [],
      currentMedications: [],
      allergies: [],
      immunizations: [],
      hospitalAdmissions: [],
      mentalHealthHistory: {
        hasHistory: false,
        conditions: [],
        currentTreatment: false,
        riskAssessmentRequired: false
      },
      physicalDisabilities: []
    },
    emergencyContacts: [],
    fundingArrangements: [],
    careNeeds: {
      mobilityLevel: 'independent',
      cognitionLevel: 'no_impairment',
      communicationNeeds: [],
      personalCareNeeds: [],
      nutritionalNeeds: [],
      socialNeeds: [],
      specialistNeeds: [],
      riskFactors: []
    },
    preferences: {
      dietaryRequirements: [],
      culturalRequirements: [],
      religiousRequirements: [],
      languagePreferences: ['English'],
      activityPreferences: [],
      roomPreferences: [],
      visitingPreferences: [],
      communicationPreferences: []
    },
    legalDocuments: [],
    admissionNotes: '',
    riskAssessmentRequired: false,
    safeguardingConcerns: false
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [nhsValidation, setNhsValidation] = useState<{loading: boolean, valid: boolean, message: string}>({
    loading: false,
    valid: false,
    message: ''
  });
  const [gpIntegration, setGpIntegration] = useState<{loading: boolean, data: any}>({
    loading: false,
    data: null
  });

  // Admission steps configuration
  const admissionSteps = [
    {
      label: 'Personal Details',
      description: 'Basic personal information and identification',
      icon: <PersonIcon />,
      required: true
    },
    {
      label: 'Medical History',
      description: 'Medical conditions, medications, and GP details',
      icon: <MedicalIcon />,
      required: true
    },
    {
      label: 'Emergency Contacts',
      description: 'Emergency contacts and next of kin information',
      icon: <ContactIcon />,
      required: true
    },
    {
      label: 'Funding Arrangements',
      description: 'Payment and funding source configuration',
      icon: <FundingIcon />,
      required: true
    },
    {
      label: 'Care Assessment',
      description: 'Care needs and risk assessment',
      icon: <AssessmentIcon />,
      required: true
    },
    {
      label: 'Preferences & Documents',
      description: 'Personal preferences and legal documents',
      icon: <PreferencesIcon />,
      required: false
    },
    {
      label: 'Review & Complete',
      description: 'Review all information and complete admission',
      icon: <CompleteIcon />,
      required: true
    }
  ];

  // Initialize with prefilled data
  useEffect(() => {
    if (prefilledData) {
      setAdmissionData(prev => ({
        ...prev,
        ...prefilledData
      }));
    }
  }, [prefilledData]);

  // NHS Number validation
  const validateNHSNumber = useCallback(async (nhsNumber: string) => {
    if (!nhsNumber || nhsNumber.length !== 10) {
      setNhsValidation({ loading: false, valid: false, message: 'NHS number must be 10 digits' });
      return;
    }

    setNhsValidation({ loading: true, valid: false, message: 'Validating NHS number...' });

    try {
      const response = await fetch(`/api/v1/residents/validate-nhs-number`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ nhsNumber })
      });

      if (!response.ok) {
        throw new Error('NHS number validation failed');
      }

      const result = await response.json();
      setNhsValidation({
        loading: false,
        valid: result.valid,
        message: result.valid ? 'NHS number is valid' : result.message || 'Invalid NHS number'
      });

    } catch (err) {
      setNhsValidation({
        loading: false,
        valid: false,
        message: 'Unable to validate NHS number at this time'
      });
    }
  }, []);

  // GP System integration
  const fetchGPData = useCallback(async (nhsNumber: string) => {
    if (!nhsNumber || !nhsValidation.valid) return;

    setGpIntegration({ loading: true, data: null });

    try {
      const response = await fetch(`/api/v1/healthcare-integration/gp-data`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ nhsNumber })
      });

      if (!response.ok) {
        throw new Error('GP data fetch failed');
      }

      const gpData = await response.json();
      setGpIntegration({ loading: false, data: gpData });

      // Pre-populate medical history if available
      if (gpData.medicalHistory) {
        setAdmissionData(prev => ({
          ...prev,
          medicalHistory: {
            ...prev.medicalHistory,
            ...gpData.medicalHistory
          }
        }));
      }

    } catch (err) {
      setGpIntegration({ loading: false, data: null });
      console.error('GP data fetch error:', err);
    }
  }, [nhsValidation.valid]);

  // Step validation
  const validateStep = useCallback((stepIndex: number): boolean => {
    const errors: Record<string, string> = {};

    switch (stepIndex) {
      case 0: // Personal Details
        if (!admissionData.personalDetails.firstName.trim()) {
          errors.firstName = 'First name is required';
        }
        if (!admissionData.personalDetails.lastName.trim()) {
          errors.lastName = 'Last name is required';
        }
        if (!admissionData.personalDetails.nhsNumber.trim()) {
          errors.nhsNumber = 'NHS number is required';
        } else if (!nhsValidation.valid) {
          errors.nhsNumber = 'Please validate NHS number';
        }
        if (!admissionData.personalDetails.address.line1.trim()) {
          errors.addressLine1 = 'Address is required';
        }
        if (!admissionData.personalDetails.address.postcode.trim()) {
          errors.postcode = 'Postcode is required';
        }
        break;

      case 1: // Medical History
        if (!admissionData.medicalHistory.gpDetails.practiceName.trim()) {
          errors.gpPractice = 'GP practice name is required';
        }
        if (!admissionData.medicalHistory.gpDetails.phoneNumber.trim()) {
          errors.gpPhone = 'GP practice phone number is required';
        }
        break;

      case 2: // Emergency Contacts
        if (admissionData.emergencyContacts.length === 0) {
          errors.emergencyContacts = 'At least one emergency contact is required';
        }
        break;

      case 3: // Funding Arrangements
        if (admissionData.fundingArrangements.length === 0) {
          errors.funding = 'At least one funding arrangement is required';
        }
        const totalPercentage = admissionData.fundingArrangements.reduce((sum, f) => sum + f.percentage, 0);
        if (totalPercentage !== 100) {
          errors.fundingPercentage = 'Funding percentages must total 100%';
        }
        break;

      case 4: // Care Assessment
        // Care assessment validation would be implemented here
        break;
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  }, [admissionData, nhsValidation.valid]);

  // Handle step navigation
  const handleNext = useCallback(() => {
    if (validateStep(activeStep)) {
      setActiveStep(prev => prev + 1);
    }
  }, [activeStep, validateStep]);

  const handleBack = useCallback(() => {
    setActiveStep(prev => prev - 1);
  }, []);

  const handleStepClick = useCallback((stepIndex: number) => {
    if (stepIndex < activeStep || validateStep(activeStep)) {
      setActiveStep(stepIndex);
    }
  }, [activeStep, validateStep]); 
 // Complete admission
  const completeAdmission = useCallback(async () => {
    if (!validateStep(activeStep)) return;

    setLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/v1/residents', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          ...admissionData,
          admissionType,
          admissionDate: new Date(),
          status: 'active'
        })
      });

      if (!response.ok) {
        throw new Error(`Admission failed: ${response.statusText}`);
      }

      const newResident = await response.json();
      onAdmissionComplete(newResident);

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Admission failed';
      setError(errorMessage);
      console.error('Admission error:', err);
    } finally {
      setLoading(false);
    }
  }, [admissionData, admissionType, activeStep, validateStep, onAdmissionComplete]);

  // Update personal details
  const updatePersonalDetails = useCallback((updates: Partial<PersonalDetails>) => {
    setAdmissionData(prev => ({
      ...prev,
      personalDetails: {
        ...prev.personalDetails,
        ...updates
      }
    }));
  }, []);

  // Update medical history
  const updateMedicalHistory = useCallback((updates: Partial<MedicalHistory>) => {
    setAdmissionData(prev => ({
      ...prev,
      medicalHistory: {
        ...prev.medicalHistory,
        ...updates
      }
    }));
  }, []);

  // Add emergency contact
  const addEmergencyContact = useCallback((contact: Omit<EmergencyContact, 'id'>) => {
    const newContact: EmergencyContact = {
      ...contact,
      id: `contact-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };

    setAdmissionData(prev => ({
      ...prev,
      emergencyContacts: [...prev.emergencyContacts, newContact]
    }));
  }, []);

  // Remove emergency contact
  const removeEmergencyContact = useCallback((contactId: string) => {
    setAdmissionData(prev => ({
      ...prev,
      emergencyContacts: prev.emergencyContacts.filter(c => c.id !== contactId)
    }));
  }, []);

  // Add funding arrangement
  const addFundingArrangement = useCallback((funding: Omit<FundingArrangement, 'id'>) => {
    const newFunding: FundingArrangement = {
      ...funding,
      id: `funding-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };

    setAdmissionData(prev => ({
      ...prev,
      fundingArrangements: [...prev.fundingArrangements, newFunding]
    }));
  }, []);

  // Calculate completion percentage
  const completionPercentage = useMemo(() => {
    const requiredSteps = admissionSteps.filter(step => step.required).length;
    const completedSteps = Math.min(activeStep + 1, requiredSteps);
    return Math.round((completedSteps / requiredSteps) * 100);
  }, [activeStep, admissionSteps]);

  // Render step content
  const renderStepContent = (stepIndex: number) => {
    switch (stepIndex) {
      case 0:
        return renderPersonalDetailsStep();
      case 1:
        return renderMedicalHistoryStep();
      case 2:
        return renderEmergencyContactsStep();
      case 3:
        return renderFundingArrangementsStep();
      case 4:
        return renderCareAssessmentStep();
      case 5:
        return renderPreferencesDocumentsStep();
      case 6:
        return renderReviewCompleteStep();
      default:
        return null;
    }
  };

  // Render personal details step
  const renderPersonalDetailsStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Personal Information
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          Please provide the resident's basic personal information. All fields marked with * are required.
        </Typography>
      </Grid>

      <Grid item xs={12} sm={3}>
        <FormControl fullWidth>
          <InputLabel>Title</InputLabel>
          <Select
            value={admissionData.personalDetails.title}
            onChange={(e) => updatePersonalDetails({ title: e.target.value })}
            label="Title"
          >
            <MenuItem value="Mr">Mr</MenuItem>
            <MenuItem value="Mrs">Mrs</MenuItem>
            <MenuItem value="Miss">Miss</MenuItem>
            <MenuItem value="Ms">Ms</MenuItem>
            <MenuItem value="Dr">Dr</MenuItem>
            <MenuItem value="Prof">Prof</MenuItem>
            <MenuItem value="Rev">Rev</MenuItem>
            <MenuItem value="Other">Other</MenuItem>
          </Select>
        </FormControl>
      </Grid>

      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth
          label="First Name *"
          value={admissionData.personalDetails.firstName}
          onChange={(e) => updatePersonalDetails({ firstName: e.target.value })}
          error={!!validationErrors.firstName}
          helperText={validationErrors.firstName}
          required
        />
      </Grid>

      <Grid item xs={12} sm={2}>
        <TextField
          fullWidth
          label="Middle Name"
          value={admissionData.personalDetails.middleName || ''}
          onChange={(e) => updatePersonalDetails({ middleName: e.target.value })}
        />
      </Grid>

      <Grid item xs={12} sm={3}>
        <TextField
          fullWidth
          label="Last Name *"
          value={admissionData.personalDetails.lastName}
          onChange={(e) => updatePersonalDetails({ lastName: e.target.value })}
          error={!!validationErrors.lastName}
          helperText={validationErrors.lastName}
          required
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="Preferred Name"
          value={admissionData.personalDetails.preferredName || ''}
          onChange={(e) => updatePersonalDetails({ preferredName: e.target.value })}
          helperText="Name the resident prefers to be called"
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="Date of Birth *"
          type="date"
          value={admissionData.personalDetails.dateOfBirth.toISOString().split('T')[0]}
          onChange={(e) => updatePersonalDetails({ dateOfBirth: new Date(e.target.value) })}
          InputLabelProps={{ shrink: true }}
          required
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <FormControl fullWidth>
          <InputLabel>Gender</InputLabel>
          <Select
            value={admissionData.personalDetails.gender}
            onChange={(e) => updatePersonalDetails({ gender: e.target.value as any })}
            label="Gender"
          >
            <MenuItem value="male">Male</MenuItem>
            <MenuItem value="female">Female</MenuItem>
            <MenuItem value="other">Other</MenuItem>
            <MenuItem value="prefer_not_to_say">Prefer not to say</MenuItem>
          </Select>
        </FormControl>
      </Grid>

      <Grid item xs={12} sm={6}>
        <Box>
          <TextField
            fullWidth
            label="NHS Number *"
            value={admissionData.personalDetails.nhsNumber}
            onChange={(e) => {
              const nhsNumber = e.target.value.replace(/\D/g, '').slice(0, 10);
              updatePersonalDetails({ nhsNumber });
              if (nhsNumber.length === 10) {
                validateNHSNumber(nhsNumber);
              }
            }}
            error={!!validationErrors.nhsNumber}
            helperText={validationErrors.nhsNumber || nhsValidation.message}
            required
            InputProps={{
              endAdornment: nhsValidation.loading ? <CircularProgress size={20} /> : null
            }}
          />
          {nhsValidation.valid && (
            <Box display="flex" alignItems="center" mt={1}>
              <CheckCircle color="success" fontSize="small" />
              <Typography variant="caption" color="success.main" ml={0.5}>
                NHS number validated
              </Typography>
            </Box>
          )}
        </Box>
      </Grid>

      <Grid item xs={12}>
        <Divider sx={{ my: 2 }} />
        <Typography variant="h6" gutterBottom>
          Address Information
        </Typography>
      </Grid>

      <Grid item xs={12}>
        <TextField
          fullWidth
          label="Address Line 1 *"
          value={admissionData.personalDetails.address.line1}
          onChange={(e) => updatePersonalDetails({
            address: { ...admissionData.personalDetails.address, line1: e.target.value }
          })}
          error={!!validationErrors.addressLine1}
          helperText={validationErrors.addressLine1}
          required
        />
      </Grid>

      <Grid item xs={12}>
        <TextField
          fullWidth
          label="Address Line 2"
          value={admissionData.personalDetails.address.line2 || ''}
          onChange={(e) => updatePersonalDetails({
            address: { ...admissionData.personalDetails.address, line2: e.target.value }
          })}
        />
      </Grid>

      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth
          label="City *"
          value={admissionData.personalDetails.address.city}
          onChange={(e) => updatePersonalDetails({
            address: { ...admissionData.personalDetails.address, city: e.target.value }
          })}
          required
        />
      </Grid>

      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth
          label="County *"
          value={admissionData.personalDetails.address.county}
          onChange={(e) => updatePersonalDetails({
            address: { ...admissionData.personalDetails.address, county: e.target.value }
          })}
          required
        />
      </Grid>

      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth
          label="Postcode *"
          value={admissionData.personalDetails.address.postcode}
          onChange={(e) => updatePersonalDetails({
            address: { ...admissionData.personalDetails.address, postcode: e.target.value.toUpperCase() }
          })}
          error={!!validationErrors.postcode}
          helperText={validationErrors.postcode}
          required
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="Phone Number"
          value={admissionData.personalDetails.phoneNumber || ''}
          onChange={(e) => updatePersonalDetails({ phoneNumber: e.target.value })}
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="Email Address"
          type="email"
          value={admissionData.personalDetails.email || ''}
          onChange={(e) => updatePersonalDetails({ email: e.target.value })}
        />
      </Grid>
    </Grid>
  );

  // Render medical history step
  const renderMedicalHistoryStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Medical History & GP Details
        </Typography>
        {gpIntegration.loading && (
          <Alert severity="info" sx={{ mb: 2 }}>
            <AlertTitle>Fetching GP Data</AlertTitle>
            Retrieving medical history from GP systems...
          </Alert>
        )}
        {gpIntegration.data && (
          <Alert severity="success" sx={{ mb: 2 }}>
            <AlertTitle>GP Data Retrieved</AlertTitle>
            Medical history has been pre-populated from GP records. Please review and update as needed.
          </Alert>
        )}
      </Grid>

      <Grid item xs={12}>
        <Typography variant="subtitle1" gutterBottom>
          GP Practice Details
        </Typography>
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="GP Practice Name *"
          value={admissionData.medicalHistory.gpDetails.practiceName}
          onChange={(e) => updateMedicalHistory({
            gpDetails: { ...admissionData.medicalHistory.gpDetails, practiceName: e.target.value }
          })}
          error={!!validationErrors.gpPractice}
          helperText={validationErrors.gpPractice}
          required
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="GP Name"
          value={admissionData.medicalHistory.gpDetails.gpName}
          onChange={(e) => updateMedicalHistory({
            gpDetails: { ...admissionData.medicalHistory.gpDetails, gpName: e.target.value }
          })}
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="Practice Phone Number *"
          value={admissionData.medicalHistory.gpDetails.phoneNumber}
          onChange={(e) => updateMedicalHistory({
            gpDetails: { ...admissionData.medicalHistory.gpDetails, phoneNumber: e.target.value }
          })}
          error={!!validationErrors.gpPhone}
          helperText={validationErrors.gpPhone}
          required
        />
      </Grid>

      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth
          label="NHS Practice Code"
          value={admissionData.medicalHistory.gpDetails.nhsCode}
          onChange={(e) => updateMedicalHistory({
            gpDetails: { ...admissionData.medicalHistory.gpDetails, nhsCode: e.target.value }
          })}
        />
      </Grid>

      <Grid item xs={12}>
        <Button
          variant="outlined"
          onClick={() => fetchGPData(admissionData.personalDetails.nhsNumber)}
          disabled={!nhsValidation.valid || gpIntegration.loading}
          startIcon={gpIntegration.loading ? <CircularProgress size={20} /> : <MedicalIcon />}
        >
          {gpIntegration.loading ? 'Fetching GP Data...' : 'Fetch Medical History from GP'}
        </Button>
      </Grid>

      <Grid item xs={12}>
        <Divider sx={{ my: 2 }} />
        <Typography variant="subtitle1" gutterBottom>
          Medical Conditions
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          List any current medical conditions, diagnoses, or ongoing health issues.
        </Typography>
      </Grid>

      {admissionData.medicalHistory.medicalConditions.map((condition, index) => (
        <Grid item xs={12} key={index}>
          <Card variant="outlined">
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <TextField
                    fullWidth
                    label="Condition/Diagnosis"
                    value={condition.condition}
                    onChange={(e) => {
                      const updatedConditions = [...admissionData.medicalHistory.medicalConditions];
                      updatedConditions[index] = { ...condition, condition: e.target.value };
                      updateMedicalHistory({ medicalConditions: updatedConditions });
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={3}>
                  <TextField
                    fullWidth
                    label="Diagnosis Date"
                    type="date"
                    value={condition.diagnosisDate.toISOString().split('T')[0]}
                    onChange={(e) => {
                      const updatedConditions = [...admissionData.medicalHistory.medicalConditions];
                      updatedConditions[index] = { ...condition, diagnosisDate: new Date(e.target.value) };
                      updateMedicalHistory({ medicalConditions: updatedConditions });
                    }}
                    InputLabelProps={{ shrink: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={2}>
                  <FormControl fullWidth>
                    <InputLabel>Severity</InputLabel>
                    <Select
                      value={condition.severity}
                      onChange={(e) => {
                        const updatedConditions = [...admissionData.medicalHistory.medicalConditions];
                        updatedConditions[index] = { ...condition, severity: e.target.value as any };
                        updateMedicalHistory({ medicalConditions: updatedConditions });
                      }}
                      label="Severity"
                    >
                      <MenuItem value="mild">Mild</MenuItem>
                      <MenuItem value="moderate">Moderate</MenuItem>
                      <MenuItem value="severe">Severe</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={2}>
                  <FormControl fullWidth>
                    <InputLabel>Status</InputLabel>
                    <Select
                      value={condition.status}
                      onChange={(e) => {
                        const updatedConditions = [...admissionData.medicalHistory.medicalConditions];
                        updatedConditions[index] = { ...condition, status: e.target.value as any };
                        updateMedicalHistory({ medicalConditions: updatedConditions });
                      }}
                      label="Status"
                    >
                      <MenuItem value="active">Active</MenuItem>
                      <MenuItem value="resolved">Resolved</MenuItem>
                      <MenuItem value="chronic">Chronic</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={1}>
                  <Button
                    color="error"
                    onClick={() => {
                      const updatedConditions = admissionData.medicalHistory.medicalConditions.filter((_, i) => i !== index);
                      updateMedicalHistory({ medicalConditions: updatedConditions });
                    }}
                  >
                    Remove
                  </Button>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      ))}

      <Grid item xs={12}>
        <Button
          variant="outlined"
          startIcon={<AddIcon />}
          onClick={() => {
            const newCondition: MedicalCondition = {
              condition: '',
              diagnosisDate: new Date(),
              severity: 'mild',
              status: 'active'
            };
            updateMedicalHistory({
              medicalConditions: [...admissionData.medicalHistory.medicalConditions, newCondition]
            });
          }}
        >
          Add Medical Condition
        </Button>
      </Grid>

      <Grid item xs={12}>
        <Divider sx={{ my: 2 }} />
        <Typography variant="subtitle1" gutterBottom>
          Allergies & Adverse Reactions
        </Typography>
      </Grid>

      {admissionData.medicalHistory.allergies.map((allergy, index) => (
        <Grid item xs={12} key={index}>
          <Card variant="outlined">
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <TextField
                    fullWidth
                    label="Allergen"
                    value={allergy.allergen}
                    onChange={(e) => {
                      const updatedAllergies = [...admissionData.medicalHistory.allergies];
                      updatedAllergies[index] = { ...allergy, allergen: e.target.value };
                      updateMedicalHistory({ allergies: updatedAllergies });
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={3}>
                  <TextField
                    fullWidth
                    label="Reaction"
                    value={allergy.reaction}
                    onChange={(e) => {
                      const updatedAllergies = [...admissionData.medicalHistory.allergies];
                      updatedAllergies[index] = { ...allergy, reaction: e.target.value };
                      updateMedicalHistory({ allergies: updatedAllergies });
                    }}
                  />
                </Grid>
                <Grid item xs={12} sm={3}>
                  <FormControl fullWidth>
                    <InputLabel>Severity</InputLabel>
                    <Select
                      value={allergy.severity}
                      onChange={(e) => {
                        const updatedAllergies = [...admissionData.medicalHistory.allergies];
                        updatedAllergies[index] = { ...allergy, severity: e.target.value as any };
                        updateMedicalHistory({ allergies: updatedAllergies });
                      }}
                      label="Severity"
                    >
                      <MenuItem value="mild">Mild</MenuItem>
                      <MenuItem value="moderate">Moderate</MenuItem>
                      <MenuItem value="severe">Severe</MenuItem>
                      <MenuItem value="life_threatening">Life Threatening</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={2}>
                  <Button
                    color="error"
                    onClick={() => {
                      const updatedAllergies = admissionData.medicalHistory.allergies.filter((_, i) => i !== index);
                      updateMedicalHistory({ allergies: updatedAllergies });
                    }}
                  >
                    Remove
                  </Button>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      ))}

      <Grid item xs={12}>
        <Button
          variant="outlined"
          startIcon={<AddIcon />}
          onClick={() => {
            const newAllergy: Allergy = {
              allergen: '',
              reaction: '',
              severity: 'mild'
            };
            updateMedicalHistory({
              allergies: [...admissionData.medicalHistory.allergies, newAllergy]
            });
          }}
        >
          Add Allergy
        </Button>
      </Grid>
    </Grid>
  ); 
 // Render emergency contacts step
  const renderEmergencyContactsStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Emergency Contacts
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          Please provide at least one emergency contact. These contacts will be notified in case of emergencies or significant changes in the resident's condition.
        </Typography>
        {validationErrors.emergencyContacts && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {validationErrors.emergencyContacts}
          </Alert>
        )}
      </Grid>

      {admissionData.emergencyContacts.map((contact, index) => (
        <Grid item xs={12} key={contact.id}>
          <Card variant="outlined">
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="subtitle1">
                  Emergency Contact {index + 1}
                  {contact.isPrimary && (
                    <Chip label="Primary" color="primary" size="small" sx={{ ml: 1 }} />
                  )}
                </Typography>
                <Button
                  color="error"
                  size="small"
                  onClick={() => removeEmergencyContact(contact.id)}
                >
                  Remove
                </Button>
              </Box>
              
              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Full Name *"
                    value={contact.name}
                    onChange={(e) => {
                      const updatedContacts = admissionData.emergencyContacts.map(c =>
                        c.id === contact.id ? { ...c, name: e.target.value } : c
                      );
                      setAdmissionData(prev => ({ ...prev, emergencyContacts: updatedContacts }));
                    }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Relationship *"
                    value={contact.relationship}
                    onChange={(e) => {
                      const updatedContacts = admissionData.emergencyContacts.map(c =>
                        c.id === contact.id ? { ...c, relationship: e.target.value } : c
                      );
                      setAdmissionData(prev => ({ ...prev, emergencyContacts: updatedContacts }));
                    }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Phone Number *"
                    value={contact.phoneNumber}
                    onChange={(e) => {
                      const updatedContacts = admissionData.emergencyContacts.map(c =>
                        c.id === contact.id ? { ...c, phoneNumber: e.target.value } : c
                      );
                      setAdmissionData(prev => ({ ...prev, emergencyContacts: updatedContacts }));
                    }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Email Address"
                    type="email"
                    value={contact.email || ''}
                    onChange={(e) => {
                      const updatedContacts = admissionData.emergencyContacts.map(c =>
                        c.id === contact.id ? { ...c, email: e.target.value } : c
                      );
                      setAdmissionData(prev => ({ ...prev, emergencyContacts: updatedContacts }));
                    }}
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={contact.isPrimary}
                        onChange={(e) => {
                          const updatedContacts = admissionData.emergencyContacts.map(c => ({
                            ...c,
                            isPrimary: c.id === contact.id ? e.target.checked : false
                          }));
                          setAdmissionData(prev => ({ ...prev, emergencyContacts: updatedContacts }));
                        }}
                      />
                    }
                    label="Primary Emergency Contact"
                  />
                </Grid>
                
                <Grid item xs={12}>
                  <FormControlLabel
                    control={
                      <Checkbox
                        checked={contact.canMakeDecisions}
                        onChange={(e) => {
                          const updatedContacts = admissionData.emergencyContacts.map(c =>
                            c.id === contact.id ? { ...c, canMakeDecisions: e.target.checked } : c
                          );
                          setAdmissionData(prev => ({ ...prev, emergencyContacts: updatedContacts }));
                        }}
                      />
                    }
                    label="Authorized to make care decisions"
                  />
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      ))}

      <Grid item xs={12}>
        <Button
          variant="outlined"
          startIcon={<AddIcon />}
          onClick={() => {
            const newContact: Omit<EmergencyContact, 'id'> = {
              name: '',
              relationship: '',
              phoneNumber: '',
              address: {
                line1: '',
                city: '',
                county: '',
                postcode: '',
                country: 'United Kingdom'
              },
              isPrimary: admissionData.emergencyContacts.length === 0,
              canMakeDecisions: false,
              preferredContactMethod: 'phone',
              availability: 'Any time'
            };
            addEmergencyContact(newContact);
          }}
        >
          Add Emergency Contact
        </Button>
      </Grid>
    </Grid>
  );

  // Render funding arrangements step
  const renderFundingArrangementsStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Funding Arrangements
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          Configure the funding sources for this resident's care. The total percentage must equal 100%.
        </Typography>
        {validationErrors.funding && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {validationErrors.funding}
          </Alert>
        )}
        {validationErrors.fundingPercentage && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {validationErrors.fundingPercentage}
          </Alert>
        )}
      </Grid>

      {admissionData.fundingArrangements.map((funding, index) => (
        <Grid item xs={12} key={funding.id}>
          <Card variant="outlined">
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="subtitle1">
                  Funding Source {index + 1}
                </Typography>
                <Button
                  color="error"
                  size="small"
                  onClick={() => {
                    const updatedFunding = admissionData.fundingArrangements.filter(f => f.id !== funding.id);
                    setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                  }}
                >
                  Remove
                </Button>
              </Box>
              
              <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <FormControl fullWidth>
                    <InputLabel>Funding Source *</InputLabel>
                    <Select
                      value={funding.fundingSource}
                      onChange={(e) => {
                        const updatedFunding = admissionData.fundingArrangements.map(f =>
                          f.id === funding.id ? { ...f, fundingSource: e.target.value as any } : f
                        );
                        setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                      }}
                      label="Funding Source *"
                      required
                    >
                      <MenuItem value="nhs">NHS</MenuItem>
                      <MenuItem value="local_authority">Local Authority</MenuItem>
                      <MenuItem value="private_pay">Private Pay</MenuItem>
                      <MenuItem value="insurance">Insurance</MenuItem>
                      <MenuItem value="chc">Continuing Healthcare (CHC)</MenuItem>
                      <MenuItem value="mixed">Mixed Funding</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                
                <Grid item xs={12} sm={2}>
                  <TextField
                    fullWidth
                    label="Percentage *"
                    type="number"
                    value={funding.percentage}
                    onChange={(e) => {
                      const percentage = Math.min(100, Math.max(0, parseInt(e.target.value) || 0));
                      const updatedFunding = admissionData.fundingArrangements.map(f =>
                        f.id === funding.id ? { ...f, percentage } : f
                      );
                      setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                    }}
                    InputProps={{ endAdornment: '%' }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={3}>
                  <TextField
                    fullWidth
                    label="Weekly Rate *"
                    type="number"
                    value={funding.weeklyRate}
                    onChange={(e) => {
                      const updatedFunding = admissionData.fundingArrangements.map(f =>
                        f.id === funding.id ? { ...f, weeklyRate: parseFloat(e.target.value) || 0 } : f
                      );
                      setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                    }}
                    InputProps={{ startAdornment: '£' }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={3}>
                  <TextField
                    fullWidth
                    label="Start Date *"
                    type="date"
                    value={funding.startDate.toISOString().split('T')[0]}
                    onChange={(e) => {
                      const updatedFunding = admissionData.fundingArrangements.map(f =>
                        f.id === funding.id ? { ...f, startDate: new Date(e.target.value) } : f
                      );
                      setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                    }}
                    InputLabelProps={{ shrink: true }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Contact Person"
                    value={funding.contactPerson}
                    onChange={(e) => {
                      const updatedFunding = admissionData.fundingArrangements.map(f =>
                        f.id === funding.id ? { ...f, contactPerson: e.target.value } : f
                      );
                      setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                    }}
                  />
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Authorization Number"
                    value={funding.authorizationNumber || ''}
                    onChange={(e) => {
                      const updatedFunding = admissionData.fundingArrangements.map(f =>
                        f.id === funding.id ? { ...f, authorizationNumber: e.target.value } : f
                      );
                      setAdmissionData(prev => ({ ...prev, fundingArrangements: updatedFunding }));
                    }}
                  />
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>
      ))}

      <Grid item xs={12}>
        <Button
          variant="outlined"
          startIcon={<AddIcon />}
          onClick={() => {
            const newFunding: Omit<FundingArrangement, 'id'> = {
              fundingSource: 'private_pay',
              percentage: 100 - admissionData.fundingArrangements.reduce((sum, f) => sum + f.percentage, 0),
              weeklyRate: 0,
              startDate: new Date(),
              contactPerson: '',
              contactDetails: ''
            };
            addFundingArrangement(newFunding);
          }}
        >
          Add Funding Source
        </Button>
      </Grid>

      {admissionData.fundingArrangements.length > 0 && (
        <Grid item xs={12}>
          <Card variant="outlined" sx={{ bgcolor: 'background.default' }}>
            <CardContent>
              <Typography variant="subtitle2" gutterBottom>
                Funding Summary
              </Typography>
              <Box display="flex" justifyContent="space-between" alignItems="center">
                <Typography variant="body2">
                  Total Percentage: {admissionData.fundingArrangements.reduce((sum, f) => sum + f.percentage, 0)}%
                </Typography>
                <Typography variant="body2">
                  Total Weekly Rate: £{admissionData.fundingArrangements.reduce((sum, f) => sum + f.weeklyRate, 0).toFixed(2)}
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      )}
    </Grid>
  );

  // Render care assessment step
  const renderCareAssessmentStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Care Needs Assessment
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          Please assess the resident's care needs to help create an appropriate care plan.
        </Typography>
      </Grid>

      <Grid item xs={12} sm={6}>
        <FormControl fullWidth>
          <InputLabel>Mobility Level</InputLabel>
          <Select
            value={admissionData.careNeeds.mobilityLevel}
            onChange={(e) => setAdmissionData(prev => ({
              ...prev,
              careNeeds: { ...prev.careNeeds, mobilityLevel: e.target.value as any }
            }))}
            label="Mobility Level"
          >
            <MenuItem value="independent">Independent</MenuItem>
            <MenuItem value="walking_aid">Walking Aid Required</MenuItem>
            <MenuItem value="wheelchair">Wheelchair User</MenuItem>
            <MenuItem value="bed_bound">Bed Bound</MenuItem>
          </Select>
        </FormControl>
      </Grid>

      <Grid item xs={12} sm={6}>
        <FormControl fullWidth>
          <InputLabel>Cognition Level</InputLabel>
          <Select
            value={admissionData.careNeeds.cognitionLevel}
            onChange={(e) => setAdmissionData(prev => ({
              ...prev,
              careNeeds: { ...prev.careNeeds, cognitionLevel: e.target.value as any }
            }))}
            label="Cognition Level"
          >
            <MenuItem value="no_impairment">No Impairment</MenuItem>
            <MenuItem value="mild">Mild Impairment</MenuItem>
            <MenuItem value="moderate">Moderate Impairment</MenuItem>
            <MenuItem value="severe">Severe Impairment</MenuItem>
          </Select>
        </FormControl>
      </Grid>

      <Grid item xs={12}>
        <Typography variant="subtitle2" gutterBottom>
          Personal Care Needs
        </Typography>
        <Grid container spacing={1}>
          {[
            'Washing and bathing',
            'Dressing and undressing',
            'Toileting assistance',
            'Continence management',
            'Oral hygiene',
            'Hair care',
            'Nail care',
            'Skin care'
          ].map(need => (
            <Grid item xs={12} sm={6} md={4} key={need}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={admissionData.careNeeds.personalCareNeeds.includes(need)}
                    onChange={(e) => {
                      const currentNeeds = admissionData.careNeeds.personalCareNeeds;
                      const updatedNeeds = e.target.checked
                        ? [...currentNeeds, need]
                        : currentNeeds.filter(n => n !== need);
                      setAdmissionData(prev => ({
                        ...prev,
                        careNeeds: { ...prev.careNeeds, personalCareNeeds: updatedNeeds }
                      }));
                    }}
                  />
                }
                label={need}
              />
            </Grid>
          ))}
        </Grid>
      </Grid>

      <Grid item xs={12}>
        <Typography variant="subtitle2" gutterBottom>
          Communication Needs
        </Typography>
        <Grid container spacing={1}>
          {[
            'Hearing impairment',
            'Visual impairment',
            'Speech difficulties',
            'Language barriers',
            'Cognitive communication issues',
            'Assistive technology required'
          ].map(need => (
            <Grid item xs={12} sm={6} md={4} key={need}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={admissionData.careNeeds.communicationNeeds.includes(need)}
                    onChange={(e) => {
                      const currentNeeds = admissionData.careNeeds.communicationNeeds;
                      const updatedNeeds = e.target.checked
                        ? [...currentNeeds, need]
                        : currentNeeds.filter(n => n !== need);
                      setAdmissionData(prev => ({
                        ...prev,
                        careNeeds: { ...prev.careNeeds, communicationNeeds: updatedNeeds }
                      }));
                    }}
                  />
                }
                label={need}
              />
            </Grid>
          ))}
        </Grid>
      </Grid>

      <Grid item xs={12}>
        <Typography variant="subtitle2" gutterBottom>
          Risk Factors
        </Typography>
        <Grid container spacing={1}>
          {[
            'Falls risk',
            'Pressure ulcer risk',
            'Malnutrition risk',
            'Dehydration risk',
            'Medication compliance issues',
            'Wandering/confusion',
            'Aggressive behavior',
            'Self-harm risk',
            'Choking risk',
            'Infection risk'
          ].map(risk => (
            <Grid item xs={12} sm={6} md={4} key={risk}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={admissionData.careNeeds.riskFactors.includes(risk)}
                    onChange={(e) => {
                      const currentRisks = admissionData.careNeeds.riskFactors;
                      const updatedRisks = e.target.checked
                        ? [...currentRisks, risk]
                        : currentRisks.filter(r => r !== risk);
                      setAdmissionData(prev => ({
                        ...prev,
                        careNeeds: { ...prev.careNeeds, riskFactors: updatedRisks }
                      }));
                    }}
                  />
                }
                label={risk}
              />
            </Grid>
          ))}
        </Grid>
      </Grid>

      <Grid item xs={12}>
        <FormControlLabel
          control={
            <Checkbox
              checked={admissionData.riskAssessmentRequired}
              onChange={(e) => setAdmissionData(prev => ({
                ...prev,
                riskAssessmentRequired: e.target.checked
              }))}
            />
          }
          label="Comprehensive risk assessment required upon admission"
        />
      </Grid>

      <Grid item xs={12}>
        <FormControlLabel
          control={
            <Checkbox
              checked={admissionData.safeguardingConcerns}
              onChange={(e) => setAdmissionData(prev => ({
                ...prev,
                safeguardingConcerns: e.target.checked
              }))}
            />
          }
          label="Safeguarding concerns identified"
        />
      </Grid>

      {admissionData.safeguardingConcerns && (
        <Grid item xs={12}>
          <Alert severity="warning">
            <AlertTitle>Safeguarding Concerns Identified</AlertTitle>
            Please ensure appropriate safeguarding procedures are followed and relevant authorities are notified as required.
          </Alert>
        </Grid>
      )}
    </Grid>
  );

  // Render preferences and documents step
  const renderPreferencesDocumentsStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Personal Preferences & Legal Documents
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          Record the resident's personal preferences and any relevant legal documents.
        </Typography>
      </Grid>

      <Grid item xs={12}>
        <Typography variant="subtitle2" gutterBottom>
          Dietary Requirements
        </Typography>
        <Grid container spacing={1}>
          {[
            'Vegetarian',
            'Vegan',
            'Halal',
            'Kosher',
            'Diabetic diet',
            'Low sodium',
            'Soft diet',
            'Pureed diet',
            'Thickened fluids',
            'Allergies/intolerances'
          ].map(requirement => (
            <Grid item xs={12} sm={6} md={4} key={requirement}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={admissionData.preferences.dietaryRequirements.includes(requirement)}
                    onChange={(e) => {
                      const current = admissionData.preferences.dietaryRequirements;
                      const updated = e.target.checked
                        ? [...current, requirement]
                        : current.filter(r => r !== requirement);
                      setAdmissionData(prev => ({
                        ...prev,
                        preferences: { ...prev.preferences, dietaryRequirements: updated }
                      }));
                    }}
                  />
                }
                label={requirement}
              />
            </Grid>
          ))}
        </Grid>
      </Grid>

      <Grid item xs={12}>
        <Typography variant="subtitle2" gutterBottom>
          Activity Preferences
        </Typography>
        <Grid container spacing={1}>
          {[
            'Reading',
            'Music',
            'Television',
            'Arts and crafts',
            'Gardening',
            'Exercise/physiotherapy',
            'Social activities',
            'Religious services',
            'Outings',
            'Visiting family/friends'
          ].map(activity => (
            <Grid item xs={12} sm={6} md={4} key={activity}>
              <FormControlLabel
                control={
                  <Checkbox
                    checked={admissionData.preferences.activityPreferences.includes(activity)}
                    onChange={(e) => {
                      const current = admissionData.preferences.activityPreferences;
                      const updated = e.target.checked
                        ? [...current, activity]
                        : current.filter(a => a !== activity);
                      setAdmissionData(prev => ({
                        ...prev,
                        preferences: { ...prev.preferences, activityPreferences: updated }
                      }));
                    }}
                  />
                }
                label={activity}
              />
            </Grid>
          ))}
        </Grid>
      </Grid>

      <Grid item xs={12}>
        <TextField
          fullWidth
          label="Additional Notes"
          multiline
          rows={4}
          value={admissionData.admissionNotes}
          onChange={(e) => setAdmissionData(prev => ({
            ...prev,
            admissionNotes: e.target.value
          }))}
          placeholder="Any additional information about the resident's needs, preferences, or circumstances..."
        />
      </Grid>
    </Grid>
  );

  // Render review and complete step
  const renderReviewCompleteStep = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>
          Review & Complete Admission
        </Typography>
        <Typography variant="body2" color="textSecondary" paragraph>
          Please review all the information below before completing the admission process.
        </Typography>
      </Grid>

      <Grid item xs={12}>
        <Accordion defaultExpanded>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">Personal Details</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" color="textSecondary">Name</Typography>
                <Typography variant="body1">
                  {admissionData.personalDetails.title} {admissionData.personalDetails.firstName} {admissionData.personalDetails.lastName}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" color="textSecondary">NHS Number</Typography>
                <Typography variant="body1">{admissionData.personalDetails.nhsNumber}</Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" color="textSecondary">Date of Birth</Typography>
                <Typography variant="body1">
                  {admissionData.personalDetails.dateOfBirth.toLocaleDateString()}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" color="textSecondary">Gender</Typography>
                <Typography variant="body1">
                  {admissionData.personalDetails.gender.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                </Typography>
              </Grid>
            </Grid>
          </AccordionDetails>
        </Accordion>
      </Grid>

      <Grid item xs={12}>
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">Emergency Contacts ({admissionData.emergencyContacts.length})</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {admissionData.emergencyContacts.map((contact, index) => (
              <Box key={contact.id} mb={2}>
                <Typography variant="body2" color="textSecondary">
                  Contact {index + 1} {contact.isPrimary && '(Primary)'}
                </Typography>
                <Typography variant="body1">
                  {contact.name} - {contact.relationship} - {contact.phoneNumber}
                </Typography>
              </Box>
            ))}
          </AccordionDetails>
        </Accordion>
      </Grid>

      <Grid item xs={12}>
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">Funding Arrangements ({admissionData.fundingArrangements.length})</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {admissionData.fundingArrangements.map((funding, index) => (
              <Box key={funding.id} mb={2}>
                <Typography variant="body1">
                  {funding.fundingSource.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())} - {funding.percentage}% (£{funding.weeklyRate}/week)
                </Typography>
              </Box>
            ))}
            <Typography variant="body2" color="textSecondary">
              Total: £{admissionData.fundingArrangements.reduce((sum, f) => sum + f.weeklyRate, 0).toFixed(2)}/week
            </Typography>
          </AccordionDetails>
        </Accordion>
      </Grid>

      <Grid item xs={12}>
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="subtitle1">Care Needs Summary</Typography>
          </AccordionSummary>
          <AccordionDetails>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" color="textSecondary">Mobility Level</Typography>
                <Typography variant="body1">
                  {admissionData.careNeeds.mobilityLevel.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body2" color="textSecondary">Cognition Level</Typography>
                <Typography variant="body1">
                  {admissionData.careNeeds.cognitionLevel.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                </Typography>
              </Grid>
              <Grid item xs={12}>
                <Typography variant="body2" color="textSecondary">Risk Factors</Typography>
                <Typography variant="body1">
                  {admissionData.careNeeds.riskFactors.length > 0 
                    ? admissionData.careNeeds.riskFactors.join(', ')
                    : 'None identified'
                  }
                </Typography>
              </Grid>
            </Grid>
          </AccordionDetails>
        </Accordion>
      </Grid>

      {error && (
        <Grid item xs={12}>
          <Alert severity="error">
            <AlertTitle>Admission Error</AlertTitle>
            {error}
          </Alert>
        </Grid>
      )}
    </Grid>
  );  retu
rn (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Box>
          <Typography variant="h4" component="h1" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <PersonIcon color="primary" />
            Resident Admission
          </Typography>
          <Typography variant="subtitle1" color="textSecondary">
            {admissionType.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())} Admission Process
          </Typography>
        </Box>
        <Box display="flex" alignItems="center" gap={2}>
          <Box textAlign="center">
            <Typography variant="caption" color="textSecondary">
              Progress
            </Typography>
            <LinearProgress
              variant="determinate"
              value={completionPercentage}
              sx={{ width: 100, mt: 0.5 }}
            />
            <Typography variant="caption" color="textSecondary">
              {completionPercentage}%
            </Typography>
          </Box>
          <Button
            variant="outlined"
            onClick={onAdmissionCancel}
            disabled={loading}
          >
            Cancel
          </Button>
        </Box>
      </Box>

      {/* Admission Type Alert */}
      {admissionType === 'emergency' && (
        <Alert severity="warning" sx={{ mb: 3 }}>
          <AlertTitle>Emergency Admission</AlertTitle>
          This is an emergency admission. Some information may be completed after the resident is settled.
        </Alert>
      )}

      {/* Stepper */}
      <Stepper activeStep={activeStep} orientation="vertical">
        {admissionSteps.map((step, index) => (
          <Step key={step.label}>
            <StepLabel
              onClick={() => handleStepClick(index)}
              sx={{ cursor: index <= activeStep ? 'pointer' : 'default' }}
              icon={
                <Box
                  sx={{
                    width: 40,
                    height: 40,
                    borderRadius: '50%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    bgcolor: index <= activeStep ? 'primary.main' : 'grey.300',
                    color: index <= activeStep ? 'white' : 'grey.600'
                  }}
                >
                  {step.icon}
                </Box>
              }
            >
              <Box>
                <Typography variant="h6">{step.label}</Typography>
                <Typography variant="body2" color="textSecondary">
                  {step.description}
                </Typography>
              </Box>
            </StepLabel>
            <StepContent>
              <Box sx={{ mt: 2, mb: 3 }}>
                {renderStepContent(index)}
              </Box>
              
              {/* Step Navigation */}
              <Box sx={{ mb: 2 }}>
                <Box display="flex" justifyContent="space-between">
                  <Button
                    disabled={activeStep === 0}
                    onClick={handleBack}
                    sx={{ mr: 1 }}
                  >
                    Back
                  </Button>
                  <Box>
                    {activeStep === admissionSteps.length - 1 ? (
                      <Button
                        variant="contained"
                        onClick={completeAdmission}
                        disabled={loading || !validateStep(activeStep)}
                        startIcon={loading ? <CircularProgress size={20} /> : <CompleteIcon />}
                      >
                        {loading ? 'Completing Admission...' : 'Complete Admission'}
                      </Button>
                    ) : (
                      <Button
                        variant="contained"
                        onClick={handleNext}
                        disabled={!validateStep(activeStep)}
                      >
                        Continue
                      </Button>
                    )}
                  </Box>
                </Box>
              </Box>
            </StepContent>
          </Step>
        ))}
      </Stepper>

      {/* Completion Message */}
      {activeStep === admissionSteps.length && (
        <Box textAlign="center" py={4}>
          <CheckCircle color="success" sx={{ fontSize: 64, mb: 2 }} />
          <Typography variant="h5" gutterBottom>
            Admission Process Complete
          </Typography>
          <Typography variant="body1" color="textSecondary">
            The resident has been successfully admitted to the care home.
          </Typography>
        </Box>
      )}
    </Box>
  );
};

export default ResidentAdmission;