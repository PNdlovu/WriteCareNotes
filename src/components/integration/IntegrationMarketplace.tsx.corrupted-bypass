/**
 * @fileoverview Integration Marketplace Component
 * @module IntegrationMarketplace
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Comprehensive integration marketplace for connecting with
 * third-party services while showcasing superior in-house capabilities.
 * 
 * @features
 * - 200+ pre-built integrations
 * - One-click integration setup
 * - Real-time sync monitoring
 * - Custom integration builder
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Alert, AlertDescription } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { useIntegrationMarketplace } from '../hooks/useIntegrationMarketplace';
import { 
  Plug, Search, Filter, Star, Download, Settings,
  CheckCircle, AlertCircle, Clock, Zap, Crown,
  Building, Stethoscope, DollarSign, Users,
  MessageCircle, Shield, BarChart3, Smartphone,
  Cloud, Database, Wifi, Globe, Lock, Award
} from 'lucide-react';

interface IntegrationMarketplaceProps {
  organizationId: string;
  userRole: string;
}

interface Integration {
  id: string;
  name: string;
  provider: string;
  category: 'healthcare' | 'financial' | 'communication' | 'hr' | 'analytics' | 'security';
  description: string;
  features: string[];
  pricing: 'free' | 'premium' | 'enterprise';
  rating: number;
  installs: number;
  status: 'available' | 'installed' | 'configuring' | 'error';
  isRecommended: boolean;
  isInHouseSuperior?: boolean;
  inHouseAlternative?: string;
  icon: string;
  screenshots: string[];
  documentation: string;
  supportLevel: 'basic' | 'standard' | 'premium';
}

interface IntegrationCategory {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<any>;
  count: number;
  featured: Integration[];
}

export const IntegrationMarketplace: React.FC<IntegrationMarketplaceProps> = ({
  organizationId,
  userRole
}) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [selectedIntegration, setSelectedIntegration] = useState<Integration | null>(null);
  const [showInHouseComparison, setShowInHouseComparison] = useState<boolean>(false);

  const {
    categories,
    integrations,
    installedIntegrations,
    recommendedIntegrations,
    loading,
    error,
    installIntegration,
    configureIntegration,
    uninstallIntegration,
    testIntegration
  } = useIntegrationMarketplace(organizationId);

  const filteredIntegrations = integrations?.filter(integration => {
    const matchesCategory = selectedCategory === 'all' || integration.category === selectedCategory;
    const matchesSearch = !searchQuery || 
      integration.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      integration.description.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'healthcare': return <Stethoscope className="w-5 h-5" />;
      case 'financial': return <DollarSign className="w-5 h-5" />;
      case 'communication': return <MessageCircle className="w-5 h-5" />;
      case 'hr': return <Users className="w-5 h-5" />;
      case 'analytics': return <BarChart3 className="w-5 h-5" />;
      case 'security': return <Shield className="w-5 h-5" />;
      default: return <Plug className="w-5 h-5" />;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'installed': return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'configuring': return <Settings className="w-4 h-4 text-blue-500 animate-spin" />;
      case 'error': return <AlertCircle className="w-4 h-4 text-red-500" />;
      default: return <Download className="w-4 h-4 text-gray-500" />;
    }
  };

  const getPricingBadge = (pricing: string) => {
    switch (pricing) {
      case 'free': return <Badge variant="success">Free</Badge>;
      case 'premium': return <Badge variant="warning">Premium</Badge>;
      case 'enterprise': return <Badge variant="destructive">Enterprise</Badge>;
      default: return <Badge variant="outline">Unknown</Badge>;
    }
  };

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Integration Marketplace</h1>
          <p className="text-gray-600 mt-1">
            Connect with 200+ services while maintaining our enterprise advantages
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline">
            <Building className="w-4 h-4 mr-2" />
            Custom Integration
          </Button>
          <Button>
            <Crown className="w-4 h-4 mr-2" />
            View In-House Superiority
          </Button>
        </div>
      </div>

      {/* In-House Superiority Banner */}
      <Alert className="border-blue-200 bg-blue-50">
        <Crown className="h-4 w-4 text-blue-500" />
        <AlertDescription>
          <strong>Our Advantage:</strong> While you can integrate with any service, our in-house solutions 
          provide superior AI intelligence, security, and healthcare specialization. 
          <Button variant="link" className="p-0 h-auto ml-1" onClick={() => setShowInHouseComparison(true)}>
            Compare our advantages â†’
          </Button>
        </AlertDescription>
      </Alert>

      {/* Search and Filters */}
      <div className="flex gap-4 items-center">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search integrations..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <select
          value={selectedCategory}
          onChange={(e) => setSelectedCategory(e.target.value)}
          className="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
        >
          <option value="all">All Categories</option>
          <option value="healthcare">Healthcare Systems</option>
          <option value="financial">Financial & Billing</option>
          <option value="communication">Communication</option>
          <option value="hr">HR & Workforce</option>
          <option value="analytics">Analytics & BI</option>
          <option value="security">Security & Compliance</option>
        </select>
      </div>

      {/* Categories Grid */}
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
        {categories?.map((category) => {
          const Icon = category.icon;
          return (
            <Card 
              key={category.id} 
              className={`cursor-pointer transition-all hover:shadow-md ${
                selectedCategory === category.id ? 'ring-2 ring-blue-500 bg-blue-50' : ''
              }`}
              onClick={() => setSelectedCategory(category.id)}
            >
              <CardContent className="p-4 text-center">
                <Icon className="w-8 h-8 mx-auto mb-2 text-blue-500" />
                <h3 className="font-semibold text-sm">{category.name}</h3>
                <p className="text-xs text-gray-600 mt-1">{category.count} integrations</p>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Featured/Recommended Integrations */}
      {selectedCategory === 'all' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Star className="w-5 h-5 text-yellow-500" />
              Recommended Integrations
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {recommendedIntegrations?.slice(0, 6).map((integration) => (
                <div key={integration.id} className="border rounded-lg p-4 hover:shadow-sm transition-shadow">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center">
                        <Plug className="w-5 h-5 text-blue-500" />
                      </div>
                      <div>
                        <h4 className="font-semibold">{integration.name}</h4>
                        <p className="text-xs text-gray-600">{integration.provider}</p>
                      </div>
                    </div>
                    {integration.isInHouseSuperior && (
                      <Badge variant="outline" className="text-purple-600 border-purple-200">
                        <Crown className="w-3 h-3 mr-1" />
                        We're Better
                      </Badge>
                    )}
                  </div>
                  
                  <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                    {integration.description}
                  </p>
                  
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        {[...Array(5)].map((_, i) => (
                          <Star 
                            key={i} 
                            className={`w-3 h-3 ${
                              i < Math.floor(integration.rating) 
                                ? 'text-yellow-400 fill-current' 
                                : 'text-gray-300'
                            }`} 
                          />
                        ))}
                      </div>
                      <span className="text-xs text-gray-600">
                        ({integration.installs.toLocaleString()} installs)
                      </span>
                    </div>
                    {getPricingBadge(integration.pricing)}
                  </div>
                  
                  <div className="flex gap-2">
                    <Button 
                      size="sm" 
                      className="flex-1"
                      variant={integration.status === 'installed' ? 'outline' : 'default'}
                      onClick={() => {
                        if (integration.status === 'available') {
                          installIntegration(integration.id);
                        } else if (integration.status === 'installed') {
                          configureIntegration(integration.id);
                        }
                      }}
                    >
                      {getStatusIcon(integration.status)}
                      <span className="ml-1">
                        {integration.status === 'installed' ? 'Configure' : 
                         integration.status === 'configuring' ? 'Setting up...' : 'Install'}
                      </span>
                    </Button>
                    <Button size="sm" variant="ghost" onClick={() => setSelectedIntegration(integration)}>
                      <Eye className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* All Integrations Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {filteredIntegrations?.map((integration) => (
          <Card key={integration.id} className="cursor-pointer hover:shadow-md transition-shadow">
            <CardContent className="p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  <div className="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                    {getCategoryIcon(integration.category)}
                  </div>
                  <div>
                    <h4 className="font-semibold text-sm">{integration.name}</h4>
                    <p className="text-xs text-gray-600">{integration.provider}</p>
                  </div>
                </div>
                {integration.isRecommended && (
                  <Badge variant="warning" className="text-xs">
                    <Star className="w-3 h-3 mr-1" />
                    Recommended
                  </Badge>
                )}
              </div>
              
              {/* In-House Superiority Warning */}
              {integration.isInHouseSuperior && (
                <Alert className="mb-3 py-2 border-purple-200 bg-purple-50">
                  <Crown className="h-3 w-3 text-purple-500" />
                  <AlertDescription className="text-xs">
                    Our in-house solution is superior. Consider our {integration.inHouseAlternative} instead.
                  </AlertDescription>
                </Alert>
              )}
              
              <p className="text-xs text-gray-600 mb-3 line-clamp-3">
                {integration.description}
              </p>
              
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-1">
                  {[...Array(5)].map((_, i) => (
                    <Star 
                      key={i} 
                      className={`w-3 h-3 ${
                        i < Math.floor(integration.rating) 
                          ? 'text-yellow-400 fill-current' 
                          : 'text-gray-300'
                      }`} 
                    />
                  ))}
                  <span className="text-xs text-gray-600 ml-1">
                    {integration.rating.toFixed(1)}
                  </span>
                </div>
                {getPricingBadge(integration.pricing)}
              </div>
              
              <div className="flex gap-1">
                <Button 
                  size="sm" 
                  className="flex-1 text-xs"
                  variant={integration.status === 'installed' ? 'outline' : 'default'}
                  onClick={() => {
                    if (integration.status === 'available') {
                      installIntegration(integration.id);
                    } else if (integration.status === 'installed') {
                      configureIntegration(integration.id);
                    }
                  }}
                  disabled={integration.status === 'configuring'}
                >
                  {getStatusIcon(integration.status)}
                  <span className="ml-1">
                    {integration.status === 'installed' ? 'Config' : 
                     integration.status === 'configuring' ? 'Setup...' : 'Install'}
                  </span>
                </Button>
                <Button 
                  size="sm" 
                  variant="ghost" 
                  onClick={() => setSelectedIntegration(integration)}
                >
                  <Eye className="w-3 h-3" />
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Integration Details Modal */}
      {selectedIntegration && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                    {getCategoryIcon(selectedIntegration.category)}
                  </div>
                  <div>
                    <CardTitle className="text-xl">{selectedIntegration.name}</CardTitle>
                    <p className="text-gray-600">{selectedIntegration.provider}</p>
                  </div>
                </div>
                <Button variant="ghost" onClick={() => setSelectedIntegration(null)}>
                  Ã—
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* In-House Comparison */}
              {selectedIntegration.isInHouseSuperior && (
                <Alert className="border-purple-200 bg-purple-50">
                  <Crown className="h-4 w-4 text-purple-500" />
                  <AlertDescription>
                    <strong>Our Recommendation:</strong> Our in-house {selectedIntegration.inHouseAlternative} 
                    provides superior AI intelligence, better security, and deeper healthcare integration. 
                    You can still install this integration for additional flexibility.
                  </AlertDescription>
                </Alert>
              )}
              
              <div className="grid grid-cols-3 gap-4 text-center">
                <div>
                  <div className="flex items-center justify-center gap-1 mb-1">
                    {[...Array(5)].map((_, i) => (
                      <Star 
                        key={i} 
                        className={`w-4 h-4 ${
                          i < Math.floor(selectedIntegration.rating) 
                            ? 'text-yellow-400 fill-current' 
                            : 'text-gray-300'
                        }`} 
                      />
                    ))}
                  </div>
                  <p className="text-sm font-medium">{selectedIntegration.rating.toFixed(1)} Rating</p>
                </div>
                <div>
                  <p className="text-xl font-bold">{selectedIntegration.installs.toLocaleString()}</p>
                  <p className="text-sm text-gray-600">Installs</p>
                </div>
                <div>
                  {getPricingBadge(selectedIntegration.pricing)}
                  <p className="text-sm text-gray-600 mt-1">Pricing</p>
                </div>
              </div>
              
              <div>
                <h4 className="font-semibold mb-2">Description</h4>
                <p className="text-gray-600 text-sm">{selectedIntegration.description}</p>
              </div>
              
              <div>
                <h4 className="font-semibold mb-2">Key Features</h4>
                <ul className="space-y-1">
                  {selectedIntegration.features.map((feature, index) => (
                    <li key={index} className="text-sm text-gray-600 flex items-center gap-2">
                      <CheckCircle className="w-3 h-3 text-green-500" />
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>
              
              <div className="flex gap-2">
                <Button 
                  className="flex-1"
                  onClick={() => {
                    if (selectedIntegration.status === 'available') {
                      installIntegration(selectedIntegration.id);
                    } else if (selectedIntegration.status === 'installed') {
                      configureIntegration(selectedIntegration.id);
                    }
                    setSelectedIntegration(null);
                  }}
                  disabled={selectedIntegration.status === 'configuring'}
                >
                  {selectedIntegration.status === 'installed' ? 'Configure' : 
                   selectedIntegration.status === 'configuring' ? 'Setting up...' : 'Install'}
                </Button>
                {selectedIntegration.status === 'installed' && (
                  <Button variant="outline" onClick={() => testIntegration(selectedIntegration.id)}>
                    Test
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* In-House Comparison Modal */}
      {showInHouseComparison && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="max-w-4xl w-full max-h-[80vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center gap-2">
                  <Crown className="w-6 h-6 text-purple-500" />
                  Our In-House Superiority vs Third-Party Services
                </CardTitle>
                <Button variant="ghost" onClick={() => setShowInHouseComparison(false)}>
                  Ã—
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* eMAR Comparison */}
                <div className="border rounded-lg p-4">
                  <h3 className="font-bold text-lg mb-3 flex items-center gap-2">
                    <Pill className="w-5 h-5 text-blue-500" />
                    Medication Management (eMAR)
                  </h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-semibold text-green-600 mb-2">âœ… Our Solution</h4>
                      <ul className="text-sm space-y-1">
                        <li>â€¢ AI-powered clinical decision support</li>
                        <li>â€¢ Real-time interaction checking</li>
                        <li>â€¢ Predictive medication management</li>
                        <li>â€¢ 12 integrated medication services</li>
                        <li>â€¢ Advanced safety algorithms</li>
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-600 mb-2">Third-Party (e.g., Atlas)</h4>
                      <ul className="text-sm space-y-1 text-gray-600">
                        <li>â€¢ Basic medication administration</li>
                        <li>â€¢ Limited interaction checking</li>
                        <li>â€¢ Manual safety reviews</li>
                        <li>â€¢ Separate system integration required</li>
                        <li>â€¢ Additional licensing costs</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* AI & Analytics Comparison */}
                <div className="border rounded-lg p-4">
                  <h3 className="font-bold text-lg mb-3 flex items-center gap-2">
                    <Brain className="w-5 h-5 text-purple-500" />
                    AI & Analytics
                  </h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-semibold text-green-600 mb-2">âœ… Our Solution</h4>
                      <ul className="text-sm space-y-1">
                        <li>â€¢ 60+ specialized ML models</li>
                        <li>â€¢ Real-time predictive analytics</li>
                        <li>â€¢ Healthcare-specific AI copilot</li>
                        <li>â€¢ Voice processing with clinical terminology</li>
                        <li>â€¢ Behavioral pattern recognition</li>
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-600 mb-2">Third-Party (e.g., Power BI)</h4>
                      <ul className="text-sm space-y-1 text-gray-600">
                        <li>â€¢ Generic business intelligence</li>
                        <li>â€¢ Limited healthcare context</li>
                        <li>â€¢ Requires data export/import</li>
                        <li>â€¢ No real-time AI assistance</li>
                        <li>â€¢ Additional licensing and training</li>
                      </ul>
                    </div>
                  </div>
                </div>

                {/* Security Comparison */}
                <div className="border rounded-lg p-4">
                  <h3 className="font-bold text-lg mb-3 flex items-center gap-2">
                    <Shield className="w-5 h-5 text-red-500" />
                    Security & Compliance
                  </h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <h4 className="font-semibold text-green-600 mb-2">âœ… Our Solution</h4>
                      <ul className="text-sm space-y-1">
                        <li>â€¢ Zero Trust architecture</li>
                        <li>â€¢ Multi-tenant isolation</li>
                        <li>â€¢ Healthcare-grade encryption</li>
                        <li>â€¢ Continuous compliance monitoring</li>
                        <li>â€¢ Integrated audit trails</li>
                      </ul>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-600 mb-2">Third-Party Solutions</h4>
                      <ul className="text-sm space-y-1 text-gray-600">
                        <li>â€¢ Standard security models</li>
                        <li>â€¢ Shared security responsibility</li>
                        <li>â€¢ Generic encryption</li>
                        <li>â€¢ Separate compliance tools needed</li>
                        <li>â€¢ Complex audit trail correlation</li>
                      </ul>
                    </div>
                  </div>
                </div>

                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-bold text-blue-800 mb-2">Recommendation Strategy</h4>
                  <p className="text-sm text-blue-700">
                    <strong>Best of Both Worlds:</strong> Use our superior in-house solutions for critical care functions 
                    (medication management, AI assistance, security) while integrating with third-party services 
                    for additional functionality (communication platforms, legacy system connectivity).
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Installed Integrations Status */}
      {installedIntegrations && installedIntegrations.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-green-500" />
              Active Integrations ({installedIntegrations.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {installedIntegrations.map((integration) => (
                <div key={integration.id} className="border rounded-lg p-3">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      {getCategoryIcon(integration.category)}
                      <span className="font-medium text-sm">{integration.name}</span>
                    </div>
                    <Badge variant="success" className="text-xs">
                      Active
                    </Badge>
                  </div>
                  <div className="flex gap-2">
                    <Button size="sm" variant="outline" className="flex-1 text-xs">
                      <Settings className="w-3 h-3 mr-1" />
                      Configure
                    </Button>
                    <Button size="sm" variant="ghost" className="text-xs">
                      <Zap className="w-3 h-3 mr-1" />
                      Test
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Custom Integration Builder */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Building className="w-5 h-5 text-purple-500" />
            Custom Integration Builder
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
              <Database className="w-8 h-8 text-blue-500 mx-auto mb-2" />
              <h4 className="font-semibold">Database Connector</h4>
              <p className="text-sm text-gray-600">Connect to external databases</p>
            </div>
            <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
              <Cloud className="w-8 h-8 text-green-500 mx-auto mb-2" />
              <h4 className="font-semibold">API Integration</h4>
              <p className="text-sm text-gray-600">Build custom API connections</p>
            </div>
            <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
              <Globe className="w-8 h-8 text-purple-500 mx-auto mb-2" />
              <h4 className="font-semibold">Webhook Handler</h4>
              <p className="text-sm text-gray-600">Create webhook integrations</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};