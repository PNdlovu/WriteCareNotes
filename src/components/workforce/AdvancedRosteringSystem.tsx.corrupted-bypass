/**
 * @fileoverview Advanced Rostering System Component
 * @module AdvancedRosteringSystem
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Intelligent rostering and scheduling system with AI-powered
 * optimization, skills matching, and compliance monitoring.
 * 
 * @features
 * - AI-powered shift optimization
 * - Skills-based staff matching
 * - Real-time availability tracking
 * - Compliance monitoring
 * - Automated overtime management
 */

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../ui/Card';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Alert, AlertDescription } from '../ui/Alert';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { useRosteringSystem } from '../hooks/useRosteringSystem';
import { 
  Calendar, Clock, Users, UserCheck, AlertTriangle,
  CheckCircle, TrendingUp, Brain, Zap, Star,
  Plus, Edit, Trash2, Copy, Send, Bell,
  Target, Award, Activity, Shield, Eye,
  BarChart3, Settings, Download, Upload
} from 'lucide-react';

interface RosteringSystemProps {
  organizationId: string;
  userRole: string;
}

interface StaffMember {
  id: string;
  name: string;
  role: string;
  skills: string[];
  availability: {
    monday: string[];
    tuesday: string[];
    wednesday: string[];
    thursday: string[];
    friday: string[];
    saturday: string[];
    sunday: string[];
  };
  contractedHours: number;
  currentHours: number;
  overtimeHours: number;
  performanceScore: number;
  certifications: string[];
  lastTraining: Date;
}

interface Shift {
  id: string;
  date: Date;
  startTime: string;
  endTime: string;
  role: string;
  assignedStaff: StaffMember | null;
  requiredSkills: string[];
  residents: number;
  acuityLevel: 'low' | 'medium' | 'high' | 'critical';
  status: 'draft' | 'published' | 'confirmed' | 'completed' | 'unfilled';
  notes?: string;
}

interface RosteringMetrics {
  staffUtilization: number;
  shiftCoverage: number;
  skillsMatch: number;
  overtimeHours: number;
  agencyUsage: number;
  costPerShift: number;
  staffSatisfaction: number;
  complianceScore: number;
}

interface AIRecommendation {
  id: string;
  type: 'optimization' | 'warning' | 'suggestion' | 'alert';
  title: string;
  description: string;
  impact: string;
  confidence: number;
  actionRequired: boolean;
  estimatedSavings?: number;
}

export const AdvancedRosteringSystem: React.FC<RosteringSystemProps> = ({
  organizationId,
  userRole
}) => {
  const [selectedView, setSelectedView] = useState<'calendar' | 'staff' | 'analytics' | 'ai_optimizer'>('calendar');
  const [selectedWeek, setSelectedWeek] = useState<Date>(new Date());
  const [selectedShift, setSelectedShift] = useState<Shift | null>(null);
  const [showAIRecommendations, setShowAIRecommendations] = useState<boolean>(true);

  const {
    weeklyRoster,
    staffMembers,
    rosteringMetrics,
    aiRecommendations,
    unfilledShifts,
    overtimeAlerts,
    complianceIssues,
    loading,
    error,
    assignStaffToShift,
    optimizeRoster,
    generateRoster,
    publishRoster,
    notifyStaff
  } = useRosteringSystem(organizationId, selectedWeek);

  const getDaysOfWeek = () => {
    const days = [];
    const startOfWeek = new Date(selectedWeek);
    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay()); // Start from Sunday
    
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      days.push(day);
    }
    return days;
  };

  const getShiftsForDay = (date: Date): Shift[] => {
    return weeklyRoster?.filter(shift => 
      shift.date.toDateString() === date.toDateString()
    ) || [];
  };

  const getAcuityColor = (acuity: string) => {
    switch (acuity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'confirmed': return 'bg-blue-100 text-blue-800';
      case 'published': return 'bg-purple-100 text-purple-800';
      case 'unfilled': return 'bg-red-100 text-red-800';
      case 'draft': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading && !weeklyRoster) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="lg" />
        <span className="ml-2">Loading rostering system...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-2">
            <Calendar className="w-8 h-8 text-blue-500" />
            Advanced Rostering & Scheduling
          </h1>
          <p className="text-gray-600 mt-1">
            AI-powered workforce optimization with skills matching and compliance monitoring
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => setShowAIRecommendations(!showAIRecommendations)}>
            <Brain className="w-4 h-4 mr-2" />
            {showAIRecommendations ? 'Hide' : 'Show'} AI Optimizer
          </Button>
          <Button onClick={optimizeRoster}>
            <Zap className="w-4 h-4 mr-2" />
            Optimize Roster
          </Button>
        </div>
      </div>

      {/* Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          {[
            { id: 'calendar', label: 'Roster Calendar', icon: Calendar },
            { id: 'staff', label: 'Staff Management', icon: Users },
            { id: 'analytics', label: 'Analytics', icon: BarChart3 },
            { id: 'ai_optimizer', label: 'AI Optimizer', icon: Brain }
          ].map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setSelectedView(tab.id as any)}
                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${
                  selectedView === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                <Icon className="w-4 h-4" />
                {tab.label}
              </button>
            );
          })}
        </nav>
      </div>

      {/* AI Recommendations Banner */}
      {showAIRecommendations && aiRecommendations && aiRecommendations.length > 0 && (
        <Alert className="border-purple-200 bg-purple-50">
          <Brain className="h-4 w-4 text-purple-500" />
          <AlertDescription>
            <strong>AI Optimizer:</strong> {aiRecommendations.length} optimization opportunities detected. 
            Potential savings: £{aiRecommendations.reduce((sum, rec) => sum + (rec.estimatedSavings || 0), 0).toLocaleString()} per month.
            <Button variant="link" className="p-0 h-auto ml-2">
              View recommendations →
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {/* Calendar View */}
      {selectedView === 'calendar' && (
        <>
          {/* Week Navigation */}
          <div className="flex justify-between items-center">
            <div className="flex items-center gap-4">
              <Button variant="outline" onClick={() => {
                const prevWeek = new Date(selectedWeek);
                prevWeek.setDate(prevWeek.getDate() - 7);
                setSelectedWeek(prevWeek);
              }}>
                ← Previous Week
              </Button>
              <h2 className="text-xl font-semibold">
                Week of {selectedWeek.toLocaleDateString()}
              </h2>
              <Button variant="outline" onClick={() => {
                const nextWeek = new Date(selectedWeek);
                nextWeek.setDate(nextWeek.getDate() + 7);
                setSelectedWeek(nextWeek);
              }}>
                Next Week →
              </Button>
            </div>
            <div className="flex gap-2">
              <Button variant="outline">
                <Copy className="w-4 h-4 mr-2" />
                Copy Previous Week
              </Button>
              <Button>
                <Plus className="w-4 h-4 mr-2" />
                Add Shift
              </Button>
            </div>
          </div>

          {/* Roster Grid */}
          <Card>
            <CardContent className="p-0">
              <div className="grid grid-cols-8 gap-0 border">
                {/* Header Row */}
                <div className="p-3 bg-gray-50 border-r font-semibold text-center">
                  Time
                </div>
                {getDaysOfWeek().map((day, index) => (
                  <div key={index} className="p-3 bg-gray-50 border-r text-center">
                    <div className="font-semibold">{day.toLocaleDateString('en-GB', { weekday: 'short' })}</div>
                    <div className="text-sm text-gray-600">{day.getDate()}</div>
                  </div>
                ))}

                {/* Shift Rows */}
                {['06:00', '14:00', '22:00'].map((shiftTime, timeIndex) => (
                  <React.Fragment key={shiftTime}>
                    <div className="p-3 bg-gray-50 border-r border-t font-medium text-center">
                      {shiftTime}
                      <div className="text-xs text-gray-600">
                        {timeIndex === 0 ? 'Early' : timeIndex === 1 ? 'Late' : 'Night'}
                      </div>
                    </div>
                    {getDaysOfWeek().map((day, dayIndex) => {
                      const dayShifts = getShiftsForDay(day).filter(shift => 
                        shift.startTime === shiftTime
                      );
                      
                      return (
                        <div key={`${timeIndex}-${dayIndex}`} className="border-r border-t min-h-[120px] p-2">
                          {dayShifts.map((shift) => (
                            <div 
                              key={shift.id}
                              className={`p-2 rounded mb-2 cursor-pointer hover:shadow-sm transition-shadow ${getStatusColor(shift.status)}`}
                              onClick={() => setSelectedShift(shift)}
                            >
                              <div className="flex items-center justify-between mb-1">
                                <Badge className={getAcuityColor(shift.acuityLevel)}>
                                  {shift.acuityLevel}
                                </Badge>
                                <span className="text-xs">{shift.residents} residents</span>
                              </div>
                              
                              {shift.assignedStaff ? (
                                <div>
                                  <p className="font-medium text-xs">{shift.assignedStaff.name}</p>
                                  <p className="text-xs text-gray-600">{shift.assignedStaff.role}</p>
                                  <div className="flex items-center gap-1 mt-1">
                                    {shift.assignedStaff.skills.slice(0, 2).map((skill, index) => (
                                      <Badge key={index} variant="outline" className="text-xs px-1 py-0">
                                        {skill}
                                      </Badge>
                                    ))}
                                  </div>
                                </div>
                              ) : (
                                <div className="text-center">
                                  <AlertTriangle className="w-4 h-4 text-red-500 mx-auto mb-1" />
                                  <p className="text-xs text-red-600">Unfilled</p>
                                  <Button size="sm" variant="outline" className="mt-1">
                                    <Plus className="w-3 h-3 mr-1" />
                                    Assign
                                  </Button>
                                </div>
                              )}
                            </div>
                          ))}
                          
                          {dayShifts.length === 0 && (
                            <div className="text-center py-4">
                              <Button size="sm" variant="ghost" className="text-gray-400">
                                <Plus className="w-3 h-3 mr-1" />
                                Add Shift
                              </Button>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </React.Fragment>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Roster Metrics */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardContent className="p-4 text-center">
                <UserCheck className="w-8 h-8 text-green-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-green-600">
                  {rosteringMetrics?.shiftCoverage || 0}%
                </div>
                <div className="text-sm text-gray-600">Shift Coverage</div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <Target className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-blue-600">
                  {rosteringMetrics?.skillsMatch || 0}%
                </div>
                <div className="text-sm text-gray-600">Skills Match</div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <Clock className="w-8 h-8 text-orange-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-orange-600">
                  {rosteringMetrics?.overtimeHours || 0}h
                </div>
                <div className="text-sm text-gray-600">Overtime This Week</div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4 text-center">
                <Award className="w-8 h-8 text-purple-500 mx-auto mb-2" />
                <div className="text-2xl font-bold text-purple-600">
                  {rosteringMetrics?.complianceScore || 0}%
                </div>
                <div className="text-sm text-gray-600">Compliance Score</div>
              </CardContent>
            </Card>
          </div>
        </>
      )}

      {/* Staff Management View */}
      {selectedView === 'staff' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Staff List */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Users className="w-5 h-5 text-blue-500" />
                    Staff Members
                  </CardTitle>
                  <div className="flex gap-2">
                    <Button variant="outline">
                      <Upload className="w-4 h-4 mr-2" />
                      Import
                    </Button>
                    <Button>
                      <Plus className="w-4 h-4 mr-2" />
                      Add Staff
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {staffMembers?.map((staff) => (
                    <div key={staff.id} className="border rounded-lg p-4 hover:shadow-sm transition-shadow">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                            <Users className="w-5 h-5 text-gray-600" />
                          </div>
                          <div>
                            <h4 className="font-semibold">{staff.name}</h4>
                            <p className="text-sm text-gray-600">{staff.role}</p>
                          </div>
                        </div>
                        <div className="text-right">
                          <Badge variant="outline" className={`${
                            staff.performanceScore >= 90 ? 'text-green-600' :
                            staff.performanceScore >= 75 ? 'text-blue-600' :
                            staff.performanceScore >= 60 ? 'text-yellow-600' : 'text-red-600'
                          }`}>
                            {staff.performanceScore}% Performance
                          </Badge>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-3 gap-4 text-sm mb-3">
                        <div>
                          <p className="text-gray-600">Contracted Hours</p>
                          <p className="font-medium">{staff.contractedHours}h/week</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Current Hours</p>
                          <p className="font-medium">{staff.currentHours}h</p>
                        </div>
                        <div>
                          <p className="text-gray-600">Overtime</p>
                          <p className={`font-medium ${staff.overtimeHours > 0 ? 'text-red-600' : 'text-green-600'}`}>
                            {staff.overtimeHours}h
                          </p>
                        </div>
                      </div>
                      
                      <div className="mb-3">
                        <p className="text-sm text-gray-600 mb-2">Skills & Certifications:</p>
                        <div className="flex flex-wrap gap-1">
                          {staff.skills.map((skill, index) => (
                            <Badge key={index} variant="outline" className="text-xs">
                              {skill}
                            </Badge>
                          ))}
                          {staff.certifications.map((cert, index) => (
                            <Badge key={index} variant="outline" className="text-xs bg-green-50 text-green-700">
                              <Award className="w-3 h-3 mr-1" />
                              {cert}
                            </Badge>
                          ))}
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <Button size="sm" variant="outline">
                          <Calendar className="w-3 h-3 mr-1" />
                          View Schedule
                        </Button>
                        <Button size="sm" variant="outline">
                          <Edit className="w-3 h-3 mr-1" />
                          Edit Details
                        </Button>
                        <Button size="sm" variant="outline">
                          <Activity className="w-3 h-3 mr-1" />
                          Performance
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Staff Analytics */}
          <div className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Workforce Analytics</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-center p-3 bg-blue-50 rounded-lg">
                  <Users className="w-6 h-6 text-blue-500 mx-auto mb-2" />
                  <div className="text-xl font-bold">{staffMembers?.length || 0}</div>
                  <div className="text-sm text-gray-600">Active Staff</div>
                </div>
                
                <div className="space-y-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Utilization Rate</span>
                    <span className="font-medium">{rosteringMetrics?.staffUtilization || 0}%</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Agency Usage</span>
                    <span className="font-medium">{rosteringMetrics?.agencyUsage || 0}%</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Avg Cost/Shift</span>
                    <span className="font-medium">£{rosteringMetrics?.costPerShift || 0}</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Staff Satisfaction</span>
                    <span className="font-medium">{rosteringMetrics?.staffSatisfaction || 0}%</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Alerts & Issues</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {unfilledShifts && unfilledShifts.length > 0 && (
                  <div className="p-3 border rounded-lg bg-red-50 border-red-200">
                    <div className="flex items-center gap-2 mb-2">
                      <AlertTriangle className="w-4 h-4 text-red-500" />
                      <span className="text-sm font-medium">Unfilled Shifts</span>
                    </div>
                    <p className="text-sm text-red-700">
                      {unfilledShifts.length} shifts need staff assignment
                    </p>
                  </div>
                )}
                
                {overtimeAlerts && overtimeAlerts.length > 0 && (
                  <div className="p-3 border rounded-lg bg-yellow-50 border-yellow-200">
                    <div className="flex items-center gap-2 mb-2">
                      <Clock className="w-4 h-4 text-yellow-500" />
                      <span className="text-sm font-medium">Overtime Alerts</span>
                    </div>
                    <p className="text-sm text-yellow-700">
                      {overtimeAlerts.length} staff approaching overtime limits
                    </p>
                  </div>
                )}
                
                {complianceIssues && complianceIssues.length > 0 && (
                  <div className="p-3 border rounded-lg bg-orange-50 border-orange-200">
                    <div className="flex items-center gap-2 mb-2">
                      <Shield className="w-4 h-4 text-orange-500" />
                      <span className="text-sm font-medium">Compliance Issues</span>
                    </div>
                    <p className="text-sm text-orange-700">
                      {complianceIssues.length} compliance items need attention
                    </p>
                  </div>
                )}
                
                <Button className="w-full" variant="outline">
                  <Bell className="w-4 h-4 mr-2" />
                  Configure Alerts
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      )}

      {/* AI Optimizer View */}
      {selectedView === 'ai_optimizer' && (
        <div className="space-y-6">
          {/* AI Optimization Header */}
          <Card className="bg-gradient-to-r from-purple-50 to-blue-50">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
                    <Brain className="w-6 h-6 text-purple-500" />
                    AI Workforce Optimizer
                  </h2>
                  <p className="text-gray-600">Intelligent scheduling with predictive analytics</p>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-purple-600 mb-1">
                    £{(aiRecommendations?.reduce((sum, rec) => sum + (rec.estimatedSavings || 0), 0) || 0).toLocaleString()}
                  </div>
                  <p className="text-sm text-gray-600">Potential Monthly Savings</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* AI Recommendations */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {aiRecommendations?.map((recommendation) => (
              <Card key={recommendation.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2 text-lg">
                      <Zap className="w-5 h-5 text-purple-500" />
                      {recommendation.title}
                    </CardTitle>
                    <Badge className={`${
                      recommendation.confidence >= 90 ? 'bg-green-100 text-green-800' :
                      recommendation.confidence >= 75 ? 'bg-blue-100 text-blue-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}>
                      {recommendation.confidence}% confidence
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Badge variant="outline" className="mb-2">
                      {recommendation.type}
                    </Badge>
                    <p className="text-gray-700">{recommendation.description}</p>
                  </div>
                  
                  <div className="bg-blue-50 p-3 rounded-lg">
                    <p className="text-sm text-blue-800">
                      <strong>Expected Impact:</strong> {recommendation.impact}
                    </p>
                    {recommendation.estimatedSavings && (
                      <p className="text-sm text-green-700 mt-1">
                        <strong>Estimated Savings:</strong> £{recommendation.estimatedSavings.toLocaleString()}/month
                      </p>
                    )}
                  </div>
                  
                  {recommendation.actionRequired && (
                    <div className="flex gap-2">
                      <Button className="flex-1">
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Implement
                      </Button>
                      <Button variant="outline">
                        <Eye className="w-4 h-4 mr-2" />
                        Details
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Optimization Controls */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="w-5 h-5 text-blue-500" />
                Optimization Controls
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                  <Zap className="w-8 h-8 text-purple-500 mx-auto mb-2" />
                  <h4 className="font-semibold">Auto-Optimize</h4>
                  <p className="text-sm text-gray-600">AI optimizes shifts automatically</p>
                  <Button size="sm" className="mt-2">Enable</Button>
                </div>
                
                <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                  <Target className="w-8 h-8 text-blue-500 mx-auto mb-2" />
                  <h4 className="font-semibold">Skills Matching</h4>
                  <p className="text-sm text-gray-600">Match staff skills to shift requirements</p>
                  <Button size="sm" variant="outline" className="mt-2">Configure</Button>
                </div>
                
                <div className="text-center p-4 border rounded-lg hover:shadow-sm cursor-pointer">
                  <Shield className="w-8 h-8 text-green-500 mx-auto mb-2" />
                  <h4 className="font-semibold">Compliance Check</h4>
                  <p className="text-sm text-gray-600">Ensure all shifts meet regulations</p>
                  <Button size="sm" variant="outline" className="mt-2">Verify</Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Analytics View */}
      {selectedView === 'analytics' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-blue-500" />
                Workforce Efficiency Trends
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <AreaChart data={[
                  { week: 'Week 1', efficiency: 87, satisfaction: 4.2, coverage: 94 },
                  { week: 'Week 2', efficiency: 89, satisfaction: 4.3, coverage: 96 },
                  { week: 'Week 3', efficiency: 91, satisfaction: 4.4, coverage: 98 },
                  { week: 'Week 4', efficiency: 93, satisfaction: 4.5, coverage: 97 }
                ]}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="week" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Area type="monotone" dataKey="efficiency" stroke="#8884d8" fill="#8884d8" fillOpacity={0.6} name="Efficiency %" />
                  <Area type="monotone" dataKey="coverage" stroke="#82ca9d" fill="#82ca9d" fillOpacity={0.6} name="Coverage %" />
                </AreaChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-green-500" />
                Cost Analysis
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={[
                  { category: 'Regular Hours', cost: 45000, budget: 50000 },
                  { category: 'Overtime', cost: 8000, budget: 10000 },
                  { category: 'Agency Staff', cost: 12000, budget: 15000 },
                  { category: 'Training', cost: 3000, budget: 5000 }
                ]}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="category" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`£${value.toLocaleString()}`, '']} />
                  <Legend />
                  <Bar dataKey="cost" fill="#8884d8" name="Actual Cost" />
                  <Bar dataKey="budget" fill="#82ca9d" name="Budget" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Shift Detail Modal */}
      {selectedShift && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>
                  Shift Details - {selectedShift.date.toLocaleDateString()} {selectedShift.startTime}
                </CardTitle>
                <Button variant="ghost" onClick={() => setSelectedShift(null)}>
                  ×
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-semibold mb-2">Shift Information</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Date:</span>
                      <span className="font-medium">{selectedShift.date.toLocaleDateString()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Time:</span>
                      <span className="font-medium">{selectedShift.startTime} - {selectedShift.endTime}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Role Required:</span>
                      <span className="font-medium">{selectedShift.role}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Residents:</span>
                      <span className="font-medium">{selectedShift.residents}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Acuity Level:</span>
                      <Badge className={getAcuityColor(selectedShift.acuityLevel)}>
                        {selectedShift.acuityLevel}
                      </Badge>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-2">Assignment</h4>
                  {selectedShift.assignedStaff ? (
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Assigned to:</span>
                        <span className="font-medium">{selectedShift.assignedStaff.name}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Role:</span>
                        <span className="font-medium">{selectedShift.assignedStaff.role}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Performance:</span>
                        <Badge variant="outline">
                          {selectedShift.assignedStaff.performanceScore}%
                        </Badge>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center p-4 border-2 border-dashed border-red-300 rounded-lg">
                      <AlertTriangle className="w-8 h-8 text-red-500 mx-auto mb-2" />
                      <p className="text-sm text-red-600 font-medium">Shift Unfilled</p>
                      <Button size="sm" className="mt-2">
                        <Plus className="w-3 h-3 mr-1" />
                        Assign Staff
                      </Button>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h4 className="font-semibold mb-2">Required Skills</h4>
                <div className="flex flex-wrap gap-2">
                  {selectedShift.requiredSkills.map((skill, index) => (
                    <Badge key={index} variant="outline">
                      {skill}
                    </Badge>
                  ))}
                </div>
              </div>
              
              {selectedShift.notes && (
                <div>
                  <h4 className="font-semibold mb-2">Notes</h4>
                  <p className="text-sm text-gray-600 p-3 bg-gray-50 rounded">
                    {selectedShift.notes}
                  </p>
                </div>
              )}
              
              <div className="flex gap-2">
                <Button className="flex-1">
                  <Edit className="w-4 h-4 mr-2" />
                  Edit Shift
                </Button>
                <Button className="flex-1" variant="outline">
                  <Copy className="w-4 h-4 mr-2" />
                  Duplicate
                </Button>
                <Button variant="outline">
                  <Trash2 className="w-4 h-4 mr-2" />
                  Delete
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};