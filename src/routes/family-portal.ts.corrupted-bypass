/**
 * @fileoverview Family Portal API Routes
 * @module family-portal
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Comprehensive family portal API providing real-time updates,
 * communication, care plan access, and digital consent management.
 * 
 * @compliance
 * - CQC Regulation 10 - Dignity and respect
 * - CQC Regulation 11 - Need for consent
 * - GDPR and Data Protection Act 2018
 * - Mental Capacity Act 2005
 */

import { Router, Request, Response } from 'express';
import { FamilyPortalService } from '../services/family-portal.service';
import { FamilyEngagementService } from '../services/family-engagement/FamilyEngagementService';
import { AuditTrailService } from '../services/audit/AuditTrailService';
import { NotificationService } from '../services/notifications/NotificationService';
import { EncryptionService } from '../services/encryption/EncryptionService';
import { authMiddleware } from '../middleware/auth.middleware';
import { rbacMiddleware } from '../middleware/rbac.middleware';
import { validateRequest } from '../middleware/validation.middleware';
import { rateLimitMiddleware } from '../middleware/rate-limit.middleware';
import { familyPortalSchemas } from '../schemas/family-portal.schemas';

const router = Router();

// Apply authentication and rate limiting to all routes
router.use(authMiddleware);
router.use(rateLimitMiddleware({ windowMs: 15 * 60 * 1000, max: 100 })); // 100 requests per 15 minutes

/**
 * @route GET /api/family-portal/updates
 * @desc Get real-time updates for family members
 * @access Family Members
 */
router.get('/updates', 
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getUpdates),
  async (req: Request, res: Response) => {
    try {
      const { residentId, limit = 10, type } = req.query;
      const familyId = req.user.id;

      const updates = await FamilyEngagementService.getRecentUpdates(
        residentId as string,
        familyId,
        parseInt(limit as string),
        type as string
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Updates',
        entityId: `updates_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          limit,
          type,
          count: updates.length,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: updates,
        message: 'Updates retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting family updates:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve updates',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route POST /api/family-portal/consent
 * @desc Submit digital consent for family access
 * @access Family Members
 */
router.post('/consent',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.submitConsent),
  async (req: Request, res: Response) => {
    try {
      const { residentId, consentType, granted, digitalSignature, witnessId } = req.body;
      const familyId = req.user.id;

      const consent = await FamilyPortalService.submitDigitalConsent({
        residentId,
        familyId,
        consentType,
        granted,
        digitalSignature,
        witnessId,
        submittedAt: new Date(),
        ipAddress: req.ip,
        userAgent: req.get('User-Agent'),
      });

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Consent',
        entityId: consent.id,
        action: 'CREATE',
        details: {
          residentId,
          familyId,
          consentType,
          granted,
          witnessId,
        },
        userId: familyId,
      });

      res.status(201).json({
        success: true,
        data: consent,
        message: 'Consent submitted successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error submitting consent:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to submit consent',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route POST /api/family-portal/messages
 * @desc Send message to care team
 * @access Family Members
 */
router.post('/messages',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.sendMessage),
  async (req: Request, res: Response) => {
    try {
      const { residentId, subject, content, priority = 'normal', attachments } = req.body;
      const familyId = req.user.id;

      const message = await FamilyEngagementService.sendFamilyMessage(
        familyId,
        residentId,
        { subject, content, priority }
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Message',
        entityId: message.id,
        action: 'CREATE',
        details: {
          residentId,
          familyId,
          subject,
          priority,
          hasAttachments: !!attachments?.length,
        },
        userId: familyId,
      });

      res.status(201).json({
        success: true,
        data: message,
        message: 'Message sent successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error sending message:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to send message',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/careplan
 * @desc Get resident care plan (read-only access)
 * @access Family Members
 */
router.get('/careplan',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getCarePlan),
  async (req: Request, res: Response) => {
    try {
      const { residentId } = req.query;
      const familyId = req.user.id;

      const carePlan = await FamilyPortalService.getCarePlanForFamily(
        residentId as string,
        familyId
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'CarePlan',
        entityId: `careplan_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          accessLevel: 'read_only',
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: carePlan,
        message: 'Care plan retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting care plan:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve care plan',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/activities
 * @desc Get daily wellbeing and activity logs
 * @access Family Members
 */
router.get('/activities',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getActivities),
  async (req: Request, res: Response) => {
    try {
      const { residentId, date, days = 7 } = req.query;
      const familyId = req.user.id;

      const activities = await FamilyPortalService.getDailyActivities(
        residentId as string,
        familyId,
        date ? new Date(date as string) : new Date(),
        parseInt(days as string)
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Activities',
        entityId: `activities_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          date,
          days,
          count: activities.length,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: activities,
        message: 'Activities retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting activities:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve activities',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/wellbeing
 * @desc Get daily wellbeing summary
 * @access Family Members
 */
router.get('/wellbeing',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getWellbeing),
  async (req: Request, res: Response) => {
    try {
      const { residentId, date } = req.query;
      const familyId = req.user.id;

      const wellbeing = await FamilyPortalService.getDailyWellbeing(
        residentId as string,
        familyId,
        date ? new Date(date as string) : new Date()
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Wellbeing',
        entityId: `wellbeing_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          date,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: wellbeing,
        message: 'Wellbeing data retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting wellbeing data:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve wellbeing data',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route POST /api/family-portal/video-call-request
 * @desc Request video call with resident
 * @access Family Members
 */
router.post('/video-call-request',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.requestVideoCall),
  async (req: Request, res: Response) => {
    try {
      const { residentId, preferredTime, duration, participants, reason } = req.body;
      const familyId = req.user.id;

      const request = await FamilyEngagementService.requestVideoCall(
        familyId,
        residentId,
        { preferredTime: new Date(preferredTime), duration, participants }
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'VideoCallRequest',
        entityId: request.id,
        action: 'CREATE',
        details: {
          residentId,
          familyId,
          preferredTime,
          duration,
          participants: participants.length,
          reason,
        },
        userId: familyId,
      });

      res.status(201).json({
        success: true,
        data: request,
        message: 'Video call request submitted successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error requesting video call:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to request video call',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/messages
 * @desc Get family messages
 * @access Family Members
 */
router.get('/messages',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getMessages),
  async (req: Request, res: Response) => {
    try {
      const { residentId, limit = 20, unreadOnly = false } = req.query;
      const familyId = req.user.id;

      const messages = await FamilyEngagementService.getFamilyMessages(
        familyId,
        residentId as string
      );

      let filteredMessages = messages;
      if (unreadOnly === 'true') {
        filteredMessages = messages.filter(msg => !msg.read);
      }
      if (limit) {
        filteredMessages = filteredMessages.slice(0, parseInt(limit as string));
      }

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Messages',
        entityId: `messages_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          limit,
          unreadOnly,
          count: filteredMessages.length,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: filteredMessages,
        message: 'Messages retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting messages:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve messages',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route PATCH /api/family-portal/messages/:messageId/read
 * @desc Mark message as read
 * @access Family Members
 */
router.patch('/messages/:messageId/read',
  rbacMiddleware(['family_member']),
  async (req: Request, res: Response) => {
    try {
      const { messageId } = req.params;
      const familyId = req.user.id;

      await FamilyEngagementService.markMessageAsRead(messageId, familyId);

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Message',
        entityId: messageId,
        action: 'UPDATE',
        details: {
          messageId,
          familyId,
          action: 'mark_read',
        },
        userId: familyId,
      });

      res.json({
        success: true,
        message: 'Message marked as read',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error marking message as read:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to mark message as read',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route POST /api/family-portal/feedback
 * @desc Submit family feedback
 * @access Family Members
 */
router.post('/feedback',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.submitFeedback),
  async (req: Request, res: Response) => {
    try {
      const { residentId, type, rating, comments, anonymous = false } = req.body;
      const familyId = req.user.id;

      const feedback = await FamilyEngagementService.submitFamilyFeedback(
        familyId,
        residentId,
        { type, rating, comments, anonymous }
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Feedback',
        entityId: feedback.id,
        action: 'CREATE',
        details: {
          residentId,
          familyId: anonymous ? 'anonymous' : familyId,
          type,
          rating,
          anonymous,
        },
        userId: familyId,
      });

      res.status(201).json({
        success: true,
        data: feedback,
        message: 'Feedback submitted successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error submitting feedback:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to submit feedback',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/notifications
 * @desc Get family notifications
 * @access Family Members
 */
router.get('/notifications',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getNotifications),
  async (req: Request, res: Response) => {
    try {
      const { residentId, limit = 10, unreadOnly = false } = req.query;
      const familyId = req.user.id;

      const notifications = await FamilyPortalService.getFamilyNotifications(
        familyId,
        residentId as string,
        parseInt(limit as string),
        unreadOnly === 'true'
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Notifications',
        entityId: `notifications_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          limit,
          unreadOnly,
          count: notifications.length,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: notifications,
        message: 'Notifications retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting notifications:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve notifications',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route POST /api/family-portal/notifications/:notificationId/acknowledge
 * @desc Acknowledge notification
 * @access Family Members
 */
router.post('/notifications/:notificationId/acknowledge',
  rbacMiddleware(['family_member']),
  async (req: Request, res: Response) => {
    try {
      const { notificationId } = req.params;
      const familyId = req.user.id;

      await FamilyPortalService.acknowledgeNotification(notificationId, familyId);

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Notification',
        entityId: notificationId,
        action: 'UPDATE',
        details: {
          notificationId,
          familyId,
          action: 'acknowledge',
        },
        userId: familyId,
      });

      res.json({
        success: true,
        message: 'Notification acknowledged',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error acknowledging notification:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to acknowledge notification',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/documents
 * @desc Get authorized documents
 * @access Family Members
 */
router.get('/documents',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.getDocuments),
  async (req: Request, res: Response) => {
    try {
      const { residentId, documentType, limit = 20 } = req.query;
      const familyId = req.user.id;

      const documents = await FamilyPortalService.getAuthorizedDocuments(
        familyId,
        residentId as string,
        documentType as string,
        parseInt(limit as string)
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Documents',
        entityId: `documents_${residentId}`,
        action: 'READ',
        details: {
          residentId,
          familyId,
          documentType,
          limit,
          count: documents.length,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: documents,
        message: 'Documents retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting documents:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve documents',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/documents/:documentId/download
 * @desc Download document
 * @access Family Members
 */
router.get('/documents/:documentId/download',
  rbacMiddleware(['family_member']),
  async (req: Request, res: Response) => {
    try {
      const { documentId } = req.params;
      const familyId = req.user.id;

      const document = await FamilyPortalService.downloadDocument(documentId, familyId);

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Document',
        entityId: documentId,
        action: 'DOWNLOAD',
        details: {
          documentId,
          familyId,
          fileName: document.fileName,
        },
        userId: familyId,
      });

      res.setHeader('Content-Type', document.mimeType);
      res.setHeader('Content-Disposition', `attachment; filename="${document.fileName}"`);
      res.send(document.content);
    } catch (error: any) {
      console.error('Error downloading document:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to download document',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route GET /api/family-portal/preferences
 * @desc Get family preferences
 * @access Family Members
 */
router.get('/preferences',
  rbacMiddleware(['family_member']),
  async (req: Request, res: Response) => {
    try {
      const familyId = req.user.id;

      const preferences = await FamilyPortalService.getFamilyPreferences(familyId);

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Preferences',
        entityId: `preferences_${familyId}`,
        action: 'READ',
        details: {
          familyId,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: preferences,
        message: 'Preferences retrieved successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error getting preferences:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to retrieve preferences',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

/**
 * @route PUT /api/family-portal/preferences
 * @desc Update family preferences
 * @access Family Members
 */
router.put('/preferences',
  rbacMiddleware(['family_member']),
  validateRequest(familyPortalSchemas.updatePreferences),
  async (req: Request, res: Response) => {
    try {
      const preferences = req.body;
      const familyId = req.user.id;

      const updatedPreferences = await FamilyPortalService.updateFamilyPreferences(
        familyId,
        preferences
      );

      await AuditTrailService.logEvent({
        resource: 'FamilyPortal',
        entityType: 'Preferences',
        entityId: `preferences_${familyId}`,
        action: 'UPDATE',
        details: {
          familyId,
          preferences,
        },
        userId: familyId,
      });

      res.json({
        success: true,
        data: updatedPreferences,
        message: 'Preferences updated successfully',
        timestamp: new Date().toISOString(),
      });
    } catch (error: any) {
      console.error('Error updating preferences:', error);
      res.status(500).json({
        success: false,
        error: error.message || 'Failed to update preferences',
        timestamp: new Date().toISOString(),
      });
    }
  }
);

export default router;