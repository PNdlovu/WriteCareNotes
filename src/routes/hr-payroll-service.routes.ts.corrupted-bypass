/**
 * @fileoverview HR & Payroll Service Routes for WriteCareNotes
 * @module HRPayrollRoutes
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Express.js routes for HR and payroll management API endpoints
 * with comprehensive validation, authentication, and rate limiting for
 * employee management, payroll processing, training records, shift scheduling,
 * and performance management operations.
 * 
 * @compliance
 * - Employment Rights Act 1996
 * - Working Time Regulations 1998
 * - PAYE (Pay As You Earn) regulations
 * - GDPR data protection requirements
 * - API security and validation standards
 */

import { Router } from 'express';
import { body, param, query, validationResult } from 'express-validator';
import rateLimit from 'express-rate-limit';
import { HRPayrollController } from '@/controllers/hr-payroll/HRPayrollController';
import { authMiddleware } from '@/middleware/authMiddleware';
import { roleMiddleware } from '@/middleware/roleMiddleware';
import { auditMiddleware } from '@/middleware/auditMiddleware';
import { correlationIdMiddleware } from '@/middleware/correlationIdMiddleware';
import { validationErrorHandler } from '@/middleware/validationErrorHandler';

const router = Router();
const hrPayrollController = new HRPayrollController();

// Rate limiting configurations
const standardRateLimit = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 100, // 100 requests per minute
  message: {
    success: false,
    error: {
      code: 'RATE_LIMIT_EXCEEDED',
      message: 'Too many requests, please try again later'
    }
  }
});

const restrictiveRateLimit = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 20, // 20 requests per minute
  message: {
    success: false,
    error: {
      code: 'RATE_LIMIT_EXCEEDED',
      message: 'Too many requests for this operation, please try again later'
    }
  }
});

const payrollRateLimit = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minutes
  max: 5, // 5 requests per 5 minutes
  message: {
    success: false,
    error: {
      code: 'PAYROLL_RATE_LIMIT_EXCEEDED',
      message: 'Payroll processing rate limit exceeded, please wait before retrying'
    }
  }
});

// Apply middleware to all routes
router.use(correlationIdMiddleware);
router.use(authMiddleware);
router.use(auditMiddleware);

// Employee Management Routes

/**
 * @swagger
 * /api/v1/hr-payroll/employees:
 *   post:
 *     summary: Create new employee
 *     description: Creates a new employee record with comprehensive validation and compliance checks
 *     tags: [HR & Payroll - Employees]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - employeeNumber
 *               - firstName
 *               - lastName
 *               - dateOfBirth
 *               - nationalInsuranceNumber
 *               - email
 *               - phoneNumber
 *               - address
 *               - emergencyContact
 *               - startDate
 *               - department
 *               - position
 *               - employmentType
 *               - workingPattern
 *               - contractedHours
 *               - careHomeId
 *     responses:
 *       201:
 *         description: Employee created successfully
 *       400:
 *         description: Invalid employee data or validation errors
 *       409:
 *         description: Employee with same number or NI number already exists
 */
router.post('/employees',
  restrictiveRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager']),
  [
    // Personal information validation
    body('employeeNumber')
      .isLength({ min: 1, max: 50 })
      .withMessage('Employee number must be between 1 and 50 characters')
      .matches(/^[A-Z0-9-]+$/)
      .withMessage('Employee number must contain only uppercase letters, numbers, and hyphens'),
    
    body('firstName')
      .isLength({ min: 1, max: 100 })
      .withMessage('First name must be between 1 and 100 characters')
      .matches(/^[a-zA-Z\s'-]+$/)
      .withMessage('First name must contain only letters, spaces, hyphens, and apostrophes'),
    
    body('lastName')
      .isLength({ min: 1, max: 100 })
      .withMessage('Last name must be between 1 and 100 characters')
      .matches(/^[a-zA-Z\s'-]+$/)
      .withMessage('Last name must contain only letters, spaces, hyphens, and apostrophes'),
    
    body('middleName')
      .optional()
      .isLength({ max: 100 })
      .withMessage('Middle name must not exceed 100 characters'),
    
    body('dateOfBirth')
      .isISO8601()
      .withMessage('Date of birth must be a valid date')
      .custom((value) => {
        const birthDate = new Date(value);
        const today = new Date();
        const age = today.getFullYear() - birthDate.getFullYear();
        if (age < 16 || age > 100) {
          throw new Error('Employee must be between 16 and 100 years old');
        }
        return true;
      }),
    
    body('gender')
      .optional()
      .isIn(['male', 'female', 'other', 'prefer_not_to_say'])
      .withMessage('Gender must be one of: male, female, other, prefer_not_to_say'),
    
    body('nationalInsuranceNumber')
      .matches(/^[A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}[0-9]{6}[A-D]{1}$/)
      .withMessage('National Insurance number must be in valid UK format'),
    
    body('email')
      .isEmail()
      .withMessage('Must be a valid email address')
      .normalizeEmail(),
    
    body('phoneNumber')
      .matches(/^(\+44|0)[1-9]\d{8,9}$/)
      .withMessage('Phone number must be a valid UK phone number'),
    
    // Address validation
    body('address.line1')
      .isLength({ min: 1, max: 255 })
      .withMessage('Address line 1 is required and must not exceed 255 characters'),
    
    body('address.city')
      .isLength({ min: 1, max: 100 })
      .withMessage('City is required and must not exceed 100 characters'),
    
    body('address.postcode')
      .matches(/^[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][A-Z]{2}$/)
      .withMessage('Postcode must be in valid UK format'),
    
    body('address.country')
      .isIn(['England', 'Scotland', 'Wales', 'Northern Ireland'])
      .withMessage('Country must be one of: England, Scotland, Wales, Northern Ireland'),
    
    // Emergency contact validation
    body('emergencyContact.name')
      .isLength({ min: 1, max: 200 })
      .withMessage('Emergency contact name is required and must not exceed 200 characters'),
    
    body('emergencyContact.relationship')
      .isLength({ min: 1, max: 100 })
      .withMessage('Emergency contact relationship is required'),
    
    body('emergencyContact.phoneNumber')
      .matches(/^(\+44|0)[1-9]\d{8,9}$/)
      .withMessage('Emergency contact phone must be a valid UK phone number'),
    
    // Employment details validation
    body('startDate')
      .isISO8601()
      .withMessage('Start date must be a valid date')
      .custom((value) => {
        const startDate = new Date(value);
        const today = new Date();
        const oneYearAgo = new Date();
        oneYearAgo.setFullYear(today.getFullYear() - 1);
        const oneYearFromNow = new Date();
        oneYearFromNow.setFullYear(today.getFullYear() + 1);
        
        if (startDate < oneYearAgo || startDate > oneYearFromNow) {
          throw new Error('Start date must be within one year of today');
        }
        return true;
      }),
    
    body('department')
      .isLength({ min: 1, max: 100 })
      .withMessage('Department is required and must not exceed 100 characters'),
    
    body('position')
      .isLength({ min: 1, max: 100 })
      .withMessage('Position is required and must not exceed 100 characters'),
    
    body('employmentType')
      .isIn(['permanent', 'temporary', 'contract', 'apprentice', 'volunteer'])
      .withMessage('Employment type must be one of: permanent, temporary, contract, apprentice, volunteer'),
    
    body('workingPattern')
      .isIn(['full_time', 'part_time', 'zero_hours', 'flexible'])
      .withMessage('Working pattern must be one of: full_time, part_time, zero_hours, flexible'),
    
    body('contractedHours')
      .isFloat({ min: 0, max: 168 })
      .withMessage('Contracted hours must be between 0 and 168 hours per week'),
    
    // Compensation validation
    body('hourlyRate')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Hourly rate must be a positive number')
      .custom((value, { req }) => {
        const minimumWage = 11.44; // UK minimum wage as of 2024
        if (value && value < minimumWage) {
          throw new Error(`Hourly rate must be at least Â£${minimumWage} (UK minimum wage)`);
        }
        return true;
      }),
    
    body('annualSalary')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Annual salary must be a positive number'),
    
    body('overtimeRate')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Overtime rate must be a positive number'),
    
    // Banking details validation (optional)
    body('bankAccountNumber')
      .optional()
      .matches(/^\d{8}$/)
      .withMessage('Bank account number must be 8 digits'),
    
    body('sortCode')
      .optional()
      .matches(/^\d{2}-\d{2}-\d{2}$/)
      .withMessage('Sort code must be in format XX-XX-XX'),
    
    // Tax and pension validation
    body('taxCode')
      .optional()
      .matches(/^[0-9]{1,4}[LMNPTY]?$/)
      .withMessage('Tax code must be in valid UK format'),
    
    body('pensionSchemeOptOut')
      .optional()
      .isBoolean()
      .withMessage('Pension scheme opt out must be true or false'),
    
    // System fields validation
    body('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    // Right to work documents validation
    body('rightToWorkDocuments')
      .isArray({ min: 1 })
      .withMessage('At least one right to work document is required'),
    
    body('rightToWorkDocuments.*.documentType')
      .isIn(['passport', 'driving_licence', 'birth_certificate', 'visa', 'work_permit', 'other'])
      .withMessage('Document type must be valid'),
    
    body('rightToWorkDocuments.*.documentNumber')
      .isLength({ min: 1, max: 50 })
      .withMessage('Document number is required'),
    
    body('rightToWorkDocuments.*.verifiedDate')
      .isISO8601()
      .withMessage('Verification date must be a valid date'),
    
    body('rightToWorkDocuments.*.verifiedBy')
      .isUUID()
      .withMessage('Verified by must be a valid user ID')
  ],
  validationErrorHandler,
  hrPayrollController.createEmployee.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/employees/{id}:
 *   get:
 *     summary: Get employee by ID
 *     description: Retrieves detailed employee information including compliance status
 *     tags: [HR & Payroll - Employees]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Employee UUID
 *     responses:
 *       200:
 *         description: Employee retrieved successfully
 *       404:
 *         description: Employee not found
 */
router.get('/employees/:id',
  standardRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager', 'supervisor']),
  [
    param('id')
      .isUUID()
      .withMessage('Employee ID must be a valid UUID')
  ],
  validationErrorHandler,
  hrPayrollController.getEmployee.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/employees:
 *   get:
 *     summary: Search employees
 *     description: Search and filter employees with pagination and sorting
 *     tags: [HR & Payroll - Employees]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: careHomeId
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Care home UUID filter
 *       - in: query
 *         name: department
 *         schema:
 *           type: string
 *         description: Department filter
 *       - in: query
 *         name: position
 *         schema:
 *           type: string
 *         description: Position filter
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [active, inactive, suspended, terminated]
 *         description: Employment status filter
 *       - in: query
 *         name: searchTerm
 *         schema:
 *           type: string
 *         description: Search in name, employee number, email
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *           default: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *           default: 50
 *         description: Items per page
 *     responses:
 *       200:
 *         description: Employees retrieved successfully
 */
router.get('/employees',
  standardRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager', 'supervisor']),
  [
    query('careHomeId')
      .optional()
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    query('department')
      .optional()
      .isLength({ min: 1, max: 100 })
      .withMessage('Department must be between 1 and 100 characters'),
    
    query('position')
      .optional()
      .isLength({ min: 1, max: 100 })
      .withMessage('Position must be between 1 and 100 characters'),
    
    query('status')
      .optional()
      .isIn(['active', 'inactive', 'suspended', 'terminated'])
      .withMessage('Status must be one of: active, inactive, suspended, terminated'),
    
    query('searchTerm')
      .optional()
      .isLength({ min: 1, max: 255 })
      .withMessage('Search term must be between 1 and 255 characters'),
    
    query('page')
      .optional()
      .isInt({ min: 1 })
      .withMessage('Page must be a positive integer'),
    
    query('limit')
      .optional()
      .isInt({ min: 1, max: 100 })
      .withMessage('Limit must be between 1 and 100'),
    
    query('sortBy')
      .optional()
      .isIn(['created_at', 'updated_at', 'first_name', 'last_name', 'employee_number', 'start_date'])
      .withMessage('Sort by must be a valid field'),
    
    query('sortOrder')
      .optional()
      .isIn(['asc', 'desc'])
      .withMessage('Sort order must be asc or desc')
  ],
  validationErrorHandler,
  hrPayrollController.searchEmployees.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/employees/{id}:
 *   put:
 *     summary: Update employee
 *     description: Updates employee information with validation and audit trail
 *     tags: [HR & Payroll - Employees]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Employee UUID
 *     responses:
 *       200:
 *         description: Employee updated successfully
 *       404:
 *         description: Employee not found
 */
router.put('/employees/:id',
  restrictiveRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager']),
  [
    param('id')
      .isUUID()
      .withMessage('Employee ID must be a valid UUID'),
    
    // Optional update fields with same validation as create
    body('firstName')
      .optional()
      .isLength({ min: 1, max: 100 })
      .withMessage('First name must be between 1 and 100 characters'),
    
    body('lastName')
      .optional()
      .isLength({ min: 1, max: 100 })
      .withMessage('Last name must be between 1 and 100 characters'),
    
    body('email')
      .optional()
      .isEmail()
      .withMessage('Must be a valid email address'),
    
    body('phoneNumber')
      .optional()
      .matches(/^(\+44|0)[1-9]\d{8,9}$/)
      .withMessage('Phone number must be a valid UK phone number'),
    
    body('department')
      .optional()
      .isLength({ min: 1, max: 100 })
      .withMessage('Department must be between 1 and 100 characters'),
    
    body('position')
      .optional()
      .isLength({ min: 1, max: 100 })
      .withMessage('Position must be between 1 and 100 characters'),
    
    body('hourlyRate')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Hourly rate must be a positive number'),
    
    body('status')
      .optional()
      .isIn(['active', 'inactive', 'suspended', 'terminated'])
      .withMessage('Status must be one of: active, inactive, suspended, terminated'),
    
    body('terminationDate')
      .optional()
      .isISO8601()
      .withMessage('Termination date must be a valid date'),
    
    body('terminationReason')
      .optional()
      .isLength({ max: 1000 })
      .withMessage('Termination reason must not exceed 1000 characters')
  ],
  validationErrorHandler,
  hrPayrollController.updateEmployee.bind(hrPayrollController)
);

// Payroll Management Routes

/**
 * @swagger
 * /api/v1/hr-payroll/payroll/process:
 *   post:
 *     summary: Process payroll
 *     description: Processes payroll for specified period with tax and pension calculations
 *     tags: [HR & Payroll - Payroll]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       201:
 *         description: Payroll processed successfully
 *       400:
 *         description: Invalid payroll request or validation errors
 */
router.post('/payroll/process',
  payrollRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'payroll_administrator']),
  [
    body('payrollPeriod')
      .matches(/^\d{4}-(0[1-9]|1[0-2])$|^\d{4}-W([0-4][0-9]|5[0-3])$/)
      .withMessage('Payroll period must be in format YYYY-MM for monthly or YYYY-WXX for weekly'),
    
    body('payrollType')
      .isIn(['monthly', 'weekly', 'quarterly'])
      .withMessage('Payroll type must be one of: monthly, weekly, quarterly'),
    
    body('employeeIds')
      .optional()
      .isArray()
      .withMessage('Employee IDs must be an array'),
    
    body('employeeIds.*')
      .optional()
      .isUUID()
      .withMessage('Each employee ID must be a valid UUID'),
    
    body('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    body('includeBackPay')
      .optional()
      .isBoolean()
      .withMessage('Include back pay must be true or false'),
    
    body('includeBenefitsInKind')
      .optional()
      .isBoolean()
      .withMessage('Include benefits in kind must be true or false'),
    
    body('generatePayslips')
      .optional()
      .isBoolean()
      .withMessage('Generate payslips must be true or false'),
    
    body('submitToHMRC')
      .optional()
      .isBoolean()
      .withMessage('Submit to HMRC must be true or false')
  ],
  validationErrorHandler,
  hrPayrollController.processPayroll.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/payroll/summaries:
 *   get:
 *     summary: Get payroll summaries
 *     description: Retrieves payroll summaries with filtering and pagination
 *     tags: [HR & Payroll - Payroll]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Payroll summaries retrieved successfully
 */
router.get('/payroll/summaries',
  standardRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'payroll_administrator', 'care_home_manager']),
  [
    query('careHomeId')
      .optional()
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    query('period')
      .optional()
      .matches(/^\d{4}-(0[1-9]|1[0-2])$|^\d{4}-W([0-4][0-9]|5[0-3])$/)
      .withMessage('Period must be in format YYYY-MM or YYYY-WXX'),
    
    query('status')
      .optional()
      .isIn(['processing', 'completed', 'failed', 'cancelled'])
      .withMessage('Status must be one of: processing, completed, failed, cancelled')
  ],
  validationErrorHandler,
  hrPayrollController.getPayrollSummaries.bind(hrPayrollController)
);

// Training Management Routes

/**
 * @swagger
 * /api/v1/hr-payroll/training/records:
 *   post:
 *     summary: Create training record
 *     description: Creates a training record for an employee with compliance tracking
 *     tags: [HR & Payroll - Training]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       201:
 *         description: Training record created successfully
 */
router.post('/training/records',
  restrictiveRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager', 'supervisor']),
  [
    body('employeeId')
      .isUUID()
      .withMessage('Employee ID must be a valid UUID'),
    
    body('trainingType')
      .isLength({ min: 1, max: 100 })
      .withMessage('Training type is required and must not exceed 100 characters'),
    
    body('trainingName')
      .isLength({ min: 1, max: 255 })
      .withMessage('Training name is required and must not exceed 255 characters'),
    
    body('provider')
      .isLength({ min: 1, max: 255 })
      .withMessage('Provider is required and must not exceed 255 characters'),
    
    body('completionDate')
      .optional()
      .isISO8601()
      .withMessage('Completion date must be a valid date'),
    
    body('expiryDate')
      .optional()
      .isISO8601()
      .withMessage('Expiry date must be a valid date')
      .custom((value, { req }) => {
        if (value && req.body.completionDate && new Date(value) <= new Date(req.body.completionDate)) {
          throw new Error('Expiry date must be after completion date');
        }
        return true;
      }),
    
    body('certificateNumber')
      .optional()
      .isLength({ max: 100 })
      .withMessage('Certificate number must not exceed 100 characters'),
    
    body('trainingHours')
      .optional()
      .isFloat({ min: 0, max: 1000 })
      .withMessage('Training hours must be between 0 and 1000'),
    
    body('cost')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Cost must be a positive number'),
    
    body('isMandatory')
      .isBoolean()
      .withMessage('Is mandatory must be true or false'),
    
    body('trainingMethod')
      .isIn(['classroom', 'online', 'practical', 'blended'])
      .withMessage('Training method must be one of: classroom, online, practical, blended'),
    
    body('assessmentResult')
      .optional()
      .isIn(['pass', 'fail', 'distinction', 'merit'])
      .withMessage('Assessment result must be one of: pass, fail, distinction, merit'),
    
    body('assessmentScore')
      .optional()
      .isFloat({ min: 0, max: 100 })
      .withMessage('Assessment score must be between 0 and 100'),
    
    body('cpdPoints')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('CPD points must be a positive number'),
    
    body('notes')
      .optional()
      .isLength({ max: 2000 })
      .withMessage('Notes must not exceed 2000 characters')
  ],
  validationErrorHandler,
  hrPayrollController.createTrainingRecord.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/training/compliance/{careHomeId}:
 *   get:
 *     summary: Get training compliance report
 *     description: Retrieves comprehensive training compliance report for care home
 *     tags: [HR & Payroll - Training]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: careHomeId
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Care home UUID
 *     responses:
 *       200:
 *         description: Training compliance report retrieved successfully
 */
router.get('/training/compliance/:careHomeId',
  standardRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager', 'supervisor']),
  [
    param('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID')
  ],
  validationErrorHandler,
  hrPayrollController.getTrainingCompliance.bind(hrPayrollController)
);

// Shift Management Routes

/**
 * @swagger
 * /api/v1/hr-payroll/shifts:
 *   post:
 *     summary: Create shift
 *     description: Creates a shift schedule with conflict detection and compliance checks
 *     tags: [HR & Payroll - Shifts]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       201:
 *         description: Shift created successfully
 */
router.post('/shifts',
  standardRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager', 'supervisor']),
  [
    body('employeeId')
      .isUUID()
      .withMessage('Employee ID must be a valid UUID'),
    
    body('shiftType')
      .isIn(['day', 'night', 'evening', 'weekend', 'bank_holiday', 'on_call'])
      .withMessage('Shift type must be one of: day, night, evening, weekend, bank_holiday, on_call'),
    
    body('startTime')
      .isISO8601()
      .withMessage('Start time must be a valid datetime'),
    
    body('endTime')
      .isISO8601()
      .withMessage('End time must be a valid datetime')
      .custom((value, { req }) => {
        if (new Date(value) <= new Date(req.body.startTime)) {
          throw new Error('End time must be after start time');
        }
        
        // Check shift duration doesn't exceed 12 hours (Working Time Regulations)
        const duration = (new Date(value) - new Date(req.body.startTime)) / (1000 * 60 * 60);
        if (duration > 12) {
          throw new Error('Shift duration cannot exceed 12 hours');
        }
        
        return true;
      }),
    
    body('breakDuration')
      .optional()
      .isInt({ min: 0, max: 480 })
      .withMessage('Break duration must be between 0 and 480 minutes'),
    
    body('department')
      .optional()
      .isLength({ max: 100 })
      .withMessage('Department must not exceed 100 characters'),
    
    body('location')
      .optional()
      .isLength({ max: 100 })
      .withMessage('Location must not exceed 100 characters'),
    
    body('role')
      .optional()
      .isLength({ max: 100 })
      .withMessage('Role must not exceed 100 characters'),
    
    body('hourlyRate')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Hourly rate must be a positive number'),
    
    body('overtimeRate')
      .optional()
      .isFloat({ min: 0 })
      .withMessage('Overtime rate must be a positive number'),
    
    body('isVoluntary')
      .optional()
      .isBoolean()
      .withMessage('Is voluntary must be true or false'),
    
    body('requiresSpecialSkills')
      .optional()
      .isArray()
      .withMessage('Requires special skills must be an array'),
    
    body('minimumStaffingLevel')
      .optional()
      .isInt({ min: 1 })
      .withMessage('Minimum staffing level must be a positive integer'),
    
    body('notes')
      .optional()
      .isLength({ max: 1000 })
      .withMessage('Notes must not exceed 1000 characters'),
    
    body('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID')
  ],
  validationErrorHandler,
  hrPayrollController.createShift.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/shifts/schedule:
 *   get:
 *     summary: Get shift schedule
 *     description: Retrieves shift schedule with conflict detection and staffing analysis
 *     tags: [HR & Payroll - Shifts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: careHomeId
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Care home UUID
 *       - in: query
 *         name: startDate
 *         required: true
 *         schema:
 *           type: string
 *           format: date
 *         description: Schedule start date
 *       - in: query
 *         name: endDate
 *         required: true
 *         schema:
 *           type: string
 *           format: date
 *         description: Schedule end date
 *     responses:
 *       200:
 *         description: Shift schedule retrieved successfully
 */
router.get('/shifts/schedule',
  standardRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager', 'supervisor']),
  [
    query('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    query('startDate')
      .isISO8601()
      .withMessage('Start date must be a valid date'),
    
    query('endDate')
      .isISO8601()
      .withMessage('End date must be a valid date')
      .custom((value, { req }) => {
        if (new Date(value) <= new Date(req.query.startDate)) {
          throw new Error('End date must be after start date');
        }
        
        // Limit date range to prevent performance issues
        const daysDiff = (new Date(value) - new Date(req.query.startDate)) / (1000 * 60 * 60 * 24);
        if (daysDiff > 90) {
          throw new Error('Date range cannot exceed 90 days');
        }
        
        return true;
      }),
    
    query('department')
      .optional()
      .isLength({ max: 100 })
      .withMessage('Department filter must not exceed 100 characters'),
    
    query('employeeId')
      .optional()
      .isUUID()
      .withMessage('Employee ID filter must be a valid UUID')
  ],
  validationErrorHandler,
  hrPayrollController.getShiftSchedule.bind(hrPayrollController)
);

// HR Metrics and Reporting Routes

/**
 * @swagger
 * /api/v1/hr-payroll/metrics/{careHomeId}:
 *   get:
 *     summary: Get HR metrics
 *     description: Retrieves comprehensive HR metrics and analytics for reporting
 *     tags: [HR & Payroll - Metrics]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: careHomeId
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: Care home UUID
 *       - in: query
 *         name: period
 *         schema:
 *           type: string
 *           enum: [current_month, last_month, current_quarter, last_quarter, current_year, last_year, custom]
 *           default: current_month
 *         description: Reporting period
 *     responses:
 *       200:
 *         description: HR metrics retrieved successfully
 */
router.get('/metrics/:careHomeId',
  restrictiveRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager']),
  [
    param('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    query('period')
      .optional()
      .isIn(['current_month', 'last_month', 'current_quarter', 'last_quarter', 'current_year', 'last_year', 'custom'])
      .withMessage('Period must be one of: current_month, last_month, current_quarter, last_quarter, current_year, last_year, custom'),
    
    query('startDate')
      .if(query('period').equals('custom'))
      .isISO8601()
      .withMessage('Start date is required for custom period'),
    
    query('endDate')
      .if(query('period').equals('custom'))
      .isISO8601()
      .withMessage('End date is required for custom period')
  ],
  validationErrorHandler,
  hrPayrollController.getHRMetrics.bind(hrPayrollController)
);

/**
 * @swagger
 * /api/v1/hr-payroll/reports/generate:
 *   post:
 *     summary: Generate HR report
 *     description: Generates comprehensive HR reports in various formats
 *     tags: [HR & Payroll - Reports]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       201:
 *         description: Report generation initiated successfully
 */
router.post('/reports/generate',
  restrictiveRateLimit,
  roleMiddleware(['hr_manager', 'admin', 'care_home_manager']),
  [
    body('reportType')
      .isIn(['payroll_summary', 'tax_summary', 'pension_summary', 'payslips', 'p60', 'p45', 'training_compliance', 'employee_list'])
      .withMessage('Report type must be valid'),
    
    body('careHomeId')
      .isUUID()
      .withMessage('Care home ID must be a valid UUID'),
    
    body('format')
      .isIn(['pdf', 'excel', 'csv', 'json'])
      .withMessage('Format must be one of: pdf, excel, csv, json'),
    
    body('payrollPeriod')
      .optional()
      .matches(/^\d{4}-(0[1-9]|1[0-2])$|^\d{4}-W([0-4][0-9]|5[0-3])$/)
      .withMessage('Payroll period must be in format YYYY-MM or YYYY-WXX'),
    
    body('startDate')
      .optional()
      .isISO8601()
      .withMessage('Start date must be a valid date'),
    
    body('endDate')
      .optional()
      .isISO8601()
      .withMessage('End date must be a valid date'),
    
    body('employeeIds')
      .optional()
      .isArray()
      .withMessage('Employee IDs must be an array'),
    
    body('employeeIds.*')
      .optional()
      .isUUID()
      .withMessage('Each employee ID must be a valid UUID')
  ],
  validationErrorHandler,
  hrPayrollController.generateReport.bind(hrPayrollController)
);

export default router;