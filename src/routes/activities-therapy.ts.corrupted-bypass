import { EventEmitter2 } from "eventemitter2";

import { Router } from 'express';
import { ActivitiesTherapyController } from '../controllers/activities/ActivitiesTherapyController';
import { authenticate } from '../middleware/auth-middleware';
import { authorize } from '../middleware/rbac-middleware';
import { validateRequest } from '../middleware/validation-middleware';
import { auditMiddleware } from '../middleware/audit-middleware';

const router = Router();
const activitiesController = new ActivitiesTherapyController();

// Apply middleware to all routes
router.use(authenticate);
router.use(auditMiddleware);

// Activity Management Routes
router.post('/activities',
  authorize(['activities_coordinator', 'therapist', 'care_manager', 'admin']),
  validateRequest({
    body: {
      activityName: { type: 'string', required: true },
      activityType: { type: 'string', required: true },
      category: { type: 'string', required: true },
      scheduledStartTime: { type: 'string', required: true },
      scheduledEndTime: { type: 'string', required: true },
      facilitator: { type: 'string', required: true },
      location: { type: 'string', required: true },
      maxParticipants: { type: 'number', required: true },
      requirements: { type: 'object', required: true }
    }
  }),
  activitiesController.createActivity.bind(activitiesController)
);

router.get('/activities',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  activitiesController.getAllActivities.bind(activitiesController)
);

router.get('/activities/today',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  activitiesController.getTodaysActivities.bind(activitiesController)
);

router.get('/activities/search',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  activitiesController.searchActivities.bind(activitiesController)
);

// Activity Execution Routes
router.post('/activities/:activityId/start',
  authorize(['activities_coordinator', 'therapist', 'admin']),
  activitiesController.startActivity.bind(activitiesController)
);

router.post('/activities/:activityId/complete',
  authorize(['activities_coordinator', 'therapist', 'admin']),
  validateRequest({
    body: {
      sessionNotes: { type: 'string', required: false }
    }
  }),
  activitiesController.completeActivity.bind(activitiesController)
);

router.post('/activities/:activityId/cancel',
  authorize(['activities_coordinator', 'therapist', 'care_manager', 'admin']),
  validateRequest({
    body: {
      reason: { type: 'string', required: true }
    }
  }),
  activitiesController.cancelActivity.bind(activitiesController)
);

// Participation Management Routes
router.post('/activities/:activityId/participants/:residentId',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  activitiesController.addParticipant.bind(activitiesController)
);

router.delete('/activities/:activityId/participants/:residentId',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  activitiesController.removeParticipant.bind(activitiesController)
);

router.post('/activities/:activityId/outcomes',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  validateRequest({
    body: {
      participantId: { type: 'string', required: true },
      participationLevel: { type: 'string', required: true },
      enjoymentLevel: { type: 'number', required: true },
      engagementLevel: { type: 'number', required: true },
      recordedBy: { type: 'string', required: true }
    }
  }),
  activitiesController.recordOutcome.bind(activitiesController)
);

// Analytics Routes
router.get('/analytics/therapy',
  authorize(['activities_coordinator', 'therapist', 'care_managers', 'admin']),
  activitiesController.getTherapyAnalytics.bind(activitiesController)
);

router.get('/residents/:residentId/activity-profile',
  authorize(['activities_coordinator', 'therapist', 'care_staff', 'admin']),
  activitiesController.getResidentActivityProfile.bind(activitiesController)
);

// Planning Routes
router.get('/planning/weekly',
  authorize(['activities_coordinator', 'therapist', 'care_manager', 'admin']),
  activitiesController.planActivitiesForWeek.bind(activitiesController)
);

router.get('/resources/availability',
  authorize(['activities_coordinator', 'therapist', 'admin']),
  activitiesController.checkResourceAvailability.bind(activitiesController)
);

// Therapy Session Management Routes
router.post('/therapy-sessions',
  authorize(['therapist', 'care_manager', 'admin']),
  validateRequest({
    body: {
      therapyType: { type: 'string', required: true },
      residentId: { type: 'string', required: true },
      therapistId: { type: 'string', required: true },
      scheduledStartTime: { type: 'string', required: true },
      scheduledEndTime: { type: 'string', required: true },
      location: { type: 'string', required: true },
      therapyGoals: { type: 'array', required: true }
    }
  }),
  activitiesController.createTherapySession.bind(activitiesController)
);

router.get('/therapy-sessions/resident/:residentId',
  authorize(['therapist', 'care_staff', 'admin']),
  activitiesController.getTherapySessionsByResident.bind(activitiesController)
);

router.get('/therapy-sessions/therapist/:therapistId',
  authorize(['therapist', 'care_manager', 'admin']),
  activitiesController.getTherapySessionsByTherapist.bind(activitiesController)
);

router.get('/therapy-sessions/:sessionId',
  authorize(['therapist', 'care_staff', 'admin']),
  activitiesController.getTherapySessionById.bind(activitiesController)
);

router.post('/therapy-sessions/:sessionId/start',
  authorize(['therapist', 'admin']),
  activitiesController.startTherapySession.bind(activitiesController)
);

router.post('/therapy-sessions/:sessionId/complete',
  authorize(['therapist', 'admin']),
  validateRequest({
    body: {
      sessionOutcome: { type: 'object', required: true }
    }
  }),
  activitiesController.completeTherapySession.bind(activitiesController)
);

router.post('/therapy-sessions/:sessionId/cancel',
  authorize(['therapist', 'care_manager', 'admin']),
  validateRequest({
    body: {
      reason: { type: 'string', required: true }
    }
  }),
  activitiesController.cancelTherapySession.bind(activitiesController)
);

router.put('/therapy-sessions/:sessionId/goals/:goalId/progress',
  authorize(['therapist', 'admin']),
  validateRequest({
    body: {
      progress: { type: 'number', required: true, min: 0, max: 100 }
    }
  }),
  activitiesController.updateTherapyGoalProgress.bind(activitiesController)
);

router.post('/therapy-sessions/:sessionId/safety-incidents',
  authorize(['therapist', 'care_staff', 'admin']),
  validateRequest({
    body: {
      incidentType: { type: 'string', required: true },
      description: { type: 'string', required: true },
      severity: { type: 'string', required: true },
      actionTaken: { type: 'string', required: true }
    }
  }),
  activitiesController.recordSafetyIncident.bind(activitiesController)
);

// Therapy Analytics Routes
router.get('/therapy-progress/:residentId',
  authorize(['therapist', 'care_manager', 'admin']),
  activitiesController.getTherapyProgressReport.bind(activitiesController)
);

router.get('/therapist-workload/:therapistId',
  authorize(['therapist', 'care_manager', 'admin']),
  activitiesController.getTherapistWorkload.bind(activitiesController)
);

export default router;