import { EventEmitter2 } from "eventemitter2";

/**
 * @fileoverview Medication Regulatory Compliance Controller for WriteCareNotes
 * @module MedicationRegulatoryComplianceController
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description REST API controller for medication regulatory compliance operations,
 * audit trail management, and automated reporting across all British Isles jurisdictions.
 * 
 * @compliance
 * - CQC, MHRA, Care Inspectorate, CIW, RQIA, HIQA Standards
 * - GDPR and Data Protection Act 2018
 * - Professional Standards (GMC, NMC, GPhC)
 * 
 * @security
 * - Role-based access control
 * - Audit trail logging
 * - Input validation and sanitization
 * - Rate limiting for sensitive operations
 */

import { Request, Response } from 'express';
import { MedicationRegulatoryComplianceService } from '../../services/medication/MedicationRegulatoryComplianceService';
import { AuditTrailService } from '../../services/audit/AuditTrailService';
import { logger } from '../../utils/logger';
import Joi from 'joi';

export class MedicationRegulatoryComplianceController {
  private complianceService: MedicationRegulatoryComplianceService;
  private auditService: AuditTrailService;

  constructor() {
    this.complianceService = new MedicationRegulatoryComplianceService();
    this.auditService = new AuditTrailService();
  }

  /**
   * Generate compliance report for regulatory authorities
   */
  async generateComplianceReport(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        reportType: Joi.string().valid('cqc', 'mhra', 'care_inspectorate', 'ciw', 'rqia', 'hiqa', 'dhsc', 'internal').required(),
        jurisdiction: Joi.string().valid('england', 'scotland', 'wales', 'northern_ireland', 'republic_of_ireland', 'isle_of_man', 'guernsey', 'jersey').required(),
        startDate: Joi.date().iso().required(),
        endDate: Joi.date().iso().min(Joi.ref('startDate')).required()
      });

      const { error, value } = schema.validate(req.body);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: error.details
          }
        });
        return;
      }

      const { reportType, jurisdiction, startDate, endDate } = value;
      const organizationId = req.user.organizationId;
      const userId = req.user.id;

      const report = await this.complianceService.generateComplianceReport(
        reportType,
        jurisdiction,
        { startDate: new Date(startDate), endDate: new Date(endDate) },
        organizationId,
        userId
      );

      // Log audit trail
      await this.auditService.logActivity({
        entityType: 'ComplianceReport',
        entityId: report.id,
        action: 'GENERATE',
        userId,
        organizationId,
        details: {
          reportType,
          jurisdiction,
          reportPeriod: { startDate, endDate },
          complianceScore: report.metrics.overallComplianceScore
        }
      });

      res.status(201).json({
        success: true,
        data: report,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error generating compliance report', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to generate compliance report'
        }
      });
    }
  }

  /**
   * Get real-time compliance monitoring data
   */
  async getComplianceMonitoring(req: Request, res: Response): Promise<void> {
    try {
      const organizationId = req.user.organizationId;

      const monitoringData = await this.complianceService.monitorCompliance(organizationId);

      res.status(200).json({
        success: true,
        data: monitoringData,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error getting compliance monitoring data', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to get compliance monitoring data'
        }
      });
    }
  }

  /**
   * Submit compliance report to regulatory authority
   */
  async submitComplianceReport(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        reportId: Joi.string().required(),
        submissionMethod: Joi.string().valid('electronic', 'postal', 'email').required(),
        recipientAuthority: Joi.string().required(),
        contactPerson: Joi.string().optional(),
        additionalNotes: Joi.string().max(1000).optional()
      });

      const { error, value } = schema.validate(req.body);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const userId = req.user.id;

      const submissionResult = await this.complianceService.submitComplianceReport(
        value.reportId,
        {
          submissionMethod: value.submissionMethod,
          recipientAuthority: value.recipientAuthority,
          contactPerson: value.contactPerson,
          additionalNotes: value.additionalNotes
        },
        organizationId,
        userId
      );

      // Log audit trail
      await this.auditService.logActivity({
        entityType: 'ComplianceReport',
        entityId: value.reportId,
        action: 'SUBMIT',
        userId,
        organizationId,
        details: {
          submissionReference: submissionResult.submissionReference,
          submissionMethod: value.submissionMethod,
          recipientAuthority: value.recipientAuthority
        }
      });

      res.status(200).json({
        success: true,
        data: submissionResult,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error submitting compliance report', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to submit compliance report'
        }
      });
    }
  }

  /**
   * Apply data retention policies
   */
  async applyDataRetentionPolicies(req: Request, res: Response): Promise<void> {
    try {
      const organizationId = req.user.organizationId;
      const userId = req.user.id;

      const result = await this.complianceService.implementDataRetentionPolicies(organizationId);

      // Log audit trail
      await this.auditService.logActivity({
        entityType: 'DataRetention',
        entityId: 'bulk_operation',
        action: 'APPLY_POLICIES',
        userId,
        organizationId,
        details: result
      });

      res.status(200).json({
        success: true,
        data: result,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error applying data retention policies', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to apply data retention policies'
        }
      });
    }
  }

  /**
   * Generate inspection-ready documentation
   */
  async generateInspectionDocumentation(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        inspectionType: Joi.string().valid('cqc', 'care_inspectorate', 'ciw', 'rqia', 'hiqa', 'internal').required(),
        inspectionDate: Joi.date().iso().required()
      });

      const { error, value } = schema.validate(req.body);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const userId = req.user.id;

      const documentation = await this.complianceService.generateInspectionDocumentation(
        value.inspectionType,
        new Date(value.inspectionDate),
        organizationId,
        userId
      );

      // Log audit trail
      await this.auditService.logActivity({
        entityType: 'InspectionPreparation',
        entityId: this.generateUniqueId(),
        action: 'GENERATE_DOCUMENTATION',
        userId,
        organizationId,
        details: {
          inspectionType: value.inspectionType,
          inspectionDate: value.inspectionDate,
          readinessScore: documentation.readinessScore
        }
      });

      res.status(200).json({
        success: true,
        data: documentation,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error generating inspection documentation', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to generate inspection documentation'
        }
      });
    }
  }

  /**
   * Validate audit trail integrity
   */
  async validateAuditTrailIntegrity(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        startDate: Joi.date().iso().optional(),
        endDate: Joi.date().iso().min(Joi.ref('startDate')).optional()
      });

      const { error, value } = schema.validate(req.query);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid query parameters',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const startDate = value.startDate ? new Date(value.startDate) : undefined;
      const endDate = value.endDate ? new Date(value.endDate) : undefined;

      const validationResult = await this.complianceService.validateAuditTrailIntegrity(
        organizationId,
        startDate,
        endDate
      );

      res.status(200).json({
        success: true,
        data: validationResult,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error validating audit trail integrity', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to validate audit trail integrity'
        }
      });
    }
  }

  /**
   * Generate regulatory notification for serious incidents
   */
  async generateRegulatoryNotification(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        incidentId: Joi.string().required(),
        incidentType: Joi.string().valid('medication_error', 'adverse_reaction', 'controlled_substance_loss', 'safety_incident').required(),
        severity: Joi.string().valid('low', 'medium', 'high', 'critical').required()
      });

      const { error, value } = schema.validate(req.body);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const userId = req.user.id;

      const notification = await this.complianceService.generateRegulatoryNotification(
        value.incidentId,
        value.incidentType,
        value.severity,
        organizationId,
        userId
      );

      // Log audit trail
      await this.auditService.logActivity({
        entityType: 'RegulatoryNotification',
        entityId: notification.notificationId,
        action: 'CREATE',
        userId,
        organizationId,
        details: {
          incidentId: value.incidentId,
          incidentType: value.incidentType,
          severity: value.severity,
          regulatoryBodies: notification.regulatoryBodies
        }
      });

      res.status(201).json({
        success: true,
        data: notification,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error generating regulatory notification', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to generate regulatory notification'
        }
      });
    }
  }

  /**
   * Export compliance data for external audits
   */
  async exportComplianceData(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        exportType: Joi.string().valid('full_audit', 'medication_records', 'incident_reports', 'training_records').required(),
        startDate: Joi.date().iso().required(),
        endDate: Joi.date().iso().min(Joi.ref('startDate')).required()
      });

      const { error, value } = schema.validate(req.body);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const userId = req.user.id;

      const exportResult = await this.complianceService.exportComplianceData(
        value.exportType,
        { startDate: new Date(value.startDate), endDate: new Date(value.endDate) },
        organizationId,
        userId
      );

      // Log audit trail
      await this.auditService.logActivity({
        entityType: 'ComplianceExport',
        entityId: exportResult.exportId,
        action: 'CREATE',
        userId,
        organizationId,
        details: {
          exportType: value.exportType,
          dateRange: { startDate: value.startDate, endDate: value.endDate },
          recordCount: exportResult.recordCount
        }
      });

      res.status(200).json({
        success: true,
        data: exportResult,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error exporting compliance data', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to export compliance data'
        }
      });
    }
  }

  /**
   * Get compliance reports list
   */
  async getComplianceReports(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        page: Joi.number().integer().min(1).default(1),
        limit: Joi.number().integer().min(1).max(100).default(20),
        reportType: Joi.string().valid('cqc', 'mhra', 'care_inspectorate', 'ciw', 'rqia', 'hiqa', 'dhsc', 'internal').optional(),
        status: Joi.string().valid('draft', 'pending_review', 'approved', 'submitted', 'acknowledged').optional(),
        startDate: Joi.date().iso().optional(),
        endDate: Joi.date().iso().min(Joi.ref('startDate')).optional()
      });

      const { error, value } = schema.validate(req.query);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid query parameters',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const { page, limit, reportType, status, startDate, endDate } = value;

      // Build query conditions
      let whereClause = 'WHERE organization_id = $1';
      const params: any[] = [organizationId];
      let paramIndex = 2;

      if (reportType) {
        whereClause += ` AND report_type = $${paramIndex}`;
        params.push(reportType);
        paramIndex++;
      }

      if (status) {
        whereClause += ` AND status = $${paramIndex}`;
        params.push(status);
        paramIndex++;
      }

      if (startDate) {
        whereClause += ` AND generated_date >= $${paramIndex}`;
        params.push(new Date(startDate));
        paramIndex++;
      }

      if (endDate) {
        whereClause += ` AND generated_date <= $${paramIndex}`;
        params.push(new Date(endDate));
        paramIndex++;
      }

      // Get total count
      const countQuery = `SELECT COUNT(*) as total FROM compliance_reports ${whereClause}`;
      const countResult = await this.complianceService['AppDataSource'].query(countQuery, params);
      const total = parseInt(countResult[0].total);

      // Get paginated results
      const offset = (page - 1) * limit;
      const dataQuery = `
        SELECT id, report_type, jurisdiction, generated_date, status, 
               submission_reference, submission_date
        FROM compliance_reports 
        ${whereClause}
        ORDER BY generated_date DESC
        LIMIT $${paramIndex} OFFSET $${paramIndex + 1}
      `;
      params.push(limit, offset);

      const reports = await this.complianceService['AppDataSource'].query(dataQuery, params);

      const totalPages = Math.ceil(total / limit);

      res.status(200).json({
        success: true,
        data: reports,
        meta: {
          pagination: {
            page,
            limit,
            total,
            totalPages,
            hasNext: page < totalPages,
            hasPrev: page > 1
          },
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error getting compliance reports', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to get compliance reports'
        }
      });
    }
  }

  /**
   * Get specific compliance report
   */
  async getComplianceReport(req: Request, res: Response): Promise<void> {
    try {
      const schema = Joi.object({
        reportId: Joi.string().required()
      });

      const { error, value } = schema.validate(req.params);
      if (error) {
        res.status(400).json({
          success: false,
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid parameters',
            details: error.details
          }
        });
        return;
      }

      const organizationId = req.user.organizationId;
      const report = await this.complianceService['getComplianceReport'](value.reportId, organizationId);

      if (!report) {
        res.status(404).json({
          success: false,
          error: {
            code: 'NOT_FOUND',
            message: 'Compliance report not found'
          }
        });
        return;
      }

      res.status(200).json({
        success: true,
        data: report,
        meta: {
          timestamp: new Date().toISOString(),
          version: '1.0.0'
        }
      });
    } catch (error: unknown) {
      console.error('Error getting compliance report', {
        error: error instanceof Error ? error instanceof Error ? error.message : "Unknown error" : "Unknown error",
        reportId: req.params['reportId'],
        userId: req.user?.id,
        organizationId: req.user?.organizationId
      });

      res.status(500).json({
        success: false,
        error: {
          code: 'INTERNAL_ERROR',
          message: 'Failed to get compliance report'
        }
      });
    }
  }

  private generateUniqueId(): string {
    return 'ctrl_' + Date.now().toString(36) + Math.random().toString(36).substr(2);
  }
}