import { EventEmitter2 } from "eventemitter2";

/**
 * @fileoverview Tax Record Controller for WriteCareNotes
 * @module TaxRecordController
 * @version 1.0.0
 * @author WriteCareNotes Team
 * @since 2025-01-01
 * 
 * @description Comprehensive tax record management controller with HMRC compliance,
 * tax calculations, and reporting for healthcare operations.
 * 
 * @compliance
 * - HMRC (Her Majesty's Revenue and Customs) regulations
 * - PAYE (Pay As You Earn) compliance
 * - VAT (Value Added Tax) regulations
 * - Corporation Tax compliance
 * - SOX (Sarbanes-Oxley Act) compliance
 * - GDPR Article 6 & 9 (Financial data processing)
 */

import { Controller, Get, Post, Put, Delete, Body, Param, Query, Req, Res, HttpStatus, UseGuards, ValidationPipe } from '@nestjs/common';
import { Request, Response } from 'express';
import { TaxRecordService, CreateTaxRecordRequest, UpdateTaxRecordRequest, TaxRecordFilters, TaxRecordListResponse, SubmitTaxRecordRequest, ProcessPaymentRequest } from '@/services/financial/TaxRecordService';
import { TaxRecord, TaxType, TaxStatus, TaxPeriod } from '@/entities/financial/TaxRecord';
import { JwtAuthGuard } from '@/guards/JwtAuthGuard';
import { RoleGuard } from '@/guards/RoleGuard';
import { Roles } from '@/decorators/Roles';
import { User } from '@/decorators/User';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';
import { CreateTaxRecordDto, UpdateTaxRecordDto, SubmitTaxRecordDto, ProcessPaymentDto, TaxRecordFiltersDto } from '@/dto/financial/TaxRecordDto';
import { logger } from '@/utils/logger';

@ApiTags('Financial - Tax Records')
@ApiBearerAuth()
@Controller('financial/tax-records')
@UseGuards(JwtAuthGuard, RoleGuard)
export class TaxRecordController {
  constructor(private readonly taxRecordService: TaxRecordService) {}

  /**
   * Create a new tax record
   */
  @Post()
  @Roles('admin', 'finance_manager', 'tax_specialist')
  @ApiOperation({ summary: 'Create a new tax record' })
  @ApiResponse({ status: 201, description: 'Tax record created successfully' })
  @ApiResponse({ status: 400, description: 'Invalid request data' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  @ApiResponse({ status: 500, description: 'Internal server error' })
  async createTaxRecord(
    @Body(ValidationPipe) createTaxRecordDto: CreateTaxRecordDto,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Creating tax record for ${createTaxRecordDto.taxType}`, {
        userId: user.id,
        taxType: createTaxRecordDto.taxType,
        taxYear: createTaxRecordDto.taxYear,
        auditTrail: true
      });

      const request: CreateTaxRecordRequest = {
        ...createTaxRecordDto,
        createdBy: user.id,
      };

      const taxRecord = await this.taxRecordService.createTaxRecord(request);

      res.status(HttpStatus.CREATED).json({
        success: true,
        message: 'Tax record created successfully',
        data: taxRecord,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to create tax record: ${error.message}`, {
        userId: user.id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to create tax record',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Get tax record by ID
   */
  @Get(':id')
  @Roles('admin', 'finance_manager', 'tax_specialist', 'viewer')
  @ApiOperation({ summary: 'Get tax record by ID' })
  @ApiParam({ name: 'id', description: 'Tax record ID' })
  @ApiResponse({ status: 200, description: 'Tax record retrieved successfully' })
  @ApiResponse({ status: 404, description: 'Tax record not found' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async getTaxRecord(
    @Param('id') id: string,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Retrieving tax record: ${id}`, {
        userId: user.id,
        taxRecordId: id,
        auditTrail: true
      });

      const taxRecord = await this.taxRecordService.getTaxRecordById(id);

      if (!taxRecord) {
        res.status(HttpStatus.NOT_FOUND).json({
          success: false,
          message: 'Tax record not found',
          timestamp: new Date().toISOString()
        });
        return;
      }

      res.status(HttpStatus.OK).json({
        success: true,
        data: taxRecord,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to retrieve tax record: ${error.message}`, {
        userId: user.id,
        taxRecordId: id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to retrieve tax record',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * List tax records with filters
   */
  @Get()
  @Roles('admin', 'finance_manager', 'tax_specialist', 'viewer')
  @ApiOperation({ summary: 'List tax records with filters' })
  @ApiQuery({ name: 'taxYear', required: false, description: 'Tax year filter' })
  @ApiQuery({ name: 'taxType', required: false, description: 'Tax type filter' })
  @ApiQuery({ name: 'taxPeriod', required: false, description: 'Tax period filter' })
  @ApiQuery({ name: 'status', required: false, description: 'Tax status filter' })
  @ApiQuery({ name: 'employeeId', required: false, description: 'Employee ID filter' })
  @ApiQuery({ name: 'utr', required: false, description: 'UTR filter' })
  @ApiQuery({ name: 'hmrcReference', required: false, description: 'HMRC reference filter' })
  @ApiQuery({ name: 'isHMRCReturnable', required: false, description: 'HMRC returnable filter' })
  @ApiQuery({ name: 'isPensionReturnable', required: false, description: 'Pension returnable filter' })
  @ApiQuery({ name: 'isLate', required: false, description: 'Late tax records filter' })
  @ApiQuery({ name: 'dateFrom', required: false, description: 'Start date filter' })
  @ApiQuery({ name: 'dateTo', required: false, description: 'End date filter' })
  @ApiQuery({ name: 'amountFrom', required: false, description: 'Minimum amount filter' })
  @ApiQuery({ name: 'amountTo', required: false, description: 'Maximum amount filter' })
  @ApiQuery({ name: 'search', required: false, description: 'Search term' })
  @ApiQuery({ name: 'page', required: false, description: 'Page number' })
  @ApiQuery({ name: 'limit', required: false, description: 'Items per page' })
  @ApiQuery({ name: 'sortBy', required: false, description: 'Sort field' })
  @ApiQuery({ name: 'sortOrder', required: false, description: 'Sort order' })
  @ApiResponse({ status: 200, description: 'Tax records retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async listTaxRecords(
    @Query() query: any,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info('Listing tax records with filters', {
        userId: user.id,
        filters: query,
        auditTrail: true
      });

      const filters: TaxRecordFilters = {
        taxYear: query.taxYear,
        taxType: query.taxType ? (Array.isArray(query.taxType) ? query.taxType : [query.taxType]) : undefined,
        taxPeriod: query.taxPeriod ? (Array.isArray(query.taxPeriod) ? query.taxPeriod : [query.taxPeriod]) : undefined,
        status: query.status ? (Array.isArray(query.status) ? query.status : [query.status]) : undefined,
        employeeId: query.employeeId,
        utr: query.utr,
        hmrcReference: query.hmrcReference,
        isHMRCReturnable: query.isHMRCReturnable === 'true',
        isPensionReturnable: query.isPensionReturnable === 'true',
        isLate: query.isLate === 'true',
        dateFrom: query.dateFrom ? new Date(query.dateFrom) : undefined,
        dateTo: query.dateTo ? new Date(query.dateTo) : undefined,
        amountFrom: query.amountFrom ? parseFloat(query.amountFrom) : undefined,
        amountTo: query.amountTo ? parseFloat(query.amountTo) : undefined,
        search: query.search,
        page: query.page ? parseInt(query.page) : undefined,
        limit: query.limit ? parseInt(query.limit) : undefined,
        sortBy: query.sortBy,
        sortOrder: query.sortOrder,
      };

      const result: TaxRecordListResponse = await this.taxRecordService.listTaxRecords(filters);

      res.status(HttpStatus.OK).json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to list tax records: ${error.message}`, {
        userId: user.id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to list tax records',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Update an existing tax record
   */
  @Put(':id')
  @Roles('admin', 'finance_manager', 'tax_specialist')
  @ApiOperation({ summary: 'Update an existing tax record' })
  @ApiParam({ name: 'id', description: 'Tax record ID' })
  @ApiResponse({ status: 200, description: 'Tax record updated successfully' })
  @ApiResponse({ status: 400, description: 'Invalid request data' })
  @ApiResponse({ status: 404, description: 'Tax record not found' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async updateTaxRecord(
    @Param('id') id: string,
    @Body(ValidationPipe) updateTaxRecordDto: UpdateTaxRecordDto,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Updating tax record: ${id}`, {
        userId: user.id,
        taxRecordId: id,
        auditTrail: true
      });

      const request: UpdateTaxRecordRequest = {
        ...updateTaxRecordDto,
        updatedBy: user.id,
      };

      const taxRecord = await this.taxRecordService.updateTaxRecord(id, request);

      res.status(HttpStatus.OK).json({
        success: true,
        message: 'Tax record updated successfully',
        data: taxRecord,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to update tax record: ${error.message}`, {
        userId: user.id,
        taxRecordId: id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to update tax record',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Calculate tax for tax record
   */
  @Post(':id/calculate')
  @Roles('admin', 'finance_manager', 'tax_specialist')
  @ApiOperation({ summary: 'Calculate tax for tax record' })
  @ApiParam({ name: 'id', description: 'Tax record ID' })
  @ApiResponse({ status: 200, description: 'Tax calculated successfully' })
  @ApiResponse({ status: 404, description: 'Tax record not found' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async calculateTax(
    @Param('id') id: string,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Calculating tax for record: ${id}`, {
        userId: user.id,
        taxRecordId: id,
        auditTrail: true
      });

      const taxRecord = await this.taxRecordService.calculateTax(id, user.id);

      res.status(HttpStatus.OK).json({
        success: true,
        message: 'Tax calculated successfully',
        data: taxRecord,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to calculate tax: ${error.message}`, {
        userId: user.id,
        taxRecordId: id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to calculate tax',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Submit tax record to HMRC
   */
  @Post(':id/submit')
  @Roles('admin', 'finance_manager', 'tax_specialist')
  @ApiOperation({ summary: 'Submit tax record to HMRC' })
  @ApiParam({ name: 'id', description: 'Tax record ID' })
  @ApiResponse({ status: 200, description: 'Tax record submitted successfully' })
  @ApiResponse({ status: 400, description: 'Invalid request data' })
  @ApiResponse({ status: 404, description: 'Tax record not found' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async submitTaxRecord(
    @Param('id') id: string,
    @Body(ValidationPipe) submitTaxRecordDto: SubmitTaxRecordDto,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Submitting tax record to HMRC: ${id}`, {
        userId: user.id,
        taxRecordId: id,
        auditTrail: true
      });

      const request: SubmitTaxRecordRequest = {
        taxRecordId: id,
        ...submitTaxRecordDto,
        submittedBy: user.id,
      };

      const taxRecord = await this.taxRecordService.submitTaxRecord(request);

      res.status(HttpStatus.OK).json({
        success: true,
        message: 'Tax record submitted successfully',
        data: taxRecord,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to submit tax record: ${error.message}`, {
        userId: user.id,
        taxRecordId: id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to submit tax record',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Process payment for tax record
   */
  @Post(':id/payment')
  @Roles('admin', 'finance_manager', 'tax_specialist')
  @ApiOperation({ summary: 'Process payment for tax record' })
  @ApiParam({ name: 'id', description: 'Tax record ID' })
  @ApiResponse({ status: 200, description: 'Payment processed successfully' })
  @ApiResponse({ status: 400, description: 'Invalid request data' })
  @ApiResponse({ status: 404, description: 'Tax record not found' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async processPayment(
    @Param('id') id: string,
    @Body(ValidationPipe) processPaymentDto: ProcessPaymentDto,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Processing payment for tax record: ${id}`, {
        userId: user.id,
        taxRecordId: id,
        amount: processPaymentDto.amount,
        auditTrail: true
      });

      const request: ProcessPaymentRequest = {
        taxRecordId: id,
        ...processPaymentDto,
        processedBy: user.id,
      };

      const taxRecord = await this.taxRecordService.processPayment(request);

      res.status(HttpStatus.OK).json({
        success: true,
        message: 'Payment processed successfully',
        data: taxRecord,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to process payment: ${error.message}`, {
        userId: user.id,
        taxRecordId: id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to process payment',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Get tax record statistics
   */
  @Get('statistics/summary')
  @Roles('admin', 'finance_manager', 'tax_specialist', 'viewer')
  @ApiOperation({ summary: 'Get tax record statistics' })
  @ApiQuery({ name: 'period', required: false, description: 'Statistics period (month, quarter, year)' })
  @ApiResponse({ status: 200, description: 'Statistics retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async getTaxRecordStatistics(
    @Query('period') period: 'month' | 'quarter' | 'year' = 'month',
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info('Retrieving tax record statistics', {
        userId: user.id,
        period,
        auditTrail: true
      });

      const statistics = await this.taxRecordService.getTaxRecordStatistics(period);

      res.status(HttpStatus.OK).json({
        success: true,
        data: statistics,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to retrieve tax record statistics: ${error.message}`, {
        userId: user.id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to retrieve tax record statistics',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Get tax records by tax year
   */
  @Get('year/:taxYear')
  @Roles('admin', 'finance_manager', 'tax_specialist', 'viewer')
  @ApiOperation({ summary: 'Get tax records by tax year' })
  @ApiParam({ name: 'taxYear', description: 'Tax year' })
  @ApiResponse({ status: 200, description: 'Tax records retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async getTaxRecordsByYear(
    @Param('taxYear') taxYear: string,
    @Query() query: any,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Retrieving tax records for year: ${taxYear}`, {
        userId: user.id,
        taxYear,
        auditTrail: true
      });

      const filters: TaxRecordFilters = {
        taxYear,
        page: query.page ? parseInt(query.page) : undefined,
        limit: query.limit ? parseInt(query.limit) : undefined,
        sortBy: query.sortBy,
        sortOrder: query.sortOrder,
      };

      const result: TaxRecordListResponse = await this.taxRecordService.listTaxRecords(filters);

      res.status(HttpStatus.OK).json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to retrieve tax records by year: ${error.message}`, {
        userId: user.id,
        taxYear,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to retrieve tax records by year',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Get tax records by employee
   */
  @Get('employee/:employeeId')
  @Roles('admin', 'finance_manager', 'tax_specialist', 'viewer')
  @ApiOperation({ summary: 'Get tax records by employee' })
  @ApiParam({ name: 'employeeId', description: 'Employee ID' })
  @ApiResponse({ status: 200, description: 'Tax records retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async getTaxRecordsByEmployee(
    @Param('employeeId') employeeId: string,
    @Query() query: any,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info(`Retrieving tax records for employee: ${employeeId}`, {
        userId: user.id,
        employeeId,
        auditTrail: true
      });

      const filters: TaxRecordFilters = {
        employeeId,
        page: query.page ? parseInt(query.page) : undefined,
        limit: query.limit ? parseInt(query.limit) : undefined,
        sortBy: query.sortBy,
        sortOrder: query.sortOrder,
      };

      const result: TaxRecordListResponse = await this.taxRecordService.listTaxRecords(filters);

      res.status(HttpStatus.OK).json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to retrieve tax records by employee: ${error.message}`, {
        userId: user.id,
        employeeId,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to retrieve tax records by employee',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }

  /**
   * Get overdue tax records
   */
  @Get('overdue/list')
  @Roles('admin', 'finance_manager', 'tax_specialist', 'viewer')
  @ApiOperation({ summary: 'Get overdue tax records' })
  @ApiResponse({ status: 200, description: 'Overdue tax records retrieved successfully' })
  @ApiResponse({ status: 401, description: 'Unauthorized' })
  @ApiResponse({ status: 403, description: 'Forbidden' })
  async getOverdueTaxRecords(
    @Query() query: any,
    @User() user: any,
    @Res() res: Response
  ): Promise<void> {
    try {
      logger.info('Retrieving overdue tax records', {
        userId: user.id,
        auditTrail: true
      });

      const filters: TaxRecordFilters = {
        isLate: true,
        page: query.page ? parseInt(query.page) : undefined,
        limit: query.limit ? parseInt(query.limit) : undefined,
        sortBy: query.sortBy,
        sortOrder: query.sortOrder,
      };

      const result: TaxRecordListResponse = await this.taxRecordService.listTaxRecords(filters);

      res.status(HttpStatus.OK).json({
        success: true,
        data: result,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      logger.error(`Failed to retrieve overdue tax records: ${error.message}`, {
        userId: user.id,
        error: error.stack,
        auditTrail: true
      });

      res.status(HttpStatus.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Failed to retrieve overdue tax records',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }
}

export default TaxRecordController;