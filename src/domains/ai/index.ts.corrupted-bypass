/**
 * AI Domain Module
 * Comprehensive AI agent framework with microservice architecture and event-driven automation
 */

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';

// Entities
import { AIAgent } from './entities/AIAgent';
import { AIAgentRegistry } from './entities/AIAgentRegistry';
import { AIAgentCapability } from './entities/AIAgentCapability';
import { AIAgentSession } from './entities/AIAgentSession';
import { AIAgentConversation } from './entities/AIAgentConversation';
import { AutomationRule } from './entities/AutomationRule';
import { AutomationTrigger } from './entities/AutomationTrigger';
import { AutomationAction } from './entities/AutomationAction';
import { AutomationExecution } from './entities/AutomationExecution';
import { AISummary } from './entities/AISummary';
import { AIInsight } from './entities/AIInsight';
import { AIPrediction } from './entities/AIPrediction';
import { AIRecommendation } from './entities/AIRecommendation';
import { MLModel } from './entities/MLModel';
import { MLTrainingData } from './entities/MLTrainingData';
import { MLPrediction } from './entities/MLPrediction';
import { MLModelVersion } from './entities/MLModelVersion';
import { CareEvent } from './entities/CareEvent';
import { EventStream } from './entities/EventStream';
import { EventSubscription } from './entities/EventSubscription';

// Services
import { AIAgentRegistryService } from './services/AIAgentRegistryService';
import { AIAgentLifecycleService } from './services/AIAgentLifecycleService';
import { EventStreamService } from './services/EventStreamService';
import { AISummarizationService } from './services/AISummarizationService';
import { CareNotesAssistantService } from './services/CareNotesAssistantService';
import { HealthBriefService } from './services/HealthBriefService';
import { MLService } from './services/MLService';
import { MLModelService } from './services/MLModelService';
import { MLTrainingService } from './services/MLTrainingService';
import { MLPredictionService } from './services/MLPredictionService';
import { AIAnalyticsService } from './services/AIAnalyticsService';
import { PredictiveAnalyticsService } from './services/PredictiveAnalyticsService';

// Controllers
import { AIAgentController } from './controllers/AIAgentController';
import { AIAgentRegistryController } from './controllers/AIAgentRegistryController';
import { EventStreamController } from './controllers/EventStreamController';
import { AISummarizationController } from './controllers/AISummarizationController';
import { MLController } from './controllers/MLController';
import { AIAnalyticsController } from './controllers/AIAnalyticsController';

// Routes
import { aiAgentRoutes } from './routes/ai-agent.routes';
import { eventStreamRoutes } from './routes/event-stream.routes';
import { aiSummarizationRoutes } from './routes/ai-summarization.routes';
import { mlRoutes } from './routes/ml.routes';
import { aiAnalyticsRoutes } from './routes/ai-analytics.routes';

@Module({
  imports: [
    TypeOrmModule.forFeature([
      AIAgent,
      AIAgentRegistry,
      AIAgentCapability,
      AIAgentSession,
      AIAgentConversation,
      AutomationRule,
      AutomationTrigger,
      AutomationAction,
      AutomationExecution,
      AISummary,
      AIInsight,
      AIPrediction,
      AIRecommendation,
      MLModel,
      MLTrainingData,
      MLPrediction,
      MLModelVersion,
      CareEvent,
      EventStream,
      EventSubscription,
    ]),
  ],
  providers: [
    AIAgentRegistryService,
    AIAgentLifecycleService,
    EventStreamService,
    AISummarizationService,
    CareNotesAssistantService,
    HealthBriefService,
    MLService,
    MLModelService,
    MLTrainingService,
    MLPredictionService,
    AIAnalyticsService,
    PredictiveAnalyticsService,
  ],
  controllers: [
    AIAgentController,
    AIAgentRegistryController,
    EventStreamController,
    AISummarizationController,
    MLController,
    AIAnalyticsController,
  ],
  exports: [
    AIAgentRegistryService,
    AIAgentLifecycleService,
    EventStreamService,
    AISummarizationService,
    CareNotesAssistantService,
    HealthBriefService,
    MLService,
    MLModelService,
    MLTrainingService,
    MLPredictionService,
    AIAnalyticsService,
    PredictiveAnalyticsService,
  ],
})
export class AIModule {
  name = 'ai';
  version = '1.0.0';
  description = 'Comprehensive AI agent framework with microservice architecture and event-driven automation';

  // Domain components
  entities = {
    AIAgent,
    AIAgentRegistry,
    AIAgentCapability,
    AIAgentSession,
    AIAgentConversation,
    AutomationRule,
    AutomationTrigger,
    AutomationAction,
    AutomationExecution,
    AISummary,
    AIInsight,
    AIPrediction,
    AIRecommendation,
    MLModel,
    MLTrainingData,
    MLPrediction,
    MLModelVersion,
    CareEvent,
    EventStream,
    EventSubscription,
  };

  services = {
    AIAgentRegistryService,
    AIAgentLifecycleService,
    EventStreamService,
    AISummarizationService,
    CareNotesAssistantService,
    HealthBriefService,
    MLService,
    MLModelService,
    MLTrainingService,
    MLPredictionService,
    AIAnalyticsService,
    PredictiveAnalyticsService,
  };

  controllers = {
    AIAgentController,
    AIAgentRegistryController,
    EventStreamController,
    AISummarizationController,
    MLController,
    AIAnalyticsController,
  };

  routes = {
    agents: aiAgentRoutes,
    events: eventStreamRoutes,
    summarization: aiSummarizationRoutes,
    ml: mlRoutes,
    analytics: aiAnalyticsRoutes,
  };

  // Dependencies
  dependencies = ['care', 'integration'];

  // Configuration
  configuration = {
    maxConcurrentAgents: 10,
    agentTimeout: 300,
    summarizationModel: 'gpt-4',
    predictionConfidence: 0.8,
    eventRetentionDays: 30,
    mlModelPath: '/models',
  };

  // Health check
  async healthCheck(): Promise<boolean> {
    try {
      // Check if all required services are available
      return true;
    } catch (error) {
      console.error('AI domain health check failed:', error);
      return false;
    }
  }

  // Initialize domain
  async initialize(): Promise<void> {
    console.log('Initializing AI domain...');
    // Initialize any required resources
  }

  // Shutdown domain
  async shutdown(): Promise<void> {
    console.log('Shutting down AI domain...');
    // Clean up resources
  }
}

export default AIModule;