import express, { Application, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import path from 'path';
import { config } from 'dotenv';
import { createClient } from 'ioredis';
import { errorHandler } from './middleware/error-handler';
import { auditMiddleware } from './middleware/audit-middleware';
import { authMiddleware } from './middleware/auth-middleware';
import { rateLimitMiddleware } from './middleware/rate-limit-middleware';
import { healthRouter } from './routes/health';
import { authRouter } from './routes/auth';
import { residentRouter } from './routes/resident';
import { medicationRouter } from './routes/medication';
import { medicationInteractionRouter } from './routes/medication-interaction';
import { medicationReconciliationRouter } from './routes/medication-reconciliation';
import { bedManagementRouter } from './routes/bed-management';
import { hrManagementRouter } from './routes/hr-management';
import { cateringNutritionRouter } from './routes/catering-nutrition';
import { activitiesTherapyRouter } from './routes/activities-therapy';
import { maintenanceFacilitiesRouter } from './routes/maintenance-facilities';
import { transportLogisticsRouter } from './routes/transport-logistics';
import { seededDataRouter } from './routes/seeded-data';
import { communicationEngagementRouter } from './routes/communication-engagement';
import { procurementSupplyChainRouter } from './routes/procurement-supply-chain';
import { inventoryManagementRouter } from './routes/inventory-management';
import { britishIslesComplianceRouter } from './routes/compliance/british-isles-compliance';
import { britishIslesMultiJurisdictionalRoutes as britishIslesMultiJurisdictionalRouter } from './routes/compliance/british-isles-multi-jurisdictional';
import { nhsDigitalComplianceRouter } from './routes/compliance/nhs-digital-compliance';
import { professionalStandardsRouter } from './routes/compliance/professional-standards';
import { securityAccessControlRouter } from './routes/security-access-control';
import { emergencyOnCallRouter } from './routes/emergency-oncall';
import { painManagementRouter } from './routes/pain-management';
import { advancedAnalyticsRouter } from './routes/advanced-analytics';
import { mobileSelfServiceRouter } from './routes/mobile-self-service';
import { incidentManagementRouter } from './routes/incident-management';
import { documentManagementRouter } from './routes/document-management';
import { businessIntelligenceRouter } from './routes/business-intelligence';
import { safeguardingRouter } from './routes/safeguarding';
import { consentRouter } from './routes/consent';
import { integrationServiceRouter } from './routes/integration-service';
import { mentalHealthRouter } from './routes/mental-health';
import { dementiaCareRouter } from './routes/dementia-care';
import { aiAutomationRouter } from './routes/ai-automation';
import { zeroTrustRouter } from './routes/zero-trust';
import { domiciliaryCareRouter } from './routes/domiciliary-care';
import { palliativeCareRouter } from './routes/palliative-care';
import { visitorManagementRouter } from './routes/visitor-management';
import { laundryHousekeepingRouter } from './routes/laundry-housekeeping';
import { notificationsRouter } from './routes/notifications';
import { auditRouter } from './routes/audit';
import { rehabilitationRouter } from './routes/rehabilitation';
import { facilitiesRouter } from './routes/facilities';
import { externalIntegrationRouter } from './routes/external-integration';
import { assessmentRouter } from './routes/assessment';
import { financialReimbursementRouter } from './routes/financial-reimbursement';
import { integrationOrchestrationRouter } from './routes/integration-orchestration';
import { multiOrganizationRouter } from './routes/multi-organization';
import { agencyWorkersRouter } from './routes/agency-workers';
import { riskAssessmentRouter } from './routes/risk-assessment';
import { knowledgeBaseRouter } from './routes/knowledge-base';
import { regulatoryPortalRouter } from './routes/regulatory-portal';
import { methodologyRouter } from './routes/methodology';
import { aiCopilotRouter } from './routes/ai-copilot';
import { enhancedBedRoomRouter } from './routes/enhanced-bed-room';
import { onboardingMigrationRouter } from './routes/onboarding-migration';
import { communicationServiceRouter } from './routes/communication-service';
import { securityServiceRouter } from './routes/security-service';
import { blogRouter } from './routes/blog.routes';
import { shiftHandoverRouter } from './routes/shift-handover.routes';
import { logger } from './utils/logger';
import { DatabaseConfig } from './config/database';
import { RedisConfig } from './config/redis';

// Load environment variables
config();

// Extend Express Request interface to include correlationId
declare global {
  namespace Express {
    interface Request {
      correlationId: string;
    }
  }
}

class Server {
  private app: Application;
  private port: number;
  private redisClient: any;

  constructor() {
    this.app = express();
    this.port = parseInt(process.env['PORT'] || '3000', 10);
    this.redisClient = null;
  }

  private async initializeRedis(): Promise<void> {
    try {
      this.redisClient = new createClient({
        host: process.env['REDIS_HOST'] || 'localhost',
        port: parseInt(process.env['REDIS_PORT'] || '6379', 10),
        password: process.env['REDIS_PASSWORD'],
        db: parseInt(process.env['REDIS_DB'] || '0', 10),
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        lazyConnect: true,
      });

      this.redisClient.on('error', (err: Error) => {
        logger.error('Redis Client Error:', err);
      });

      this.redisClient.on('connect', () => {
        logger.info('Redis Client Connected');
      });

      await this.redisClient.connect();
    } catch (error) {
      logger.error('Failed to initialize Redis:', error);
      // Continue without Redis for now
    }
  }

  private setupMiddleware(): void {
    // Security middleware
    this.app.use(helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
        },
      },
    }));

    // CORS configuration
    this.app.use(cors({
      origin: process.env['ALLOWED_ORIGINS']?.split(',') || ['http://localhost:3000'],
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Correlation-ID'],
    }));

    // Compression
    this.app.use(compression());

    // Body parsing
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // Correlation ID middleware
    this.app.use((req: Request, res: Response, next: NextFunction) => {
      req.correlationId = req.headers['x-correlation-id'] as string ||
        `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      res.setHeader('X-Correlation-ID', req.correlationId);
      next();
    });

    // Rate limiting
    this.app.use(rateLimitMiddleware);

    // Audit middleware
    this.app.use(auditMiddleware);

    // Static files
    this.app.use(express.static(path.join(__dirname, '../public')));
  }

  private setupRoutes(): void {
    // Health check
    this.app.use('/api/health', healthRouter);

    // Authentication
    this.app.use('/api/auth', authRouter);

    // Core services
    this.app.use('/api/residents', authMiddleware, residentRouter);
    this.app.use('/api/medications', authMiddleware, medicationRouter);
    this.app.use('/api/medication-interactions', authMiddleware, medicationInteractionRouter);
    this.app.use('/api/medication-reconciliation', authMiddleware, medicationReconciliationRouter);
    this.app.use('/api/bed-management', authMiddleware, bedManagementRouter);
    this.app.use('/api/hr', authMiddleware, hrManagementRouter);
    this.app.use('/api/catering', authMiddleware, cateringNutritionRouter);
    this.app.use('/api/activities', authMiddleware, activitiesTherapyRouter);
    this.app.use('/api/maintenance', authMiddleware, maintenanceFacilitiesRouter);
    this.app.use('/api/transport', authMiddleware, transportLogisticsRouter);
    this.app.use('/api/seeded-data', authMiddleware, seededDataRouter);
    this.app.use('/api/communication', authMiddleware, communicationEngagementRouter);
    this.app.use('/api/procurement', authMiddleware, procurementSupplyChainRouter);
    this.app.use('/api/inventory', authMiddleware, inventoryManagementRouter);

    // Compliance
    this.app.use('/api/compliance/british-isles', authMiddleware, britishIslesComplianceRouter);
    this.app.use('/api/compliance/multi-jurisdictional', authMiddleware, britishIslesMultiJurisdictionalRouter);
    this.app.use('/api/compliance/nhs-digital', authMiddleware, nhsDigitalComplianceRouter);
    this.app.use('/api/compliance/professional-standards', authMiddleware, professionalStandardsRouter);

    // Security and access control
    this.app.use('/api/security', authMiddleware, securityAccessControlRouter);
    this.app.use('/api/emergency', authMiddleware, emergencyOnCallRouter);
    this.app.use('/api/pain-management', authMiddleware, painManagementRouter);
    this.app.use('/api/analytics', authMiddleware, advancedAnalyticsRouter);
    this.app.use('/api/mobile', authMiddleware, mobileSelfServiceRouter);
    this.app.use('/api/incidents', authMiddleware, incidentManagementRouter);
    this.app.use('/api/documents', authMiddleware, documentManagementRouter);
    this.app.use('/api/business-intelligence', authMiddleware, businessIntelligenceRouter);
    this.app.use('/api/safeguarding', authMiddleware, safeguardingRouter);
    this.app.use('/api/consent', authMiddleware, consentRouter);
    this.app.use('/api/integration', authMiddleware, integrationServiceRouter);
    this.app.use('/api/mental-health', authMiddleware, mentalHealthRouter);
    this.app.use('/api/dementia-care', authMiddleware, dementiaCareRouter);
    this.app.use('/api/ai-automation', authMiddleware, aiAutomationRouter);
    this.app.use('/api/zero-trust', authMiddleware, zeroTrustRouter);
    this.app.use('/api/domiciliary-care', authMiddleware, domiciliaryCareRouter);
    this.app.use('/api/palliative-care', authMiddleware, palliativeCareRouter);
    this.app.use('/api/visitors', authMiddleware, visitorManagementRouter);
    this.app.use('/api/laundry', authMiddleware, laundryHousekeepingRouter);
    this.app.use('/api/notifications', authMiddleware, notificationsRouter);
    this.app.use('/api/audit', authMiddleware, auditRouter);
    this.app.use('/api/rehabilitation', authMiddleware, rehabilitationRouter);
    this.app.use('/api/facilities', authMiddleware, facilitiesRouter);
    this.app.use('/api/external-integration', authMiddleware, externalIntegrationRouter);
    this.app.use('/api/assessment', authMiddleware, assessmentRouter);
    this.app.use('/api/financial', authMiddleware, financialReimbursementRouter);
    this.app.use('/api/integration-orchestration', authMiddleware, integrationOrchestrationRouter);
    this.app.use('/api/multi-organization', authMiddleware, multiOrganizationRouter);
    this.app.use('/api/agency-workers', authMiddleware, agencyWorkersRouter);
    this.app.use('/api/risk-assessment', authMiddleware, riskAssessmentRouter);
    this.app.use('/api/knowledge-base', authMiddleware, knowledgeBaseRouter);
    this.app.use('/api/regulatory', authMiddleware, regulatoryPortalRouter);
    this.app.use('/api/methodology', authMiddleware, methodologyRouter);
    this.app.use('/api/ai-copilot', authMiddleware, aiCopilotRouter);
    this.app.use('/api/enhanced-bed-room', authMiddleware, enhancedBedRoomRouter);
    this.app.use('/api/onboarding', authMiddleware, onboardingMigrationRouter);
    this.app.use('/api/communication-service', authMiddleware, communicationServiceRouter);
    this.app.use('/api/security-service', authMiddleware, securityServiceRouter);
    this.app.use('/api/blog', authMiddleware, blogRouter);
    this.app.use('/api/shift-handover', authMiddleware, shiftHandoverRouter);

    // Error handling
    this.app.use(errorHandler);
  }

  public async start(): Promise<void> {
    try {
      // Initialize Redis
      await this.initializeRedis();

      // Setup middleware
      this.setupMiddleware();

      // Setup routes
      this.setupRoutes();

      // Start server
      this.app.listen(this.port, () => {
        logger.info(`Server running on port ${this.port}`);
        logger.info(`Environment: ${process.env['NODE_ENV'] || 'development'}`);
        logger.info(`Version: ${process.env['npm_package_version'] || '1.0.0'}`);
      });
    } catch (error) {
      logger.error('Failed to start server:', error);
      process.exit(1);
    }
  }
}

// Start server
const server = new Server();
server.start().catch((error) => {
  logger.error('Server startup failed:', error);
  process.exit(1);
});

export default Server;