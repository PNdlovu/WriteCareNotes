import { EventEmitter2 } from "eventemitter2";

import { Repository } from 'typeorm';

import { ResidentStatus } from '../entities/Resident';
import AppDataSource from '../../config/database';
import { Resident } from '../../entities/resident/Resident';
import { Bed, BedType, BedStatus, CareLevel } from '../../entities/bed/Bed';
import { Room, RoomType } from '../../entities/bed/Room';
import { Employee, EmploymentStatus, ContractType } from '../../entities/hr/Employee';
import { Menu, MenuType, MealType } from '../../entities/catering/Menu';
import { ResidentDietaryProfile } from '../../entities/catering/ResidentDietaryProfile';
import { Activity, ActivityType, ActivityCategory } from '../../entities/activities/Activity';
import { Asset, AssetType, AssetStatus } from '../../entities/maintenance/Asset';
import { Vehicle, VehicleType, VehicleStatus, FuelType } from '../../entities/transport/Vehicle';
import { WaitingListEntry, WaitingListPriority, FundingSource } from '../../entities/bed/WaitingListEntry';

export class SeededDataService {
  private residentRepository: Repository<Resident>;
  private bedRepository: Repository<Bed>;
  private roomRepository: Repository<Room>;
  private employeeRepository: Repository<Employee>;
  private menuRepository: Repository<Menu>;
  private dietaryProfileRepository: Repository<ResidentDietaryProfile>;
  private activityRepository: Repository<Activity>;
  private assetRepository: Repository<Asset>;
  private vehicleRepository: Repository<Vehicle>;
  private waitingListRepository: Repository<WaitingListEntry>;

  constructor() {
    this.residentRepository = AppDataSource.getRepository(Resident);
    this.bedRepository = AppDataSource.getRepository(Bed);
    this.roomRepository = AppDataSource.getRepository(Room);
    this.employeeRepository = AppDataSource.getRepository(Employee);
    this.menuRepository = AppDataSource.getRepository(Menu);
    this.dietaryProfileRepository = AppDataSource.getRepository(ResidentDietaryProfile);
    this.activityRepository = AppDataSource.getRepository(Activity);
    this.assetRepository = AppDataSource.getRepository(Asset);
    this.vehicleRepository = AppDataSource.getRepository(Vehicle);
    this.waitingListRepository = AppDataSource.getRepository(WaitingListEntry);
  }

  async seedAllData(): Promise<void> {
    console.log('üå± Starting comprehensive data seeding...');
    
    try {
      await this.seedRooms();
      await this.seedBeds();
      await this.seedResidents();
      await this.seedEmployees();
      await this.seedMenus();
      await this.seedDietaryProfiles();
      await this.seedActivities();
      await this.seedAssets();
      await this.seedVehicles();
      await this.seedWaitingList();
      
      console.log('‚úÖ All seeded data created successfully!');
    } catch (error: unknown) {
      console.error('‚ùå Error seeding data:', error);
      throw error;
    }
  }

  private async seedRooms(): Promise<Room[]> {
    console.log('üè† Seeding rooms...');
    
    const roomsData = [
      // Ground Floor Rooms
      { roomNumber: 'G01', floor: 0, wing: 'East', roomType: RoomType.SINGLE, size: 15.5, maxOccupancy: 1 },
      { roomNumber: 'G02', floor: 0, wing: 'East', roomType: RoomType.SINGLE, size: 16.2, maxOccupancy: 1 },
      { roomNumber: 'G03', floor: 0, wing: 'East', roomType: RoomType.DOUBLE, size: 22.8, maxOccupancy: 2 },
      { roomNumber: 'G04', floor: 0, wing: 'West', roomType: RoomType.SUITE, size: 28.5, maxOccupancy: 1 },
      { roomNumber: 'G05', floor: 0, wing: 'West', roomType: RoomType.SINGLE, size: 15.8, maxOccupancy: 1 },
      
      // First Floor Rooms
      { roomNumber: 'F01', floor: 1, wing: 'North', roomType: RoomType.SINGLE, size: 16.0, maxOccupancy: 1 },
      { roomNumber: 'F02', floor: 1, wing: 'North', roomType: RoomType.DOUBLE, size: 24.2, maxOccupancy: 2 },
      { roomNumber: 'F03', floor: 1, wing: 'South', roomType: RoomType.SINGLE, size: 15.5, maxOccupancy: 1 },
      { roomNumber: 'F04', floor: 1, wing: 'South', roomType: RoomType.SUITE, size: 30.0, maxOccupancy: 1 },
      { roomNumber: 'F05', floor: 1, wing: 'South', roomType: RoomType.SHARED, size: 35.0, maxOccupancy: 4 }
    ];

    const rooms = [];
    for (const roomData of roomsData) {
      const room = this.roomRepository.create({
        ...roomData,
        layout: 'standard' as any,
        amenities: ['private_bathroom', 'call_system', 'wifi', 'television'],
        environmentalControls: {
          temperature: { current: 22, target: 22, range: { min: 20, max: 25 } },
          humidity: { current: 45, target: 45, range: { min: 40, max: 60 } },
          lighting: { natural: true, artificial: ['led_ceiling', 'bedside'], dimmable: true },
          airQuality: { ventilation: 'mechanical', filtration: 'hepa', airChangesPerHour: 6 }
        },
        safetyFeatures: {
          fireDetection: true,
          smokeDetectors: 2,
          sprinklerSystem: true,
          emergencyExits: 1,
          emergencyCallPoints: 2,
          securityCameras: false,
          windowRestrictions: true,
          nonSlipFlooring: true
        },
        currentOccupancy: 0,
        maintenanceHistory: [],
        beds: []
      });
      
      const savedRoom = await this.roomRepository.save(room);
      rooms.push(savedRoom);
    }
    
    console.log(`‚úÖ Created ${rooms.length} rooms`);
    return rooms;
  }

  private async seedBeds(): Promise<Bed[]> {
    console.log('üõèÔ∏è Seeding beds...');
    
    const rooms = await this.roomRepository.find();
    const beds = [];
    
    for (const room of rooms) {
      const bedsInRoom = room.roomType === RoomType.DOUBLE ? 2 : 
                        room.roomType === RoomType.SHARED ? 4 : 1;
      
      for (let i = 1; i <= bedsInRoom; i++) {
        const bedNumber = `${room.roomNumber}-${i.toString().padStart(2, '0')}`;
        
        const bed = this.bedRepository.create({
          bedNumber,
          roomId: room.id,
          bedType: this.getRandomBedType(),
          status: BedStatus.AVAILABLE,
          careLevel: this.getRandomCareLevel(),
          specifications: {
            length: 200,
            width: 90,
            height: 50,
            weightCapacity: 150,
            adjustable: true,
            sideRails: true,
            electricControls: true,
            pressureReliefMattress: true
          },
          equipment: [
            {
              id: crypto.randomUUID(),
              name: 'Pressure Relief Mattress',
              type: 'medical',
              serialNumber: `PRM${Date.now()}${i}`,
              lastInspectionDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
              nextInspectionDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),
              status: 'operational'
            }
          ],
          accessibility: {
            wheelchairAccessible: true,
            hoistCompatible: true,
            lowHeight: false,
            wideDoor: true,
            emergencyCallSystem: true
          },
          occupancyHistory: [],
          lastMaintenanceDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
          nextMaintenanceDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
          maintenanceSchedule: {
            id: crypto.randomUUID(),
            frequency: 'monthly',
            lastMaintenanceDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
            nextMaintenanceDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
            maintenanceType: 'routine_inspection',
            assignedTechnician: 'maintenance_team'
          },
          baseRate: { amount: 850, currency: 'GBP' },
          currentRate: { amount: 900, currency: 'GBP' },
          rateHistory: [
            {
              effectiveDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),
              rate: { amount: 850, currency: 'GBP' },
              reason: 'Initial rate setting',
              approvedBy: 'finance_manager'
            }
          ],
          availabilityCalendar: [],
          reservations: []
        });
        
        const savedBed = await this.bedRepository.save(bed);
        beds.push(savedBed);
      }
    }
    
    console.log(`‚úÖ Created ${beds.length} beds`);
    return beds;
  }

  private async seedResidents(): Promise<Resident[]> {
    console.log('üë• Seeding residents...');
    
    const residentsData = [
      {
        residentNumber: 'RES001',
        firstName: 'Margaret',
        lastName: 'Thompson',
        dateOfBirth: new Date('1935-03-15'),
        nhsNumber: '1234567890',
        emergencyContact: {
          name: 'Sarah Thompson',
          relationship: 'Daughter',
          phoneNumber: '+44 7700 900123',
          email: 'sarah.thompson@email.com'
        }
      },
      {
        residentNumber: 'RES002',
        firstName: 'James',
        lastName: 'Wilson',
        dateOfBirth: new Date('1940-07-22'),
        nhsNumber: '2345678901',
        emergencyContact: {
          name: 'Michael Wilson',
          relationship: 'Son',
          phoneNumber: '+44 7700 900234',
          email: 'michael.wilson@email.com'
        }
      },
      {
        residentNumber: 'RES003',
        firstName: 'Dorothy',
        lastName: 'Evans',
        dateOfBirth: new Date('1938-11-08'),
        nhsNumber: '3456789012',
        emergencyContact: {
          name: 'Robert Evans',
          relationship: 'Husband',
          phoneNumber: '+44 7700 900345',
          email: 'robert.evans@email.com'
        }
      }
    ];

    const residents = [];
    for (const residentData of residentsData) {
      const resident = this.residentRepository.create({
        ...residentData,
        admissionDate: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000),
        status: ResidentStatus.ACTIVE as any,
        careLevel: this.getRandomCareLevel()[0],
        medicalHistory: [],
        allergies: [],
        medications: [],
        carePlans: []
      });
      
      const savedResident = await this.residentRepository.save(resident);
      residents.push(savedResident);
    }
    
    console.log(`‚úÖ Created ${residents.length} residents`);
    return residents;
  }

  private async seedEmployees(): Promise<Employee[]> {
    console.log('üë®‚Äç‚öïÔ∏è Seeding employees...');
    
    const employeesData = [
      {
        personalDetails: {
          firstName: 'Dr. Sarah',
          lastName: 'Johnson',
          dateOfBirth: new Date('1980-05-15'),
          nationalInsuranceNumber: 'AB123456C',
          address: {
            line1: '123 Healthcare Street',
            city: 'Birmingham',
            county: 'West Midlands',
            postcode: 'B1 1AA',
            country: 'United Kingdom'
          }
        },
        jobDetails: {
          jobTitle: 'Care Manager',
          department: 'Care',
          baseSalary: 45000,
          contractType: ContractType.PERMANENT
        }
      },
      {
        personalDetails: {
          firstName: 'Michael',
          lastName: 'Brown',
          dateOfBirth: new Date('1985-09-22'),
          nationalInsuranceNumber: 'CD789012E',
          address: {
            line1: '456 Care Avenue',
            city: 'Birmingham',
            county: 'West Midlands',
            postcode: 'B2 2BB',
            country: 'United Kingdom'
          }
        },
        jobDetails: {
          jobTitle: 'Senior Care Assistant',
          department: 'Care',
          baseSalary: 28000,
          contractType: ContractType.PERMANENT
        }
      },
      {
        personalDetails: {
          firstName: 'Emma',
          lastName: 'Davis',
          dateOfBirth: new Date('1990-12-03'),
          nationalInsuranceNumber: 'FG345678H',
          address: {
            line1: '789 Nursing Road',
            city: 'Birmingham',
            county: 'West Midlands',
            postcode: 'B3 3CC',
            country: 'United Kingdom'
          }
        },
        jobDetails: {
          jobTitle: 'Registered Nurse',
          department: 'Nursing',
          baseSalary: 38000,
          contractType: ContractType.PERMANENT
        }
      }
    ];

    const employees = [];
    for (let i = 0; i < employeesData.length; i++) {
      const empData = employeesData[i];
      const employee = this.employeeRepository.create({
        employeeNumber: `EMP2024${String(i + 1).padStart(4, '0')}`,
        personalDetails: empData.personalDetails,
        contactInformation: {
          primaryPhone: `+44 7700 90${String(i + 1).padStart(4, '0')}`,
          email: `${empData.personalDetails.firstName.toLowerCase().replace(/\s+/g, '')}.${empData.personalDetails.lastName.toLowerCase()}@careHome.co.uk`,
          emergencyContact: {
            name: 'Emergency Contact',
            relationship: 'Family',
            phone: `+44 7700 80${String(i + 1).padStart(4, '0')}`
          }
        },
        employmentInformation: {
          startDate: new Date(Date.now() - Math.random() * 1095 * 24 * 60 * 60 * 1000), // Up to 3 years ago
          department: empData.jobDetails.department,
          location: 'Main Building',
          reportsTo: i === 0 ? 'admin' : 'EMP20240001',
          employmentStatus: EmploymentStatus.ACTIVE
        },
        jobDetails: {
          ...empData.jobDetails,
          jobDescription: `Responsible for ${empData.jobDetails.department.toLowerCase()} operations`,
          payGrade: 'Grade ' + (i + 3),
          salaryBand: 'Band ' + (i + 2),
          currency: 'GBP',
          workingHours: 37.5,
          payrollFrequency: 'monthly' as any
        },
        contractInformation: {
          contractNumber: `CON2024${String(i + 1).padStart(4, '0')}`,
          contractStartDate: new Date(Date.now() - Math.random() * 1095 * 24 * 60 * 60 * 1000),
          noticePeriod: 30,
          holidayEntitlement: 28,
          benefits: ['pension', 'health_insurance', 'training_budget'],
          restrictiveCovenants: ['confidentiality', 'non_compete']
        },
        rightToWorkDocuments: [{
          id: crypto.randomUUID(),
          documentType: 'UK Passport',
          documentNumber: `PAS${Date.now()}${i}`,
          issueDate: new Date(Date.now() - 2000 * 24 * 60 * 60 * 1000),
          expiryDate: new Date(Date.now() + 3000 * 24 * 60 * 60 * 1000),
          issuingAuthority: 'UK Government',
          verificationDate: new Date(),
          verifiedBy: 'hr_manager',
          status: 'valid'
        }],
        rightToWorkStatus: 'verified' as any,
        qualifications: [],
        certifications: [],
        professionalRegistrations: [],
        skills: [],
        competencies: [],
        performanceHistory: [],
        trainingRecords: [],
        disciplinaryRecords: []
      });
      
      const savedEmployee = await this.employeeRepository.save(employee);
      employees.push(savedEmployee);
    }
    
    console.log(`‚úÖ Created ${employees.length} employees`);
    return employees;
  }

  private async seedMenus(): Promise<Menu[]> {
    console.log('üçΩÔ∏è Seeding menus...');
    
    const standardMenu = this.menuRepository.create({
      menuName: 'Standard Weekly Menu - Winter 2024',
      menuType: MenuType.STANDARD,
      effectiveDate: new Date(),
      menuItems: {
        [MealType.BREAKFAST]: [
          {
            id: crypto.randomUUID(),
            name: 'Full English Breakfast',
            description: 'Eggs, bacon, sausage, baked beans, grilled tomato, toast',
            ingredients: ['eggs', 'bacon', 'sausage', 'baked beans', 'tomato', 'bread'],
            allergens: [
              { name: 'eggs', present: true, mayContain: false },
              { name: 'gluten', present: true, mayContain: false }
            ],
            nutritionalInfo: {
              calories: 450,
              protein: 25,
              carbohydrates: 35,
              fat: 28,
              fiber: 8,
              sodium: 1200,
              sugar: 12,
              vitamins: { 'B12': 2.5, 'D': 1.2 },
              minerals: { 'iron': 3.5, 'calcium': 150 }
            },
            textureModifications: ['regular', 'soft', 'minced_moist'],
            preparationTime: 15,
            cost: 4.50,
            portionSize: 'standard',
            dietaryFlags: ['high_protein']
          }
        ],
        [MealType.LUNCH]: [
          {
            id: crypto.randomUUID(),
            name: 'Roast Chicken with Vegetables',
            description: 'Roasted chicken breast with seasonal vegetables and gravy',
            ingredients: ['chicken breast', 'carrots', 'broccoli', 'potatoes', 'gravy'],
            allergens: [
              { name: 'gluten', present: true, mayContain: false }
            ],
            nutritionalInfo: {
              calories: 380,
              protein: 35,
              carbohydrates: 25,
              fat: 15,
              fiber: 6,
              sodium: 800,
              sugar: 8,
              vitamins: { 'A': 120, 'C': 45 },
              minerals: { 'potassium': 650, 'phosphorus': 280 }
            },
            textureModifications: ['regular', 'soft', 'minced_moist', 'pureed'],
            preparationTime: 45,
            cost: 6.75,
            portionSize: 'standard',
            dietaryFlags: ['high_protein', 'low_fat']
          }
        ],
        [MealType.DINNER]: [
          {
            id: crypto.randomUUID(),
            name: 'Shepherd\'s Pie with Green Beans',
            description: 'Traditional shepherd\'s pie with lamb mince and mashed potato topping',
            ingredients: ['lamb mince', 'potatoes', 'onions', 'carrots', 'green beans'],
            allergens: [
              { name: 'milk', present: true, mayContain: false }
            ],
            nutritionalInfo: {
              calories: 420,
              protein: 28,
              carbohydrates: 32,
              fat: 20,
              fiber: 5,
              sodium: 900,
              sugar: 6,
              vitamins: { 'B6': 0.8, 'B12': 1.5 },
              minerals: { 'iron': 4.2, 'zinc': 3.8 }
            },
            textureModifications: ['regular', 'soft', 'minced_moist'],
            preparationTime: 60,
            cost: 5.25,
            portionSize: 'standard',
            dietaryFlags: ['traditional', 'comfort_food']
          }
        ]
      },
      nutritionalTargets: {
        dailyCalories: 1800,
        dailyProtein: 70,
        dailySodium: 2000,
        dailyFiber: 25
      },
      menuCycle: {
        id: crypto.randomUUID(),
        cycleName: 'Winter 2024 Cycle',
        duration: 28,
        startDate: new Date(),
        endDate: new Date(Date.now() + 28 * 24 * 60 * 60 * 1000),
        isActive: true
      },
      approvedBy: 'head_chef',
      approvalDate: new Date()
    });

    const savedMenu = await this.menuRepository.save(standardMenu);
    console.log(`‚úÖ Created standard menu`);
    return [savedMenu];
  }

  private async seedActivities(): Promise<Activity[]> {
    console.log('üéØ Seeding activities...');
    
    const activitiesData = [
      {
        activityName: 'Morning Exercise Class',
        activityType: ActivityType.PHYSICAL,
        category: ActivityCategory.EXERCISE_CLASS,
        facilitator: 'EMP20240002',
        location: 'Main Lounge',
        maxParticipants: 12,
        requirements: {
          minimumMobility: 'chair_bound_acceptable',
          cognitiveLevel: 'any',
          equipmentNeeded: ['exercise_bands', 'light_weights'],
          spaceRequirements: 'large_room',
          staffRatio: 6,
          duration: 45
        },
        therapeuticGoals: {
          primary: ['improve_mobility', 'maintain_strength'],
          secondary: ['social_interaction', 'mood_improvement'],
          measurableOutcomes: ['range_of_motion', 'grip_strength', 'balance'],
          targetTimeframe: '12_weeks'
        }
      },
      {
        activityName: 'Reminiscence Therapy',
        activityType: ActivityType.COGNITIVE,
        category: ActivityCategory.REMINISCENCE,
        facilitator: 'EMP20240001',
        location: 'Quiet Room',
        maxParticipants: 8,
        requirements: {
          minimumMobility: 'any',
          cognitiveLevel: 'mild_cognitive_impairment_acceptable',
          equipmentNeeded: ['photo_albums', 'music_player', 'artifacts'],
          spaceRequirements: 'comfortable_seating',
          staffRatio: 4,
          duration: 60
        },
        therapeuticGoals: {
          primary: ['cognitive_stimulation', 'memory_recall'],
          secondary: ['emotional_wellbeing', 'social_connection'],
          measurableOutcomes: ['engagement_level', 'memory_recall_accuracy', 'mood_scores'],
          targetTimeframe: '8_weeks'
        }
      }
    ];

    const activities = [];
    for (const activityData of activitiesData) {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(10, 0, 0, 0);
      
      const activity = this.activityRepository.create({
        ...activityData,
        scheduledStartTime: tomorrow,
        scheduledEndTime: new Date(tomorrow.getTime() + activityData.requirements.duration * 60 * 1000),
        status: 'scheduled',
        targetResidents: [],
        outcomes: [],
        resources: activityData.requirements.equipmentNeeded.map(equipment => ({
          resourceType: 'equipment',
          name: equipment,
          quantity: 1,
          availability: 'available',
          cost: 0
        })),
        isRecurring: true,
        recurrencePattern: {
          frequency: 'weekly',
          interval: 1,
          daysOfWeek: ['monday', 'wednesday', 'friday']
        }
      });
      
      const savedActivity = await this.activityRepository.save(activity);
      activities.push(savedActivity);
    }
    
    console.log(`‚úÖ Created ${activities.length} activities`);
    return activities;
  }

  private async seedAssets(): Promise<Asset[]> {
    console.log('üîß Seeding assets...');
    
    const assetsData = [
      {
        assetName: 'Main HVAC System',
        assetType: AssetType.HVAC,
        location: 'Basement',
        department: 'Facilities',
        purchasePrice: 25000,
        specifications: {
          manufacturer: 'Climate Control Ltd',
          model: 'CC-5000',
          serialNumber: 'CC5000-2020-001',
          yearManufactured: 2020,
          technicalSpecs: {
            capacity: '50kW',
            efficiency: '95%',
            refrigerant: 'R410A'
          },
          operatingParameters: {
            maxTemperature: 30,
            minTemperature: 15,
            maxHumidity: 70,
            minHumidity: 30
          }
        }
      },
      {
        assetName: 'Kitchen Oven - Main',
        assetType: AssetType.KITCHEN_EQUIPMENT,
        location: 'Kitchen',
        department: 'Catering',
        purchasePrice: 8500,
        specifications: {
          manufacturer: 'Professional Kitchens Inc',
          model: 'PK-OVEN-500',
          serialNumber: 'PKO500-2021-003',
          yearManufactured: 2021,
          technicalSpecs: {
            capacity: '6 trays',
            powerRating: '15kW',
            gasConnection: 'Natural Gas'
          },
          operatingParameters: {
            maxTemperature: 300,
            minTemperature: 50
          }
        }
      },
      {
        assetName: 'Fire Alarm Control Panel',
        assetType: AssetType.FIRE_SAFETY,
        location: 'Reception',
        department: 'Safety',
        purchasePrice: 3200,
        specifications: {
          manufacturer: 'Fire Safety Systems',
          model: 'FSS-CP-200',
          serialNumber: 'FSS200-2019-012',
          yearManufactured: 2019,
          technicalSpecs: {
            zones: '20',
            detectorCapacity: '200',
            backupBattery: '24 hours'
          },
          operatingParameters: {}
        }
      }
    ];

    const assets = [];
    for (let i = 0; i < assetsData.length; i++) {
      const assetData = assetsData[i];
      const asset = this.assetRepository.create({
        assetNumber: `${assetData.assetType.substring(0, 3).toUpperCase()}${String(i + 1).padStart(4, '0')}`,
        ...assetData,
        status: AssetStatus.OPERATIONAL,
        purchaseDate: new Date(Date.now() - Math.random() * 1460 * 24 * 60 * 60 * 1000), // Up to 4 years ago
        installationDate: new Date(Date.now() - Math.random() * 1460 * 24 * 60 * 60 * 1000),
        depreciationRate: 10, // 10% per year
        maintenanceHistory: [],
        lastMaintenanceDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        nextMaintenanceDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),
        monitoringData: [],
        complianceCertifications: [
          {
            certificationType: 'Safety Compliance',
            certificationBody: 'UK Safety Authority',
            certificateNumber: `SC${Date.now()}${i}`,
            issueDate: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000),
            expiryDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),
            status: 'valid',
            inspectionRequired: true,
            nextInspectionDate: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000)
          }
        ],
        responsiblePerson: 'facilities_manager',
        isActive: true
      });
      
      const savedAsset = await this.assetRepository.save(asset);
      assets.push(savedAsset);
    }
    
    console.log(`‚úÖ Created ${assets.length} assets`);
    return assets;
  }

  private async seedVehicles(): Promise<Vehicle[]> {
    console.log('üöê Seeding vehicles...');
    
    const vehiclesData = [
      {
        vehicleType: VehicleType.WHEELCHAIR_ACCESSIBLE,
        specifications: {
          make: 'Ford',
          model: 'Transit',
          year: 2022,
          registrationNumber: 'CH22 CAR',
          vin: 'WF0XXXTTGXXX12345',
          fuelType: FuelType.DIESEL,
          engineSize: 2.0,
          seatingCapacity: 8,
          wheelchairSpaces: 2,
          accessibility: {
            wheelchairLift: true,
            ramp: false,
            secureWheelchairPositions: 2,
            hearingLoop: true,
            emergencyEquipment: ['first_aid_kit', 'fire_extinguisher', 'emergency_hammer']
          }
        },
        purchasePrice: 45000
      },
      {
        vehicleType: VehicleType.CAR,
        specifications: {
          make: 'Toyota',
          model: 'Corolla',
          year: 2021,
          registrationNumber: 'CH21 CAR',
          vin: 'JTDXXXXX0X0123456',
          fuelType: FuelType.HYBRID,
          engineSize: 1.8,
          seatingCapacity: 5,
          wheelchairSpaces: 0,
          accessibility: {
            wheelchairLift: false,
            ramp: false,
            secureWheelchairPositions: 0,
            hearingLoop: false,
            emergencyEquipment: ['first_aid_kit', 'emergency_triangle']
          }
        },
        purchasePrice: 28000
      }
    ];

    const vehicles = [];
    for (let i = 0; i < vehiclesData.length; i++) {
      const vehicleData = vehiclesData[i];
      const vehicle = this.vehicleRepository.create({
        vehicleNumber: `VEH${String(i + 1).padStart(3, '0')}`,
        ...vehicleData,
        status: VehicleStatus.AVAILABLE,
        insurance: {
          provider: 'Care Home Insurance Ltd',
          policyNumber: `CHI${Date.now()}${i}`,
          startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
          expiryDate: new Date(Date.now() + 335 * 24 * 60 * 60 * 1000),
          coverageType: ['comprehensive', 'public_liability', 'passenger_liability'],
          excessAmount: 500,
          premiumAmount: 2400
        },
        purchaseDate: new Date(Date.now() - Math.random() * 730 * 24 * 60 * 60 * 1000),
        currentMileage: Math.floor(Math.random() * 50000) + 10000,
        maintenanceHistory: [],
        lastServiceDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),
        nextServiceDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
        motExpiryDate: new Date(Date.now() + 200 * 24 * 60 * 60 * 1000),
        fuelRecords: [],
        journeyHistory: [],
        isActive: true
      });
      
      const savedVehicle = await this.vehicleRepository.save(vehicle);
      vehicles.push(savedVehicle);
    }
    
    console.log(`‚úÖ Created ${vehicles.length} vehicles`);
    return vehicles;
  }

  private async seedWaitingList(): Promise<WaitingListEntry[]> {
    console.log('üìã Seeding waiting list...');
    
    const waitingListData = [
      {
        prospectiveResidentName: 'John Smith',
        dateOfBirth: new Date('1942-08-15'),
        nhsNumber: '4567890123',
        priority: WaitingListPriority.HIGH,
        fundingSource: FundingSource.NHS_CHC,
        contactDetails: [{
          name: 'Mary Smith',
          relationship: 'Wife',
          phoneNumber: '+44 7700 900456',
          email: 'mary.smith@email.com',
          isPrimaryContact: true
        }],
        medicalRequirements: {
          careLevel: [CareLevel.NURSING],
          specialistCare: ['diabetes_management'],
          mobilitySupport: ['wheelchair_access'],
          cognitiveSupport: [],
          medicalEquipment: ['blood_glucose_monitor'],
          dietaryRequirements: ['diabetic_diet']
        },
        roomPreferences: {
          roomType: ['single'],
          floor: 0,
          amenities: ['private_bathroom', 'garden_view'],
          accessibility: ['wheelchair_access'],
          location: 'ground_floor'
        },
        referralSource: 'NHS Hospital',
        referrerName: 'Dr. Patricia Williams',
        referrerContact: 'p.williams@hospital.nhs.uk'
      }
    ];

    const waitingListEntries = [];
    for (let i = 0; i < waitingListData.length; i++) {
      const entryData = waitingListData[i];
      const entry = this.waitingListRepository.create({
        applicationNumber: `WL2024${String(i + 1).padStart(4, '0')}`,
        ...entryData,
        applicationDate: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000),
        status: ResidentStatus.ACTIVE as any,
        preferredAdmissionDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000),
        weeklyBudget: 1200
      });
      
      const savedEntry = await this.waitingListRepository.save(entry);
      waitingListEntries.push(savedEntry);
    }
    
    console.log(`‚úÖ Created ${waitingListEntries.length} waiting list entries`);
    return waitingListEntries;
  }

  private async seedDietaryProfiles(): Promise<void> {
    console.log('ü•ó Seeding dietary profiles...');
    
    const residents = await this.residentRepository.find();
    
    for (const resident of residents) {
      const profile = this.dietaryProfileRepository.create({
        residentId: resident.id,
        dietaryRestrictions: [],
        foodAllergies: [],
        culturalPreferences: {
          cuisine: 'British Traditional',
          preferredFoods: ['roast_dinner', 'fish_chips', 'shepherd_pie'],
          avoidedFoods: ['spicy_food'],
          religiousRequirements: [],
          traditionalMeals: ['sunday_roast', 'afternoon_tea']
        },
        mealPreferences: [
          {
            mealType: 'breakfast',
            preferredTime: '08:00',
            portionSize: 'regular',
            preferences: ['cooked_breakfast'],
            dislikes: ['porridge'],
            textureModification: 'regular' as any
          }
        ],
        requiredTextureModification: 'regular' as any,
        nutritionalAssessment: {
          assessmentDate: new Date(),
          assessor: 'dietitian',
          bmi: 22.5,
          weightStatus: 'normal',
          nutritionalRisk: 'low' as any,
          malnutritionRisk: false,
          supplementsRequired: [],
          calorieRequirement: 1800,
          proteinRequirement: 70,
          fluidRequirement: 2000,
          notes: 'Resident maintaining good nutritional status'
        },
        weightHistory: [
          {
            date: new Date(),
            weight: 70,
            recordedBy: 'care_assistant',
            notes: 'Routine weekly weigh-in'
          }
        ],
        fluidIntakeHistory: [
          {
            date: new Date(),
            totalIntake: 1800,
            targetIntake: 2000,
            hydrationLevel: 'adequate' as any,
            recordedBy: 'care_assistant',
            notes: 'Good fluid intake throughout the day'
          }
        ],
        supplements: [],
        lastReviewDate: new Date(),
        nextReviewDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
        reviewedBy: 'dietitian',
        isActive: true
      });
      
      await this.dietaryProfileRepository.save(profile);
    }
    
    console.log(`‚úÖ Created dietary profiles for ${residents.length} residents`);
  }

  // Helper methods
  private getRandomBedType(): BedType {
    const types = [BedType.STANDARD, BedType.PROFILING, BedType.ELECTRIC];
    return types[Math.floor(Math.random() * types.length)];
  }

  private getRandomCareLevel(): CareLevel[] {
    const levels = [CareLevel.RESIDENTIAL, CareLevel.NURSING, CareLevel.DEMENTIA];
    const selectedLevels = [];
    const numLevels = Math.floor(Math.random() * 2) + 1; // 1-2 care levels
    
    for (let i = 0; i < numLevels; i++) {
      const level = levels[Math.floor(Math.random() * levels.length)];
      if (!selectedLevels.includes(level)) {
        selectedLevels.push(level);
      }
    }
    
    return selectedLevels;
  }

  async clearAllData(): Promise<void> {
    console.log('üóëÔ∏è Clearing existing seeded data...');
    
    // Clear in reverse dependency order
    await this.dietaryProfileRepository.clear();
    await this.activityRepository.clear();
    await this.waitingListRepository.clear();
    await this.bedRepository.clear();
    await this.roomRepository.clear();
    await this.vehicleRepository.clear();
    await this.assetRepository.clear();
    await this.employeeRepository.clear();
    await this.residentRepository.clear();
    await this.menuRepository.clear();
    
    console.log('‚úÖ All data cleared');
  }

  async getSeededDataSummary(): Promise<any> {
    const counts = {
      residents: await this.residentRepository.count(),
      beds: await this.bedRepository.count(),
      rooms: await this.roomRepository.count(),
      employees: await this.employeeRepository.count(),
      menus: await this.menuRepository.count(),
      dietaryProfiles: await this.dietaryProfileRepository.count(),
      activities: await this.activityRepository.count(),
      assets: await this.assetRepository.count(),
      vehicles: await this.vehicleRepository.count(),
      waitingListEntries: await this.waitingListRepository.count()
    };

    return {
      summary: counts,
      totalRecords: Object.values(counts).reduce((sum, count) => sum + count, 0),
      lastSeeded: new Date()
    };
  }
}