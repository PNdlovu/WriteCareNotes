name: 🏥 WriteCareNotes Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  MINIMUM_COVERAGE: 85
  SECURITY_SCAN_THRESHOLD: 'high'
  ENTERPRISE_DEPLOYMENT: true

jobs:
  # 🔍 Code Quality and Security Gates
  quality-gates:
    name: 🎯 Quality & Security Gates
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for comprehensive analysis
        
    - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci --production=false
        npm audit --audit-level=high
        
    - name: 🔍 Lint and Code Quality
      run: |
        npm run lint
        npm run type-check
        echo "✅ Code quality checks passed"
        
    - name: 🏥 Healthcare Compliance Check
      run: |
        npm run compliance:check
        echo "✅ Healthcare compliance verified"
        
    - name: 🎯 Enterprise Completion Validation
      run: |
        npm run completion:scan
        if [ $? -ne 0 ]; then
          echo "❌ Critical issues found in modules"
          exit 1
        fi
        echo "✅ All modules production-ready"
        
    - name: 🔒 Security Vulnerability Scan
      run: |
        # SAST (Static Application Security Testing)
        npx semgrep --config=auto --error --json --output=sast-results.json .
        
        # Dependency vulnerability check
        npm audit --audit-level=${{ env.SECURITY_SCAN_THRESHOLD }}
        
        # Secret detection
        npx detect-secrets scan --all-files --baseline .secrets.baseline
        
        echo "✅ Security scans completed"
        
    - name: 📊 Upload Security Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          sast-results.json
          npm-audit.json
          
  # 🧪 Comprehensive Testing Suite
  testing-suite:
    name: 🧪 Testing & Coverage
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 45
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
        
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🗄️ Setup Test Database
      run: |
        # Setup test database with healthcare compliance
        docker run -d --name test-db \
          -e POSTGRES_PASSWORD=test \
          -e POSTGRES_DB=writecarenotes_test \
          -p 5432:5432 \
          postgres:15-alpine
        
        # Wait for database to be ready
        sleep 10
        
        # Run migrations
        npm run db:migrate:test
        
    - name: 🧪 Run Tests - ${{ matrix.test-type }}
      run: |
        case "${{ matrix.test-type }}" in
          "unit")
            npm run test:unit -- --coverage --coverageReporters=json-summary --coverageReporters=lcov
            ;;
          "integration")
            npm run test:integration -- --coverage
            ;;
          "e2e")
            npm run test:e2e -- --headless
            ;;
        esac
        
    - name: 📊 Coverage Validation
      if: matrix.test-type == 'unit'
      run: |
        COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
        echo "Current coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < $MINIMUM_COVERAGE" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below minimum ${MINIMUM_COVERAGE}%"
          exit 1
        fi
        echo "✅ Coverage requirement met: ${COVERAGE}%"
        
    - name: 🏥 Healthcare-Specific Tests
      if: matrix.test-type == 'integration'
      run: |
        # Run healthcare compliance tests
        npm run test:compliance
        
        # Run clinical safety tests
        npm run test:clinical-safety
        
        # Run data protection tests
        npm run test:gdpr
        
        echo "✅ Healthcare-specific tests passed"
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          coverage/
          test-results/
          
  # 🔧 Build and Package
  build-package:
    name: 🔧 Build & Package
    runs-on: ubuntu-latest
    needs: [quality-gates, testing-suite]
    timeout-minutes: 20
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci --production=false
      
    - name: 🏗️ Build Application
      run: |
        # Enterprise build with compliance validation
        npm run enterprise:validate
        npm run build:production
        
        echo "✅ Enterprise build completed"
        
    - name: 🔍 Post-Build Security Scan
      run: |
        # Scan built artifacts
        npx audit-ci --config .audit-ci.json
        
        # Container image security scan (if applicable)
        if [ -f "Dockerfile" ]; then
          docker build -t writecarenotes:${{ github.sha }} .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image writecarenotes:${{ github.sha }}
        fi
        
    - name: 📦 Package Application
      run: |
        # Create deployment package
        tar -czf writecarenotes-${{ github.sha }}.tar.gz \
          dist/ \
          package.json \
          package-lock.json \
          SECURITY_VERIFICATION_SUMMARY.md \
          AUDIT_REPORT.md \
          MODULE_CLOSURE_TRACKER.md
          
    - name: 📊 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          writecarenotes-${{ github.sha }}.tar.gz
          dist/
          
  # 🔒 Security Deep Scan
  security-deep-scan:
    name: 🔒 Deep Security Analysis
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    timeout-minutes: 60
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Advanced Security Scanning
      run: |
        # DAST (Dynamic Application Security Testing)
        docker run --rm -v $(pwd):/zap/wrk/:rw \
          owasp/zap2docker-stable zap-baseline.py \
          -t http://localhost:3000 \
          -r zap-report.html
          
        # Infrastructure security scan
        npx checkov --directory . --output json --output-file checkov-results.json
        
        # License compliance check
        npx license-checker --production --json --out license-report.json
        
    - name: 🏥 Healthcare Compliance Deep Scan
      run: |
        # NHS Digital compliance check
        npm run compliance:nhs-digital
        
        # CQC compliance verification
        npm run compliance:cqc
        
        # GDPR compliance validation
        npm run compliance:gdpr
        
        echo "✅ Deep compliance scans completed"
        
    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          zap-report.html
          checkov-results.json
          license-report.json
          
  # 🚀 Deployment Gates
  deployment-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-package, testing-suite]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 30
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: 🏥 Pre-Deployment Healthcare Validation
      run: |
        # Validate healthcare data migration scripts
        npm run validate:healthcare-migrations
        
        # Check clinical safety requirements
        npm run validate:clinical-safety
        
        # Verify GDPR compliance in staging environment
        npm run validate:gdpr-staging
        
    - name: 🚀 Deploy to Staging Environment
      run: |
        echo "🚀 Deploying to staging environment..."
        
        # Deploy with healthcare compliance monitoring
        ./scripts/deploy-staging.sh
        
        # Run post-deployment health checks
        ./scripts/health-check-staging.sh
        
        echo "✅ Staging deployment completed"
        
    - name: 🧪 Staging Environment Tests
      run: |
        # Run smoke tests
        npm run test:smoke:staging
        
        # Run healthcare workflow tests
        npm run test:healthcare-workflows:staging
        
        # Verify compliance monitoring
        npm run test:compliance-monitoring:staging
        
  # 🏭 Production Deployment
  deployment-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-package, testing-suite, security-deep-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 45
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: 🔒 Final Security Validation
      run: |
        # Final security check before production
        npm run security:final-check
        
        # Validate all security artifacts
        npm run validate:security-artifacts
        
        # Check production readiness
        npm run validate:production-readiness
        
    - name: 🏥 Healthcare Production Validation
      run: |
        # Final healthcare compliance check
        npm run compliance:production-check
        
        # Validate clinical safety in production
        npm run validate:clinical-safety-production
        
        # Check regulatory compliance
        npm run validate:regulatory-compliance
        
    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying to production environment..."
        
        # Blue-green deployment with healthcare data protection
        ./scripts/deploy-production.sh
        
        # Monitor deployment for healthcare-critical issues
        ./scripts/monitor-deployment.sh
        
        echo "✅ Production deployment completed"
        
    - name: ✅ Post-Deployment Validation
      run: |
        # Comprehensive health checks
        npm run test:health:production
        
        # Validate healthcare workflows
        npm run test:healthcare-workflows:production
        
        # Check compliance monitoring
        npm run test:compliance:production
        
        # Performance validation
        npm run test:performance:production
        
    - name: 📊 Generate Deployment Report
      run: |
        # Generate comprehensive deployment report
        npm run generate:deployment-report
        
        # Update module closure tracker
        npm run completion:update-tracker
        
        # Generate compliance report
        npm run compliance:generate-report
        
  # 📊 Reporting and Notifications
  reporting:
    name: 📊 Generate Reports
    runs-on: ubuntu-latest
    needs: [quality-gates, testing-suite, build-package]
    if: always()
    timeout-minutes: 15
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📊 Collect All Artifacts
      uses: actions/download-artifact@v3
      
    - name: 📋 Generate Comprehensive Report
      run: |
        # Generate enterprise quality report
        npm run generate:quality-report
        
        # Update module closure tracker
        npm run completion:report
        
        # Generate security summary
        npm run generate:security-summary
        
    - name: 📧 Send Notifications
      if: github.ref == 'refs/heads/main'
      run: |
        # Send success/failure notifications to healthcare team
        ./scripts/notify-healthcare-team.sh
        
        # Update compliance dashboard
        ./scripts/update-compliance-dashboard.sh
        
    - name: 📊 Upload Final Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: enterprise-reports
        path: |
          reports/
          MODULE_CLOSURE_TRACKER.md
          SECURITY_VERIFICATION_SUMMARY.md
          AUDIT_REPORT.md

  # 🔄 Continuous Monitoring
  continuous-monitoring:
    name: 🔄 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deployment-production
    if: github.ref == 'refs/heads/main' && success()
    timeout-minutes: 60
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Start Continuous Monitoring
      run: |
        # Start healthcare-specific monitoring
        ./scripts/start-healthcare-monitoring.sh
        
        # Monitor compliance metrics
        ./scripts/monitor-compliance.sh
        
        # Monitor clinical safety indicators
        ./scripts/monitor-clinical-safety.sh
        
    - name: 📊 Generate Monitoring Dashboard
      run: |
        # Update real-time monitoring dashboard
        npm run monitoring:update-dashboard
        
        # Set up alerts for healthcare-critical issues
        npm run monitoring:setup-alerts
        
        echo "✅ Continuous monitoring activated"